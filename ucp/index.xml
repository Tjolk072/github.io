<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ucps on Docker Docs</title>
    <link>https://docs.docker.com/v1.10/ucp/</link>
    <description>Recent content in Ucps on Docker Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://docs.docker.com/v1.10/ucp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploy an application</title>
      <link>https://docs.docker.com/v1.10/ucp/deploy-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/deploy-application/</guid>
      <description>

&lt;h1 id=&#34;deploy-an-application-onto-ucp&#34;&gt;Deploy an application onto UCP&lt;/h1&gt;

&lt;p&gt;In this quickstart, you learn how to deploy multi-container applications onto UCP.
While UCP is intended for deploying multi-container applications, the workflow
for developing them begins outside of the UCP installation. This page explains
the recommended workflow for developing applications. Then, it shows you
step-by-step how to deploy the fully developed application.&lt;/p&gt;

&lt;p&gt;The sample is written for a novice network administrator. You should have a
basic skills on Linux systems and &lt;code&gt;ssh&lt;/code&gt; experience. Some knowledge of Git is
also useful but not strictly required.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The command examples in this page were tested for a Mac OSX environment.
If you are in another, you may need to adjust the commands to use analogous
commands for you environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;understand-the-development-workflow&#34;&gt;Understand the development workflow&lt;/h2&gt;

&lt;p&gt;UCP is at the end of the application development workflow. You should only
deploy, or allowed to be deployed, individual containers or multi-container
applications that have been systematically developed and tested.&lt;/p&gt;

&lt;p&gt;Your development team should develop in a local environment using the Docker
open source software (OSS) components. These components include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker Engine&lt;/li&gt;
&lt;li&gt;Docker Machine (if development is on Mac or Windows)&lt;/li&gt;
&lt;li&gt;Docker Swarm&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;li&gt;Docker Hub (for publicly available images)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Developing an application can include using public images from Docker Hub and
developing new custom images. If there are multiple containers involved, the
team should configure and test container port configurations. For applications
that require them, the team may need to create Docker container volumes and
ensure they are of sufficient size.&lt;/p&gt;

&lt;p&gt;Once the team has developed a microservice application, they should test it
locally at scale on a Swarm cluster. The Swarm documentation includes detailed
documentation about &lt;a href=&#34;https://docs.docker.com/swarm/scale/05-troubleshoot/&#34;&gt;troubleshooting a microservice
application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The output of application development should be a Docker Compose file and a set
of images ready for deployment. These images can be stored in Docker Hub. If
your company is using Docker Trusted Registry, the team may want to or be
required to store their application images in the company registry. The team
must ensure store the images in an accessible registry account.&lt;/p&gt;

&lt;h2 id=&#34;step-1-before-you-begin&#34;&gt;Step 1. Before you begin&lt;/h2&gt;

&lt;p&gt;This example requires that you have an installed UCP deployment and that you have
&lt;a href=&#34;../ucp/networking/&#34; target=&#34;_blank&#34;&gt;enabled container networking&lt;/a&gt;
on that installation. Take a moment to check this requirement.&lt;/p&gt;

&lt;p&gt;When deploying an application to UCP, you work from a local environment using
the UCP client bundle for your UCP user.  You should never deploy from the
command-line while directly logged into a UCP node. The deploy on this page,
requires that your local environment includes the following software:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker Engine&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While not always the case, the expectation is your local environment is a
Windows or Mac machine. If your personal machine is a Linux machine that Docker
Engine supports, such a configuration works too.&lt;/p&gt;

&lt;h3 id=&#34;windows-or-mac-prerequisites&#34;&gt;Windows or Mac prerequisites&lt;/h3&gt;

&lt;p&gt;Because Docker Engine and UCP both rely on Linux-specific features, you can&amp;rsquo;t
run natively in Mac or Windows. Instead, you must install the Docker Toolbox
application. Docker Toolbox installs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker Machine for running &lt;code&gt;docker-machine&lt;/code&gt; commands&lt;/li&gt;
&lt;li&gt;Docker Engine for running the &lt;code&gt;docker&lt;/code&gt; commands&lt;/li&gt;
&lt;li&gt;Docker Compose for running the &lt;code&gt;docker-compose&lt;/code&gt; commands&lt;/li&gt;
&lt;li&gt;Kitematic, the Docker GUI&lt;/li&gt;
&lt;li&gt;a Quickstart shell preconfigured for a Engine command-line environment&lt;/li&gt;
&lt;li&gt;Oracle VirtualBox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These tools enable you to run Engine CLI commands from your Mac OS X or Windows
shell.&lt;/p&gt;

&lt;p&gt;Your Mac must be running OS X 10.8 &amp;ldquo;Mountain Lion&amp;rdquo; or higher to install Toolbox.
To check your Mac OS X version, see &lt;a
href=&#34;https://docs.docker.com/mac/step_one/&#34; target=&#34;_blank&#34;&gt;the Docker Engine
getting started on Mac&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On Windows, your machine must have a 64-bit operating system running Windows 7 or
higher. Additionally, you must make sure that virtualization is enabled on your
machine. For information on how to check for virtualization, see &lt;a
href=&#34;https://docs.docker.com/windows/step_one/&#34; target=&#34;_blank&#34;&gt;the Docker
Engine getting started on Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t already done so, make you have installed Docker Toolbox on your
local &lt;a href=&#34;https://docs.docker.com/engine/installation/mac/&#34;
target=&#34;_blank&#34;&gt;Mac OS X&lt;/a&gt; or &lt;a
href=&#34;https://docs.docker.com/engine/installation/windows/&#34;
target=&#34;_blank&#34;&gt;Windows machine&lt;/a&gt;.  After a successful installation, continue
to the next step.&lt;/p&gt;

&lt;h3 id=&#34;about-a-linux-environment&#34;&gt;About a Linux environment&lt;/h3&gt;

&lt;p&gt;If your local environment is Linux, make sure you have installed the &lt;a
href=&#34;https://docs.docker.com/engine/installation&#34; target=&#34;_blank&#34;&gt;correct
Docker Engine for your Linux OS&lt;/a&gt;. Also, make sure you have installed &lt;a
href=&#34;http://docs-stage.docker.com/compose/install/&#34; target=&#34;_blank&#34;&gt;Docker
Compose&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;step-2-get-the-client-bundle-and-configure-a-shell&#34;&gt;Step 2. Get the client bundle and configure a shell&lt;/h2&gt;

&lt;p&gt;In this step, you download the &lt;em&gt;client bundle&lt;/em&gt;. To issue commands to a UCP node,
your local shell environment must be configured with the same security
certificates as the UCP application itself.  The client bundle contains the
certificates and a script to configure a shell environment.&lt;/p&gt;

&lt;p&gt;Download the bundle and configure your environment.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you haven&amp;rsquo;t already done so, log into UCP.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;admin &amp;gt; Profile&lt;/strong&gt; from the right-hand menu.&lt;/p&gt;

&lt;p&gt;Any user can download their certificates. So, if you were logged in under a
user name such as &lt;code&gt;davey&lt;/code&gt; the path to download bundle is &lt;strong&gt;davey &amp;gt;
Profile&lt;/strong&gt;. Since you are logged in as &lt;code&gt;admin&lt;/code&gt;, the path is &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Create Client Bundle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The browser downloads the &lt;code&gt;ucp-bundle-admin.zip&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a shell on your local terminal.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are on Mac or Windows, ensure your shell does not have an active Docker Machine VM.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ls
NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
moxie   -        virtualbox   Stopped                                       Unknown   
test    -        virtualbox   Running   tcp://192.168.99.100:2376           v1.10.1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While Machine has a stopped and running host, neither is active in the
shell. You know this because neither host shows an * (asterisk) indicating
the shell is configured.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a directory to hold the deploy information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir deploy-app
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside of a &lt;code&gt;deploy-app&lt;/code&gt; create a directory to hold your UCP bundle files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir deploy-app/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change into the &lt;code&gt;deploy-app/bundle&lt;/code&gt; directory and move the downloaded bundle into it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd deploy-app/bundle
$ mv ~/Downloads/ucp-bundle-admin.zip .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unzip the client bundle.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ unzip bundle.zip
    Archive:  bundle.zip
    extracting: ca.pem
    extracting: cert.pem
    extracting: key.pem
    extracting: cert.pub
    extracting: env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change into the directory that was created when the bundle was unzipped&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Execute the &lt;code&gt;env.sh&lt;/code&gt; script to set the appropriate environment variables for your UCP deployment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ source env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify that you are connected to UCP by using the &lt;code&gt;docker info&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker info
Containers: 11
Running: 11
Paused: 0
Stopped: 0
Images: 22
... &amp;lt;output snipped&amp;gt;
Plugins:
Volume:
Network:
Kernel Version: 4.2.0-23-generic
Operating System: linux
Architecture: amd64
CPUs: 3
Total Memory: 11.58 GiB
Name: ucp-controller-ucpdemo-0
ID: DYZQ:I5RM:VM6K:MUFZ:JXCU:H45Y:SFU4:CBPS:OMXC:LQ3S:L2HQ:VEWW
Labels:
com.docker.ucp.license_key=QMb9Ux2PKj-IshswTScxsd19n-c8LwtP-pQiDWy2nVtg
com.docker.ucp.license_max_engines=10
com.docker.ucp.license_expires=2016-05-03 19:52:02 +0000 UTC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-3-learn-about-the-application&#34;&gt;Step 3: Learn about the application&lt;/h2&gt;

&lt;p&gt;The application you&amp;rsquo;ll be deploying is a voting application. The voting
application is a dockerized microservice application. It uses a parallel web
frontend that sends jobs to asynchronous background workers. The application&amp;rsquo;s
design can accommodate arbitrarily large scale. The diagram below shows the high
level architecture of the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/app-architecture.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The application is fully dockerized with all services running inside of
containers.&lt;/p&gt;

&lt;p&gt;The frontend consists of an Interlock load balancer with &lt;em&gt;n&lt;/em&gt; frontend web
servers and associated queues. The load balancer can handle an arbitrary number
of web containers behind it (&lt;code&gt;frontend01&lt;/code&gt;- &lt;code&gt;frontendN&lt;/code&gt;). The web containers run
a simple Python Flask application. Each web container accepts votes and queues
them to a Redis container on the same node. Each web container and Redis queue
pair operates independently.&lt;/p&gt;

&lt;p&gt;The load balancer together with the independent pairs allows the entire
application to scale to an arbitrary size as needed to meet demand.&lt;/p&gt;

&lt;p&gt;Behind the frontend is a worker tier which runs on separate nodes. This tier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scans the Redis containers&lt;/li&gt;
&lt;li&gt;dequeues votes&lt;/li&gt;
&lt;li&gt;deduplicates votes to prevent double voting&lt;/li&gt;
&lt;li&gt;commits the results to a Postgres container running on a separate node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just like the front end, the worker tier can also scale arbitrarily.&lt;/p&gt;

&lt;p&gt;When deploying in UCP, you won&amp;rsquo;t need this exact architecture. For example, you
won&amp;rsquo;t need the Interlock load balancer. Part of the work of UCP administrator
may be to polish the application the team created, leaving only what&amp;rsquo;s needed for UCP.&lt;/p&gt;

&lt;p&gt;For example, the team fully &lt;a
href=&#34;https://github.com/docker/swarm-microservice-demo-v1&#34; target=&#34;_blank&#34;&gt;
developed and tested through a local environment using the open source Docker
ecosystem&lt;/a&gt;. The Docker Compose file they created looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#
# Compose file to run the voting app and dependent services
#
version: &#39;2&#39;
services:
  web-vote-app:
    build: web-vote-app
    environment:
      WEB_VOTE_NUMBER: &amp;quot;01&amp;quot;
      constraint:node: &amp;quot;=frontend01&amp;quot;
  vote-worker:
    build: vote-worker
    environment:
      FROM_REDIS_HOST: 1
      TO_REDIS_HOST: 1
  results-app:
    build: results-app
  redis01:
    image: redis:3
  store:
    image: postgres:9.5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=pg8675309
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this &lt;code&gt;docker-compose.file&lt;/code&gt; includes a &lt;code&gt;build&lt;/code&gt; command. You should never
&lt;code&gt;build&lt;/code&gt; an image against the UCP controller or its nodes. You can find out if
the team built and stored the images described in the file, or you can build the
images yourself and push them to a registry. After a little work you could come
up with a &lt;code&gt;docker-compose.yml&lt;/code&gt; that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: &amp;quot;2&amp;quot;

services:
  voting-app:
    image: docker/example-voting-app-voting-app
    ports:
      - &amp;quot;80&amp;quot;
    networks:
      - voteapp
  result-app:
    image: docker/example-voting-app-result-app
    ports:
      - &amp;quot;80&amp;quot;
    networks:
      - voteapp
  worker:
    image: docker/example-voting-app-worker
    networks:
      - voteapp
  redis:
    image: redis
    ports:
      - &amp;quot;6379&amp;quot;
    networks:
      - voteapp
    container_name: redis
  db:
    image: postgres:9.4
    volumes:
      - &amp;quot;db-data:/var/lib/postgresql/data&amp;quot;
    networks:
      - voteapp
    container_name: db
volumes:
  db-data:

networks:
  voteapp:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This revised compose file uses a set of images stored in Docker Hub. They happen
to be in Docker repositories because the sample application was built by a
Docker team. Compose allows you to designate a network and it defaults to
creating an &lt;code&gt;overlay&lt;/code&gt; network. So, you can specify which networks in UCP to run
on.  In this case, you won&amp;rsquo;t manually create the networks, you&amp;rsquo;ll let Compose create
the network for you.&lt;/p&gt;

&lt;h2 id=&#34;step-4-deploy-the-application&#34;&gt;Step 4. Deploy the application&lt;/h2&gt;

&lt;p&gt;In this step, you deploy the application in UCP.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Bring up the shell you configured in the &lt;a href=&#34;#step-2-get-the-client-bundle-and-configure-a-shell&#34;&gt;Step
2&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone the sample compose file onto your local machine..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/nicolaka/voteapp-base.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The clone command creates a &lt;code&gt;voteapp-base&lt;/code&gt; directory containing the Compose
file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change into the &lt;code&gt;voteapp-base&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd voteapp-base
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose up
Creating network &amp;quot;voteappbase_voteapp&amp;quot; with the default driver
Pulling db (postgres:9.4)...
ucpdemo-0: Pulling postgres:9.4... : downloaded
ucpdemo-2: Pulling postgres:9.4... : downloaded
ucpdemo-1: Pulling postgres:9.4... : downloaded
Creating db
Pulling redis (redis:latest)...
ucpdemo-0: Pulling redis:latest... : downloaded
ucpdemo-2: Pulling redis:latest... : downloaded
ucpdemo-1: Pulling redis:latest... : downloaded
Creating redis
Pulling worker (docker/example-voting-app-worker:latest)...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compose creates the &lt;code&gt;voteappbase_voteapp&lt;/code&gt; network and deploys the application.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;From UCP, go to the &lt;strong&gt;Applications&lt;/strong&gt; page inside UCP.&lt;/p&gt;

&lt;p&gt;Your new application should appear in the list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Expand to the app to see which nodes the application containers are running in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/votingapp_default.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-5-test-the-application&#34;&gt;Step 5. Test the application&lt;/h2&gt;

&lt;p&gt;Now that the application is deployed and running, it&amp;rsquo;s time to test it. To do
this, you configure a DNS mapping on the node where you are running
&lt;code&gt;votingapp_web-vote-app_1&lt;/code&gt; container. browser. This maps the &amp;ldquo;votingapp.local&amp;rdquo;
DNS name to the public IP address of the &lt;code&gt;votingapp_web-vote-app_1&lt;/code&gt; node.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Configure the DNS name resolution on your local machine for browsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On Windows machines this is done by adding &lt;code&gt;votingapp.local &amp;lt;votingapp_web-vote-app_1-public-ip&amp;gt;&lt;/code&gt; to the &lt;code&gt;C:\Windows\System32\Drivers\etc\hosts file&lt;/code&gt;. Modifying this file requires administrator privileges. To open the file with administrator privileges, right-click &lt;code&gt;C:\Windows\System32\notepad.exe&lt;/code&gt; and select &lt;code&gt;Run as administrator&lt;/code&gt;. Once Notepad is open, click &lt;code&gt;file&lt;/code&gt; &amp;gt; &lt;code&gt;open&lt;/code&gt; and open the file and make the edit.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On OSX machines this is done by adding &lt;code&gt;votingapp.local &amp;lt;votingapp_web-vote-app_1-public-ip&amp;gt;&lt;/code&gt; to &lt;code&gt;/private/etc/hosts&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On most Linux machines this is done by adding &lt;code&gt;votingapp.local &amp;lt;votingapp_web-vote-app_1-public-ip&amp;gt;&lt;/code&gt; to &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be sure to replace &lt;code&gt;&amp;lt;votingapp_web-vote-app_1-public-ip&amp;gt;&lt;/code&gt; with the public IP address of
your &lt;code&gt;votingapp_web-vote-app_1&lt;/code&gt; node. You can find the &lt;code&gt;votingapp_web-vote-app_1&lt;/code&gt; node&amp;rsquo;s Public IP by
selecting the node from within the UCP dashboard.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify the mapping worked with a &lt;code&gt;ping&lt;/code&gt; command from your local machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ping votingapp.local
Pinging votingapp.local [54.183.164.230] with 32 bytes of data:
Reply from 54.183.164.230: bytes=32 time=164ms TTL=42
Reply from 54.183.164.230: bytes=32 time=163ms TTL=42
Reply from 54.183.164.230: bytes=32 time=169ms TTL=42
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Point your web browser to &lt;a href=&#34;http://votingapp.local&#34;&gt;http://votingapp.local&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/vote-app-test.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Docker Universal Control Plane</title>
      <link>https://docs.docker.com/v1.10/ucp/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/overview/</guid>
      <description>

&lt;h1 id=&#34;ucp-table-of-contents&#34;&gt;UCP table of contents&lt;/h1&gt;

&lt;p&gt;Universal Control Plane is a Docker native solution designed to provision and
cluster Docker hosts and their resources. You can use UCP to deploy and manage
Dockerized applications. UCP has full support for the Docker API. This feature
means an easy deployment of applications from development to test to production
&amp;ndash; without code changes.&lt;/p&gt;

&lt;p&gt;The UCP documentation includes the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/&#34;&gt;UCP Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/evaluation-install/&#34;&gt;Evaluation installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/plan-production-install/&#34;&gt;Plan a production installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/production-install/&#34;&gt;Install UCP for production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/networking/&#34;&gt;Set up container networking with UCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/understand_ha/&#34;&gt;Set up high availability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/deploy-application/&#34;&gt;Deploy an application thru UCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/kv_store/&#34;&gt;UCP Key/Value Store Backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/manage/monitor-ucp/&#34;&gt;Manage, monitor, and troubleshoot UCP and its resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/manage/monitor-manage-users/&#34;&gt;Manage and authorize users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/reference/&#34;&gt;The ucp tool reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/support/&#34;&gt;Work with Docker Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/release_notes/&#34;&gt;UCP Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Evaluation installation</title>
      <link>https://docs.docker.com/v1.10/ucp/evaluation-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/evaluation-install/</guid>
      <description>

&lt;h1 id=&#34;evaluation-installation-and-quickstart&#34;&gt;Evaluation installation and quickstart&lt;/h1&gt;

&lt;p&gt;This page helps you to learn about Docker Universal Control Plane (UCP) at a
high-level through installing and running UCP in your local, sandbox
installation. The installation should be done on a Mac OS X or Windows system.
If you are experienced with Linux or a technical DevOps user wanting a technical
deep dive, please feel free to skip this evaluation and go directly to &lt;a href=&#34;../v1.10/ucp/plan-production-install/&#34;&gt;Plan a production installation&lt;/a&gt; and then to &lt;a href=&#34;../v1.10/ucp/production-install/&#34;&gt;Install UCP for production&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A UCP installation consists of an UCP controller and one or more hosts. These
instructions use Docker Machine, Docker&amp;rsquo;s provisioning tool, to create several
local hosts running Docker Engine. Once you create these hosts, you&amp;rsquo;ll install
UCP and its components on them just as you would in a full-on UCP installation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This evaluation installs UCP on top of the open source software version of
Docker Engine inside of a VirtualBox VM which is running the small-footprint
&lt;code&gt;boot2docker.iso&lt;/code&gt; Linux. Such a configuration is &lt;strong&gt;not&lt;/strong&gt; supported for UCP in
production.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;step-1-about-this-example&#34;&gt;Step 1. About this example&lt;/h2&gt;

&lt;p&gt;This example introduces you to UCP by means of a very simple sandbox example.
You&amp;rsquo;ll create a small UCP installation, deploy a container through UCP, and
examine the interface.&lt;/p&gt;

&lt;p&gt;For this evaluation installation, you&amp;rsquo;ll use Machine to create two VirtualBox
VMs. Each VM runs small foot-print Linux image called &lt;code&gt;boot2docker.iso&lt;/code&gt;. Machine
provisions each VM with the open source Docker Engine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/explain.png&#34; alt=&#34;Explain setup&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll use each of these VMs as a node in a simple UCP installation. The
installation will have a controller and a node. The installation rests on top of
a Docker Swarm cluster. The UCP installation process by default secures the cluster via self-signed TLS certificates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/sandbox.png&#34; alt=&#34;Sandbox&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This example is intended as an introduction for non-technical users wanting to
explore UCP for themselves. If you are a highly technical user intending to act as
UCP administration operator, you may prefer to skip this and go straight to
&lt;a href=&#34;../v1.10/ucp/plan-production-install/&#34;&gt;Plan a production installation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The command examples in this page were tested for a Mac OSX environment.
If you are in another, you may need to adjust the commands to use analogous
commands for you environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;step-2-verify-the-prerequisites&#34;&gt;Step 2. Verify the prerequisites&lt;/h2&gt;

&lt;p&gt;Because Docker Engine and UCP both rely on Linux-specific features, you can&amp;rsquo;t
run natively in Mac or Windows. Instead, you must install the Docker Toolbox
application. The application installs a VirtualBox Virtual Machine (VM), the
Docker Engine itself, and the Docker Toolbox management tool. These tools enable
you to run Engine CLI commands from your Mac OS X or Windows shell.&lt;/p&gt;

&lt;p&gt;Your Mac must be running OS X 10.8 &amp;ldquo;Mountain Lion&amp;rdquo; or higher to perform this
procedure. To check your Mac OS X version, see &lt;a href=&#34;https://docs.docker.com/mac/step_one/&#34; target=&#34;_blank&#34;&gt;the Docker Engine getting started on Mac&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On Windows, your machine must have a 64-bit operating system running
Windows 7 or higher. Additionally, you must make sure that virtualization is
enabled on your machine. For information on how to check for virtualization, see &lt;a href=&#34;https://docs.docker.com/windows/step_one/&#34; target=&#34;_blank&#34;&gt;the Docker Engine getting started on Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t already done so, make you have installed Docker Toolbox on your local &lt;a href=&#34;https://docs.docker.com/engine/installation/mac/&#34; target=&#34;_blank&#34;&gt;Mac OS X&lt;/a&gt; or &lt;a href=&#34;https://docs.docker.com/engine/installation/windows/&#34; target=&#34;_blank&#34;&gt;Windows machine&lt;/a&gt;.  After a successful installation, continue to the next step.&lt;/p&gt;

&lt;h2 id=&#34;step-3-provision-hosts-with-engine&#34;&gt;Step 3. Provision hosts with Engine&lt;/h2&gt;

&lt;p&gt;In this step, you provision two VMs for your UCP installation. This step is
purely to enable your evaluation. You would never run UCP in production on local
VMs with the open source Engine.&lt;/p&gt;

&lt;p&gt;In a production installation, you would use enterprise-grade Linux servers as
your nodes. These nodes could be on your company&amp;rsquo;s private network or in the
cloud.  UCP requires that each node be installed with the Commercially Supported
Docker Engine (CS Engine).&lt;/p&gt;

&lt;p&gt;Set up the nodes for your evaluation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a terminal on your computer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use Docker Machine to list any VMs in VirtualBox.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ls
NAME         ACTIVE   DRIVER       STATE     URL                         SWARM
default    *        virtualbox   Running   tcp://192.168.99.100:2376  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a VM named &lt;code&gt;node1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;UCP runs best with a minimum of 1.50 GB in memory and requires a minimum of
3.00 GB disk space. When you create your virtual host, you supply options to
size it appropriately.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create -d virtualbox \
--virtualbox-memory &amp;quot;2000&amp;quot; \
--virtualbox-disk-size &amp;quot;5000&amp;quot; node1
Running pre-create checks...
Creating machine...
(node1) Copying /Users/mary/.docker/machine/cache/boot2docker.iso to /Users/mary/.docker/machine/machines/node1/boot2docker.iso...
(node1) Creating VirtualBox VM...
(node1) Creating SSH key...
(node1) Starting the VM...
(node1) Waiting for an IP...
Waiting for machine to be running, this may take a few minutes...
Machine is running, waiting for SSH to be available...
Detecting operating system of created instance...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect Docker to this machine, run: docker-machine env node1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a VM named &lt;code&gt;node2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create -d virtualbox \
--virtualbox-memory &amp;quot;2000&amp;quot; node2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the Machine &lt;code&gt;ls&lt;/code&gt; command to list your hosts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NAME         ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
node1        -        virtualbox   Running   tcp://192.168.99.104:2376           v1.10.0   
node2        -        virtualbox   Running   tcp://192.168.99.102:2376           v1.10.0   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, all the nodes are in the &lt;code&gt;Running&lt;/code&gt; state. You have your hosts provisioned, now you are ready to install UCP itself.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-4-learn-about-the-ucp-tool&#34;&gt;Step 4. Learn about the ucp tool&lt;/h2&gt;

&lt;p&gt;You install UCP by using the Engine CLI to run the &lt;code&gt;ucp&lt;/code&gt; tool. The &lt;code&gt;ucp&lt;/code&gt; tool is
an image with subcommands to &lt;code&gt;install&lt;/code&gt; a UCP controller or &lt;code&gt;join&lt;/code&gt; a node to a
UCP controller. The general format of these commands are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Docker client&lt;/th&gt;
&lt;th&gt;&lt;code&gt;run&lt;/code&gt; command with options&lt;/th&gt;
&lt;th&gt;&lt;code&gt;ucp&lt;/code&gt; image&lt;/th&gt;
&lt;th&gt;Subcommand with options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;install --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;join --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uninstall --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can these subcommands interactively by passing them the &lt;code&gt;-i&lt;/code&gt; option or by
passing command-line options. The &lt;code&gt;ucp&lt;/code&gt; tool is designed to make UCP easier to
install than many enterprise-grade applications. In interactive mode the tool
works to discover your network topology and suggest default answers to you. This
evaluation uses the interactive method.&lt;/p&gt;

&lt;p&gt;Regardless of how you use the &lt;code&gt;docker/ucp&lt;/code&gt; tool, the default install supplies
some quick default options for both data volumes and the certificate authority
(CA). In a production installation you can optionally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use the high availability feature&lt;/li&gt;
&lt;li&gt;customize the port used by the UCP web application&lt;/li&gt;
&lt;li&gt;customize the port used by the Swarm manager&lt;/li&gt;
&lt;li&gt;create your own data volumes&lt;/li&gt;
&lt;li&gt;use your own TLS certificates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;ll learn more about these when you &lt;a
href=&#34;https://docs.docker.com/ucp/plan-production-install/&#34; target=&#34;_blank&#34;&gt;Plan
a production installation&lt;/a&gt;. For now, in this evaluation sandbox installation,
you&amp;rsquo;ll use all the default values with one exception, you&amp;rsquo;ll specify a custom
port for the Swarm manager.&lt;/p&gt;

&lt;h2 id=&#34;step-5-install-the-ucp-controller&#34;&gt;Step 5. Install the UCP controller&lt;/h2&gt;

&lt;p&gt;In this step, you install the UCP controller on the &lt;code&gt;node1&lt;/code&gt; you provisioned
earlier. A controller serves the UCP application and runs the processes that
manage an installation&amp;rsquo;s Docker objects.&lt;/p&gt;

&lt;p&gt;In a production installation, a system administrator can implement
UCP&amp;rsquo;s high availability feature. High availability allows you to designate
several nodes as controller replicas. In this way, if one controller fails
a replica node is ready to take its place.&lt;/p&gt;

&lt;p&gt;For this evaluation, you won&amp;rsquo;t need that level of robustness. A single
host for the controller suffices.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you don&amp;rsquo;t already have one, open a terminal on your computer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect the terminal environment to the &lt;code&gt;node1&lt;/code&gt; you created.&lt;/p&gt;

&lt;p&gt;a. Use &lt;code&gt;docker-machine env&lt;/code&gt; command to get the settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine env node1
export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
export DOCKER_HOST=&amp;quot;tcp://192.168.99.103:2376&amp;quot;
export DOCKER_CERT_PATH=&amp;quot;/Users/mary/.docker/machine/machines/node1&amp;quot;
export DOCKER_MACHINE_NAME=&amp;quot;node1&amp;quot;
# Run this command to configure your shell:
# eval $(docker-machine env node1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b. Run the &lt;code&gt;eval&lt;/code&gt; command to set your environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(docker-machine env node1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c. Verify that &lt;code&gt;node1&lt;/code&gt; has an active environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ls
NAME         ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
node1        *        virtualbox   Running   tcp://192.168.99.104:2376           v1.10.0   
node2        -        virtualbox   Running   tcp://192.168.99.102:2376           v1.10.0   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An &lt;code&gt;*&lt;/code&gt; (asterisk) in the &lt;code&gt;ACTIVE&lt;/code&gt; field indicates that the &lt;code&gt;node1&lt;/code&gt; environment is active.&lt;/p&gt;

&lt;p&gt;The client will send the &lt;code&gt;docker&lt;/code&gt; commands in the following steps to the Docker Engine on on &lt;code&gt;node1&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the &lt;code&gt;ucp&lt;/code&gt; tool to install interactively.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are on a Windows system, your shell can&amp;rsquo;t resolve the
&lt;code&gt;$(docker-machine ip node2)&lt;/code&gt; variable. So, replace it with the actual IP
address.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it \
-v /var/run/docker.sock:/var/run/docker.sock \
--name ucp docker/ucp install -i \
--swarm-port 3376 --host-address $(docker-machine ip node1)
Unable to find image &#39;docker/ucp:latest&#39; locally
latest: Pulling from docker/ucp
0198ad4008dc: Pull complete
291084ae72f3: Pull complete
Digest: sha256:28b6c9640e5af0caf2b2acbbbfd7c07bdbec6b170f04cbaeea7bb4909d74898d
INFO[0000] Verifying your system is compatible with UCP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first time you run the &lt;code&gt;ucp&lt;/code&gt; tool, the &lt;code&gt;docker run&lt;/code&gt; command pulls its
image from the Docker Hub. The image contains the &lt;code&gt;ucp&lt;/code&gt; tool. The tool
downloads if needed and then verifies your system supports UCP. The tool is
designed to discover the information it needs if it can. This reduces the
change for human error or mistakes during the install.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter a UCP password when prompted and then confirm it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please choose your initial UCP admin password:
Confirm your initial password:
INFO[0016] Pulling required images... (this may take a while)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The UCP system relies on a set of Docker images running in containers. The &lt;code&gt;ucp&lt;/code&gt; installer gets the latest official UCP images.&lt;/p&gt;

&lt;p&gt;The system prompts you for Subject alternative names (SANs). UCP requires
that all clients, including the Docker Engine, use a Swarm TLS certificate
chain signed by the UCP Swarm Root CA. You can provide the certificate
system with subject alternative names or SANs. The SANs are used to set up
individual &amp;ldquo;leaf certificates.&amp;rdquo; In this sandbox, you&amp;rsquo;ve already provided the IP address and the &lt;code&gt;ucp&lt;/code&gt; tool discovered this for you and shows it in the controller list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARN[0004] None of the hostnames we&#39;ll be using in the UCP certificates
[controller 127.0.0.1 172.17.0.1 192.168.99.106] contain a domain
component.  Your generated certs may fail TLS validation unless you only
use one of these shortnames or IPs to connect.  You can use the --san
flag to add more aliases

You may enter additional aliases (SANs) now or press enter to proceed
with the above list.
Additional aliases:
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press enter to proceed with the list the &lt;code&gt;ucp&lt;/code&gt; tool provided.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO[0005] Installing UCP with host address 192.168.99.106 - If this is
incorrect, please specify an alternative address with the
&#39;--host-address&#39; flag
WARN[0000] None of the hostnames we&#39;ll be using in the UCP certificates
[controller 127.0.0.1 172.17.0.1 192.168.99.106 192.168.99.106] contain
a domain component.  Your generated certs may fail TLS validation unless
you only use one of these shortnames or IPs to connect.  You can use the
--san flag to add more aliases
INFO[0001] Generating Swarm Root CA
INFO[0022] Generating UCP Root CA
INFO[0024] Deploying UCP Containers
INFO[0028] UCP instance ID: CJQN:ZQVX:B6CC:KFD3:IXN5:FGLF:GXMN:WALD:QFHU:QLSX:ZCBY:CAL7
INFO[0028] UCP Server SSL: SHA1 Fingerprint=02:36:16:93:B4:21:B7:AD:0A:6C:0F:3C:99:75:18:5D:5A:F7:C4:0C
INFO[0028] Login as &amp;quot;admin&amp;quot;/(your admin password) to UCP at https://192.168.99.106:443
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When it completes, the &lt;code&gt;ucp&lt;/code&gt; tool prompts you to login into the UCP GUI
gives you its location. You&amp;rsquo;ll do this and install a license in Step 5,
below.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-6-license-your-installation&#34;&gt;Step 6. License your installation&lt;/h2&gt;

&lt;p&gt;In this step, you log into UCP, get a license, and install it. Docker allows you to run an evaluation version of UCP with a single controller and node for up to 30 days.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enter the address into your browser to view the UCP login screen.&lt;/p&gt;

&lt;p&gt;Your browser may warn you about the connection. The warning appears because,
in this evaluation installation, the UCP certificate was issued by a
built-in certificate authority (CA). Your actions with the install actually
created the certificate. If you are concerned, the certificate&amp;rsquo;s fingerprint
is displayed during install and you can compare it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &lt;strong&gt;Advanced&lt;/strong&gt; link and then the &lt;strong&gt;Proceed to&lt;/strong&gt; link.&lt;/p&gt;

&lt;p&gt;The login screen displays.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/login-ani.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter &lt;code&gt;admin&lt;/code&gt; for the username along with the password you provided to the &lt;code&gt;install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After you enter the correct credentials, the UCP dashboard prompts for a
license.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/skip-this.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;em&gt;Skip for now&lt;/em&gt; to continue to the dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/dashboard.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The dashboard shows a single node, your controller node. It also shows you a
banner saying that you need a license.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Follow the link on the UCP &lt;strong&gt;Dashboard&lt;/strong&gt; to the Docker website to get a trial license.&lt;/p&gt;

&lt;p&gt;You must fill out a short form. After you complete the form, you are prompted with some &lt;strong&gt;Installation Steps&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;strong&gt;Next&lt;/strong&gt; until you reach the &lt;strong&gt;Add License&lt;/strong&gt; step.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/get-license.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press the &lt;strong&gt;Download License&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Your browser downloads a &lt;code&gt;docker_subscription.lic&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save the file to a safe location.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Return to the UCP Dashboard.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;Settings&lt;/strong&gt; from the &amp;ldquo;hamburger&amp;rdquo; menu on the left side.&lt;/p&gt;

&lt;p&gt;As you move through UCP, the header changes to display the appropriate
breadcrumbs. In this case you are on the &lt;strong&gt;Dashboard/Settings&lt;/strong&gt;* page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the &lt;strong&gt;License&lt;/strong&gt; section and click &lt;strong&gt;Choose File&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Locate and upload your file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/license.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you upload the file, the license message disappears from UCP.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Take a minute and explore UCP. At this point, you have a single controller
running. How many nodes is that? What makes a controller is the containers it
runs. Locate the Containers page and show the system containers on your
controller. You&amp;rsquo;ll know you&amp;rsquo;ve succeeded if you see this list:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/controller-containers.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The containers reflect the architecture of UCP.  The containers are running
Swarm, a key-value store process, and some containers with certificate volumes.
Explore the other resources.&lt;/p&gt;

&lt;h2 id=&#34;step-7-join-a-node&#34;&gt;Step 7. Join a node&lt;/h2&gt;

&lt;p&gt;In this step, you join your UCP &lt;code&gt;node2&lt;/code&gt; to the controller using the &lt;code&gt;ucp join&lt;/code&gt;
subcommand. In a UCP production installation, you&amp;rsquo;d do this step for each node
you want to add.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you don&amp;rsquo;t already have one, open a terminal on your computer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect the terminal environment to the &lt;code&gt;node2&lt;/code&gt; you provisioned earlier.&lt;/p&gt;

&lt;p&gt;a. Use &lt;code&gt;docker-machine env&lt;/code&gt; command to get the settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine env node2
export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
export DOCKER_HOST=&amp;quot;tcp://192.168.99.104:2376&amp;quot;
export DOCKER_CERT_PATH=&amp;quot;/Users/mary/.docker/machine/machines/node2&amp;quot;
export DOCKER_MACHINE_NAME=&amp;quot;node2&amp;quot;
# Run this command to configure your shell:
# eval $(docker-machine env node2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b. Run the &lt;code&gt;eval&lt;/code&gt; command to set your environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(docker-machine env node2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client will send the &lt;code&gt;docker&lt;/code&gt; commands in the following steps to the Docker Engine on on &lt;code&gt;controller&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;docker/ucp join&lt;/code&gt; command.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are on a Windows system, your shell can&amp;rsquo;t resolve the
&lt;code&gt;$(docker-machine ip node2)&lt;/code&gt; variable. So, replace it with the actual IP
address.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it \
-v /var/run/docker.sock:/var/run/docker.sock \
--name ucp docker/ucp join -i \
--host-address $(docker-machine ip node2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; pulls several images and prompts you for the UCL of the UCP Server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unable to find image &#39;docker/ucp:latest&#39; locally
latest: Pulling from docker/ucp
0198ad4008dc: Pull complete
291084ae72f3: Pull complete
Digest: sha256:28b6c9640e5af0caf2b2acbbbfd7c07bdbec6b170f04cbaeea7bb4909d74898d
Status: Downloaded newer image for docker/ucp:latest
Please enter the URL to your UCP Server:
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter the URL of your server to continue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Orca server https://192.168.99.106
Subject: ucp
Issuer: UCP Root CA
SHA1 Fingerprint=02:36:16:93:B4:21:B7:AD:0A:6C:0F:3C:99:75:18:5D:5A:F7:C4:0C
Do you want to trust this server and proceed with the join? (y/n):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The system prompts you to join the server.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;code&gt;y&lt;/code&gt; to continue and the tool prompts you for the username and password for your UCP server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please enter your UCP Admin username: admin
Please enter your UCP Admin password:
INFO[0027] Pulling required images... (this may take a while)
WARN[0070] None of the hostnames we&#39;ll be using in the UCP certificates [node1 127.0.0.1 172.17.0.1 192.168.99.108] contain a domain component.  Your generated certs may fail TLS validation unless you only use one of these shortnames or IPs to connect.  You can use the --san flag to add more aliases
You may enter additional aliases (SANs) now or press enter to proceed with the above list.
Additional aliases:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The system continues and prompts you for SANs. In this sandbox, you&amp;rsquo;ve already provided the IP address and the &lt;code&gt;ucp&lt;/code&gt; tool discovered this for you and shows it in the controller list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press enter to proceed without providing a SAN.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARN[0000] None of the hostnames we&#39;ll be using in the UCP certificates
[node1 127.0.0.1 172.17.0.1 192.168.99.108 192.168.99.108] contain a
domain component.  Your generated certs may fail TLS validation unless you
only use one of these shortnames or IPs to connect.  You can use the --san
flag to add more aliases        
INFO[0000] This engine will join UCP and advertise itself with host
address 192.168.99.108 - If this is incorrect, please specify an
alternative address with the &#39;--host-address&#39; flag  
INFO[0000] Verifying your system is compatible with UCP
INFO[0011] Starting local swarm containers   ’
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Login into UCP with your browser and check to make sure your new node appears.&lt;/p&gt;

&lt;p&gt;The page should display your new node.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/nodes.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-8-deploy-a-container&#34;&gt;Step 8. Deploy a container&lt;/h2&gt;

&lt;p&gt;UCP allows you to deploy and manage &amp;ldquo;Dockerized&amp;rdquo; applications in production. An
application is built up using Docker objects, such as images and containers, and
Docker resources, such as volumes and networks.&lt;/p&gt;

&lt;p&gt;UCP deploys and manages these objects and resources using remote API calls the
Engine daemons running on the nodes. For example, the &lt;code&gt;run&lt;/code&gt; action may deploy an
image in a Docker container. That image might define a service such as an Nginix
web server or a database like Postgres.&lt;/p&gt;

&lt;p&gt;A UCP operator initiates Engine actions through the UCP dashboard or through the
Docker Engine CLI. In this step, you deploy a container through the UCP
dashboard.  The container will run an Nginx server, so you&amp;rsquo;ll need to launch the
&lt;code&gt;nginx&lt;/code&gt; image inside of it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into the UCP &lt;strong&gt;Dashboard&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Containers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The system displays the &lt;strong&gt;Containers&lt;/strong&gt; page. UCP runs some containers that
support its own operations. These are called &amp;ldquo;system&amp;rdquo; containers and they
are hidden by default.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;+ Deploy Container&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The system displays a dialog with several fields. Using the dialog requires some basic knowledge of Docker objects and their attributes. A UCP admin or operator would typically have this knowledge.  For now, you&amp;rsquo;ll just follow along.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter &lt;code&gt;nginx&lt;/code&gt; for the image name.&lt;/p&gt;

&lt;p&gt;An image is simply predefined software you want to run. The software might
be an actual standalone application or maybe some component software necessary
to support a complex service.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter &lt;code&gt;nginx_server&lt;/code&gt; for the container name.&lt;/p&gt;

&lt;p&gt;This name just identifies the container on your network.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Publish Ports&lt;/strong&gt; from the &lt;strong&gt;Overview&lt;/strong&gt; menu.&lt;/p&gt;

&lt;p&gt;A Docker container, like it sounds, is securely isolated from other processes on your network. In fact, the container has its own internal network configuration. If you want to access to a service inside a container, you need to expose a container&amp;rsquo;s port. This container port maps to a port on the node. The node is hosting an instance of Docker Engine, so its port is called the &lt;strong&gt;Host Port&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter &lt;code&gt;443&lt;/code&gt; in the &lt;strong&gt;Port&lt;/strong&gt; and in the &lt;strong&gt;Host Port&lt;/strong&gt; field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the plus sign to add another &lt;strong&gt;Port&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For this port, enter &lt;code&gt;80&lt;/code&gt; in the &lt;strong&gt;Port&lt;/strong&gt; and &lt;strong&gt;Host Port&lt;/strong&gt; field.&lt;/p&gt;

&lt;p&gt;When you are done, your dialog looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/port_config.png&#34; alt=&#34;Port configuration&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Run Container&lt;/strong&gt; to deploy your container.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/display_container.png&#34; alt=&#34;Deployed&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-9-view-a-running-service&#34;&gt;Step 9. View a running service&lt;/h2&gt;

&lt;p&gt;At this point, you have deployed a container and you should see the application running. Recall that you deployed an Nginx web server. That server comes with a default page. In this step, you open the running server.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make sure you are still on the &lt;strong&gt;Containers&lt;/strong&gt; page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the edit icon on the container.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/container_edit.png&#34; alt=&#34;Edit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The system displays the container&amp;rsquo;s details and some operations you can run on the container.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the ports section.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll see an IP address with port &lt;code&gt;80&lt;/code&gt; for the server.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the IP address to your browser and paste the information you copied.&lt;/p&gt;

&lt;p&gt;You should see the welcome message for nginx.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/welcome_nginx.png&#34; alt=&#34;Port 80&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-10-download-a-client-bundle&#34;&gt;Step 10. Download a client bundle&lt;/h2&gt;

&lt;p&gt;In this step, you download the &lt;em&gt;client bundle&lt;/em&gt;. Each node in your UCP cluster is running Engine. A UCP operator can use the Engine CLI client instead of UCP to interact with the Docker objects and resources UCP manages. To issue commands to a UCP node, your local shell environment must be configured with the same security certificates as the UCP application itself.  The client bundle contains the certificates and a script to configure a shell environment.&lt;/p&gt;

&lt;p&gt;Download the bundle and configure your environment.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you haven&amp;rsquo;t already done so, log into UCP.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;admin &amp;gt; Profile&lt;/strong&gt; from the right-hand menu.&lt;/p&gt;

&lt;p&gt;Any user can download their certificates. So, if you were logged in under a user name such as &lt;code&gt;davey&lt;/code&gt; the path to download bundle is &lt;strong&gt;davey &amp;gt; Profile&lt;/strong&gt;. Since you are logged in as &lt;code&gt;admin&lt;/code&gt;, the path is &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Create Client Bundle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The browser downloads the &lt;code&gt;ucp-bundle-admin.zip&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a new shell on your local machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure your shell is does not have an active Docker Machine host.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ls
NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
moxie   -        virtualbox   Stopped                                       Unknown   
test    -        virtualbox   Running   tcp://192.168.99.100:2376           v1.10.1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While Machine has a stopped and running host, neither is active in the shell. You know this because neither host shows an * (asterisk) indicating the shell is configured.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a directory to hold the deploy information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir deploy-app
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to where the bundle was downloaded, and unzip the client bundle&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ unzip bundle.zip
    Archive:  bundle.zip
    extracting: ca.pem
    extracting: cert.pem
    extracting: key.pem
    extracting: cert.pub
    extracting: env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change into the directory that was created when the bundle was unzipped&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Execute the &lt;code&gt;env.sh&lt;/code&gt; script to set the appropriate environment variables for your UCP deployment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ source env.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are on Windows, you may need to set the environment variables manually.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;docker info&lt;/code&gt; to examine the UCP deployment.&lt;/p&gt;

&lt;p&gt;Your output should show that you are managing UCP vs. a single node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker info
Containers: 12
 Running: 0
 Paused: 0
 Stopped: 0
Images: 17
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 2
 node1: 192.168.99.106:12376
  └ Status: Healthy
  └ Containers: 9
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 3.01 GiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.17-boot2docker, operatingsystem=Boot2Docker 1.10.0 (TCL 6.4.1); master : b09ed60 - Thu Feb  4 20:16:08 UTC 2016, provider=virtualbox, storagedriver=aufs
  └ Error: (none)
  └ UpdatedAt: 2016-02-09T12:03:16Z
 node2: 192.168.99.107:12376
  └ Status: Healthy
  └ Containers: 3
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 4.956 GiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.17-boot2docker, operatingsystem=Boot2Docker 1.10.0 (TCL 6.4.1); master : b09ed60 - Thu Feb  4 20:16:08 UTC 2016, provider=virtualbox, storagedriver=aufs
  └ Error: (none)
  └ UpdatedAt: 2016-02-09T12:03:11Z
Cluster Managers: 1
 192.168.99.106: Healthy
  └ Orca Controller: https://192.168.99.106:443
  └ Swarm Manager: tcp://192.168.99.106:3376
  └ KV: etcd://192.168.99.106:12379
Plugins:
 Volume:
 Network:
CPUs: 2
Total Memory: 7.966 GiB
Name: ucp-controller-node1
ID: P5QI:ZFCX:ELZ6:RX2F:ADCT:SJ7X:LAMQ:AA4L:ZWGR:IA5V:CXDE:FTT2
WARNING: No oom kill disable support
WARNING: No cpu cfs quota support
WARNING: No cpu cfs period support
WARNING: No cpu shares support
WARNING: No cpuset support
Labels:
 com.docker.ucp.license_key=p3vPAznHhbitGG_KM36NvCWDiDDEU7aP_Y9z4i7V4DNb
 com.docker.ucp.license_max_engines=1
 com.docker.ucp.license_expires=2016-11-11 00:53:53 +0000 UTC
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-11-deploy-with-the-cli&#34;&gt;Step 11. Deploy with the CLI&lt;/h2&gt;

&lt;p&gt;In this exercise, you&amp;rsquo;ll launch another Nginx container. Only this time, you&amp;rsquo;ll use the Engine CLI. Then, you&amp;rsquo;ll look at the result in the UCP dashboard.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Connect the terminal environment to the &lt;code&gt;node2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval &amp;quot;$(docker-machine env node2)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change to your user &lt;code&gt;$HOME&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make a &lt;code&gt;site&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir site
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change into the &lt;code&gt;site&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd site
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an &lt;code&gt;index.html&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;my new site&amp;quot; &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start a new &lt;code&gt;nginx&lt;/code&gt; container and replace the &lt;code&gt;html&lt;/code&gt; folder with your &lt;code&gt;site&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d -P -v $HOME/site:/usr/share/nginx/html --name mysite nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This command runs an &lt;code&gt;nginx&lt;/code&gt; image in a container called &lt;code&gt;mysite&lt;/code&gt;. The &lt;code&gt;-P&lt;/code&gt; tells the Engine to expose all the ports on the container.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the UCP dashboard in your browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to the &lt;strong&gt;Containers&lt;/strong&gt; page and locate your &lt;code&gt;mysite&lt;/code&gt; container.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/second_node.png&#34; alt=&#34;mysite&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the ports section.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll see an IP address with port &lt;code&gt;80/tcp&lt;/code&gt; for the server. This time, you&amp;rsquo;ll
find that the port mapped on this container than the one created yourself.
That&amp;rsquo;s because the command didn&amp;rsquo;t explicitly map a port, so the Engine chose
mapped the default Nginx port &lt;code&gt;80&lt;/code&gt; inside the container to an arbitrary port
on the node.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the IP address to your browser and paste the information you copied.&lt;/p&gt;

&lt;p&gt;You should see your &lt;code&gt;index.html&lt;/code&gt; file display instead of the standard Nginx welcome.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/second_node.png&#34; alt=&#34;mysite&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;explore-ucp&#34;&gt;Explore UCP&lt;/h2&gt;

&lt;p&gt;At this point, you&amp;rsquo;ve completed the guided tour of a UCP installation. You&amp;rsquo;ve
learned how to create a UCP installation by creating two nodes and designating
one of them as a controller. You&amp;rsquo;ve created a container running a simple web
server both using UCP and directly on the command line.  You used UCP to get
information about what you created.&lt;/p&gt;

&lt;p&gt;In a real UCP production installation, UCP admins and operators are expected to
do similar work every day. While the applications they launch will be more
complicated, the interaction channels a user can take, the GUI or the
certificate bundle plus a command line, remain the same.&lt;/p&gt;

&lt;p&gt;Take some time to explore UCP some more. Investigate the documentation for other
activities you can perform with UCP.&lt;/p&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to Go Next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/plan-production-install/&#34;&gt;Plan a production installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/production-install/&#34;&gt;Install UCP for production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get support</title>
      <link>https://docs.docker.com/v1.10/ucp/support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/support/</guid>
      <description>

&lt;h1 id=&#34;get-support&#34;&gt;Get support&lt;/h1&gt;

&lt;p&gt;Your Docker Data Center, or Universal Control Plane subscription gives you
access to prioritized support. The service levels depend on your subscription.&lt;/p&gt;

&lt;p&gt;If you need help, you can file a ticket via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;mailto:support@docker.com&#34;&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.docker.com/&#34;&gt;Docker support page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be sure to use your company email when filing tickets.&lt;/p&gt;

&lt;h2 id=&#34;download-a-support-dump&#34;&gt;Download a support dump&lt;/h2&gt;

&lt;p&gt;Docker Support engineers may ask you to provide a UCP support dump. For this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into UCP with an administrator account&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the top-right menu, &lt;strong&gt;click your username&lt;/strong&gt;, and choose &lt;strong&gt;Support Dump&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;UCP downloads the &lt;code&gt;docker-support-&amp;lt;datestamp&amp;gt;-&amp;lt;timestap&amp;gt;.zip&lt;/code&gt;, that you can
send to support.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install UCP for production</title>
      <link>https://docs.docker.com/v1.10/ucp/production-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/production-install/</guid>
      <description>

&lt;h1 id=&#34;install-ucp-for-production&#34;&gt;Install UCP for production&lt;/h1&gt;

&lt;p&gt;This page explains how to install Docker Universal Control Plane (UCP) on a
production environment. A Docker UCP installation, consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A controller node where UCP is running,&lt;/li&gt;
&lt;li&gt;Replicas of the controller node, for high-availability,&lt;/li&gt;
&lt;li&gt;One or more nodes used to run your containers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The controller node can serve as a controller and also run your containers.
These instructions show you how to install both a controller and a node. It
contains the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step-1-prepare-your-installation&#34;&gt;Step 1: Prepare your installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-2-configure-your-network-for-ucp&#34;&gt;Step 2: Configure your network for UCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-3-install-docker-cs-engine-on-each-node&#34;&gt;Step 3: Install Docker CS Engine on each node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-4-customize-user-named-volumes-optional&#34;&gt;Step 4: Create user-named volumes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-5-customize-the-ca-used-optional&#34;&gt;Step 5: Customize the CA used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-6-install-the-ucp-controller&#34;&gt;Step 6: Install the UCP controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-7-license-your-installation&#34;&gt;Step 7: License your installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-8-add-controller-replicas-to-the-ucp-cluster&#34;&gt;Step 8: Add controller replicas to the UCP cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-9-add-more-nodes-to-the-ucp-cluster&#34;&gt;Step 9: Add more nodes to the UCP cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-10-set-up-certificates-for-the-docker-cli&#34;&gt;Step 10: Set up certificates for the Docker CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#disable-collection-of-usage-metrics&#34;&gt;Disable collection of usage metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uninstall&#34;&gt;Uninstall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#where-to-go-next&#34;&gt;Where to go next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;about-these-installation-instructions&#34;&gt;About these installation instructions&lt;/h2&gt;

&lt;p&gt;These installation instructions were written using Ubuntu 14.0.3 running on
Amazon AWS, with Elastic IPs configured for all the hosts.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re installing UCP on another operating system, the paths and commands
might differ.&lt;/p&gt;

&lt;h2 id=&#34;step-1-prepare-your-installation&#34;&gt;Step 1: Prepare your installation&lt;/h2&gt;

&lt;p&gt;Before installing UCP, read the
&lt;a href=&#34;../v1.10/ucp/plan-production-install/&#34;&gt;Plan a production installation&lt;/a&gt; guide.
If you haven&amp;rsquo;t read the planning guide stop here, and go read it first.
There you&amp;rsquo;ll find more information about the architecture of UCP, and the
requirements to install UCP for production.&lt;/p&gt;

&lt;p&gt;The UCP installation consists of using the Docker Engine CLI to run the &lt;code&gt;ucp&lt;/code&gt;
tool. The &lt;code&gt;ucp&lt;/code&gt; tool is a Docker image that can run subcommands like &lt;code&gt;install&lt;/code&gt;
to install UCP on a node, or &lt;code&gt;join&lt;/code&gt; to join a node to a UCP cluster.
The general format of these commands is:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Docker client&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;run command with options&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ucp image&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Subcommand with options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;install --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;join --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;uninstall --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can use the &lt;code&gt;ucp&lt;/code&gt; tool interactively, by passing them the &lt;code&gt;-i&lt;/code&gt; option, or
non-interactively, by passing command-line options. This guide uses the
interactive version.&lt;/p&gt;

&lt;p&gt;To list all the possible subcommands for the &lt;code&gt;ucp&lt;/code&gt; tool, use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it docker/ucp  --help
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-configure-your-network-for-ucp&#34;&gt;Step 2: Configure your network for UCP&lt;/h2&gt;

&lt;p&gt;Before installing UCP, you need to make sure all nodes in the cluster can
communicate. Configure your network to make sure these ports are open:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Hosts&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Direction&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Port&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;443  (configurable)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;web app and CLI client access to UCP.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2376 (configurable)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;swarm manager accepts requests from UCP controller.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas, nodes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2375&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;heartbeat for nodes, to ensure they are running.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas, nodes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12376&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;proxy for TLS, provides access to UCP, Swarm, and Engine.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12379&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;internal node configuration, cluster configuration, and HA.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12380&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;internal node configuration, cluster configuration, and HA.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12381&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;proxy for TLS, provides access to UCP.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12382&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;manages TLS and requests from swarm manager.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;out&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;send anonymous usage reports to Docker.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Some of the ports used, are customizable. Check the
&lt;a href=&#34;../v1.10/ucp/reference/install/&#34;&gt;UCP install command reference&lt;/a&gt; for more
information on this. This guide uses the default ports.&lt;/p&gt;

&lt;h2 id=&#34;step-3-install-docker-cs-engine-on-each-node&#34;&gt;Step 3: Install Docker CS Engine on each node&lt;/h2&gt;

&lt;p&gt;UCP requires you to install Docker CS Engine 1.10 or above on all nodes of
your UCP cluster, including the controller node.&lt;/p&gt;

&lt;p&gt;For each node, follow the Docker CS Engine installation instructions for your
particular operating system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-trusted-registry/install/install-csengine/#centos-7-1-rhel-7-0-7-1-yum-based-systems&#34;&gt;Red Hat Linux and CentOs installation
instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-trusted-registry/install/install-csengine/#install-on-ubuntu-14-04-lts&#34;&gt;Ubuntu installation
instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-4-customize-user-named-volumes-optional&#34;&gt;Step 4: Customize user-named volumes (optional)&lt;/h2&gt;

&lt;p&gt;UCP uses named volumes to persist user data:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Volume name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-client-root-ca&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The certificate and key for the UCP root CA. Do not create this volume if you are using your own certificates.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-cluster-root-ca&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The certificate and key for the Swarm root CA.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-controller-server-certs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The controller certificates for the UCP controllers web server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-node-certs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The Swarm certificates for the current node (repeated on every node in the cluster).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-kv-certs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The Swarm KV client certificates for the current node (repeated on every node in the cluster).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-controller-client-certs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The UCP Controller Swarm client certificates for the current node.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-kv&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Key value store persistence.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;ucp install&lt;/code&gt; command creates these volumes for you with the default
volume driver and flags.
If you want to use custom volume drivers, create these named-volumes before
installing UCP.&lt;/p&gt;

&lt;h2 id=&#34;step-5-customize-the-ca-used-optional&#34;&gt;Step 5: Customize the CA used (optional)&lt;/h2&gt;

&lt;p&gt;To protect your UCP cluster against unauthorized access, all components of
the cluster use mutual TLS. That way, for two components to talk, both need
to identify using certificates.&lt;/p&gt;

&lt;p&gt;For this, UCP uses two different root Certificate Authorities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One CA is used to secure and authenticate the communications between
users and UCP,&lt;/li&gt;
&lt;li&gt;Another CA is used to secure the communications between all nodes that are
part of your UCP cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this is done automatically when installing UCP.&lt;/p&gt;

&lt;p&gt;You can also customize UCP to use certificates signed by an external
Certificate Authority, for the UCP controller. That way you can
use a certificate from a CA that your browsers and client tools already trust.&lt;/p&gt;

&lt;p&gt;To install UCP with your own external root CA:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into the machine where you intend to install UCP.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure you have created a named volume called &lt;code&gt;ucp-controller-server-certs&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following files to the volume&amp;rsquo;s top-level directory:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;File&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ca.pem&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Your Root CA Certificate chain (including any intermediaries).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cert.pem&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Your signed UCP controller certificate.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;key.pem&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Your UCP controller private key.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-6-install-the-ucp-controller&#34;&gt;Step 6: Install the UCP controller&lt;/h2&gt;

&lt;p&gt;During UCP installation, you will be prompted for the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A password to use for the UCP &lt;code&gt;admin&lt;/code&gt; account.&lt;/li&gt;
&lt;li&gt;At least one Subject Alternative Name (SAN). This is the IP address or
fully-qualified domain name where you can reach this controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be sure to have this information at hand before starting the installation.
If you&amp;rsquo;re installing UCP on a cloud provider such as AWS, make sure your
instance has a public IP or hostname, as displayed below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/ip_cloud_provider.png&#34; alt=&#34;Controller public IP on AWS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the controller node, install UCP:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Review the options available on the &lt;code&gt;ucp install&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it docker/ucp install --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also find the documentation for these option on
the &lt;a href=&#34;../v1.10/ucp/reference/install/&#34;&gt;UCP install command reference&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;ucp&lt;/code&gt; command interactively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp install -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using an external CA, include the &lt;code&gt;--external-ucp-ca&lt;/code&gt; option at
the end of the command.&lt;/p&gt;

&lt;p&gt;The command pulls several images from Docker Hub, and prompts you for the
installation values it needs.
When the installation is complete, the command asks you to log into UCP.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO[0053] Login to UCP at https://52.70.188.239:443
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-7-license-your-installation&#34;&gt;Step 7: License your installation&lt;/h2&gt;

&lt;p&gt;Now that your UCP controller is installed, download and apply the
license to your installation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt; to download your license.
On the top-right menu, choose &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/docker-hub-settings.png&#34; alt=&#34;Docker hub home page&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to the &lt;strong&gt;Licenses&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/docker-hub-license.png&#34; alt=&#34;Docker Hub licenses page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Download the license by clicking on it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Navigate to UCP&lt;/strong&gt; to apply the license.&lt;/p&gt;

&lt;p&gt;In your browser, navigate to the IP of the node where you installed the
UCP controller. In this example, it&amp;rsquo;s &lt;code&gt;https://52.70.188.239&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/login.png&#34; alt=&#34;UCP login screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Your browser may warn that the connection to UCP is not secure. The warning
appears because you are accessing UCP with HTTPS, but the certificates used
by UCP were issued during the installation by a built-in certificate
authority.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re concerned about security, check the installation messages.
You can use the server fingerprint displayed during the installation,
and compare it with the certificate displayed on your browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Login&lt;/strong&gt; with the admin username and the password you chose during
the installation.&lt;/p&gt;

&lt;p&gt;If you installed non-interactively, the default administrator
credentials are &lt;em&gt;admin/orca&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apply your license file.&lt;/p&gt;

&lt;p&gt;After logging in, you&amp;rsquo;re redirected to the licensing page. Click the
&lt;strong&gt;Upload License&lt;/strong&gt; button, and choose your license file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/skip-this.png&#34; alt=&#34;UCP Login screenshot&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the &lt;strong&gt;Dashboard&lt;/strong&gt; page.&lt;/p&gt;

&lt;p&gt;After applying the license, you&amp;rsquo;re redirected to the UCP dashboard. It
should show that there&amp;rsquo;s only a single node in your cluster:
the controller node.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/dashboard.png&#34; alt=&#34;UCP dashboard screenshot&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-8-add-controller-replicas-to-the-ucp-cluster&#34;&gt;Step 8: Add controller replicas to the UCP cluster&lt;/h2&gt;

&lt;p&gt;Docker UCP has support for high-availability. You set other nodes to be
replicas of the UCP controller, that way you can load-balance user requests
across the controller and replica nodes.&lt;/p&gt;

&lt;p&gt;For High Availability (HA) installations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configure the controller and replicas before adding additional nodes
to the cluster.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure at least two replicas in addition to the controller.&lt;/p&gt;

&lt;p&gt;Keep in mind that with N controller and replicas, a cluster can only
tolerate up to (N-1)/2 node failures.&lt;/p&gt;

&lt;p&gt;Also, in UCP v1.0 the controller serves as root CA. During a controller
failure, it might not be possible to add more nodes to the cluster.
&lt;a href=&#34;../v1.10/ucp/understand_ha/&#34;&gt;Learn more about high availability&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When adding replica nodes to your installation, you will be prompted for
the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The URL of the UCP controller node, for example &lt;code&gt;https://52.70.188.239&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The username/password of an UCP administrator account.&lt;/li&gt;
&lt;li&gt;At least one SAN value which is an accessible IP address or
fully-qualified domain name for the node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be sure to have this information at hand before using the &lt;code&gt;ucp join&lt;/code&gt;
command to join the replica nodes to the cluster.&lt;/p&gt;

&lt;p&gt;Review the options available on the &lt;code&gt;ucp join&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it docker/ucp join --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also find the documentation for the &lt;code&gt;ucp join&lt;/code&gt; command at
the &lt;a href=&#34;../v1.10/ucp/reference/join/&#34;&gt;UCP join command reference&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;For each node that you want to turn into a controller replica:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into that node.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;ucp join&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp join --replica -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; command pulls several images and prompts you for the
installation values it needs. When it completes, the command notifies
you that it is starting Docker Swarm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO[0005] Verifying your system is compatible with UCP
INFO[0011] Sending add host request to UCP server
INFO[0011] Starting local swarm containers
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Repeat steps 1 through 3 on the other nodes you want to set up as replicas.&lt;/p&gt;

&lt;p&gt;For high availability, make sure to configure a minimum of 3 controllers:
a primary controller and two replicas. Never run a cluster with only
the primary controller and a single replica.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Log into UCP.&lt;/p&gt;

&lt;p&gt;The Dashboard page should now display your new replica nodes. In the
bottom of the screen, you can see the health of the controller and replicas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/replica-nodes.png&#34; alt=&#34;UCP nodes page&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-9-add-more-nodes-to-the-ucp-cluster&#34;&gt;Step 9: Add more nodes to the UCP cluster&lt;/h2&gt;

&lt;p&gt;Now you can add additional nodes to your UCP cluster. These are the nodes that
will be running your containers.&lt;/p&gt;

&lt;p&gt;When adding nodes to your cluster, you will be prompted for the following
information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The URL of the UCP controller, for example &lt;code&gt;https://52.70.188.239&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The username/password of an UCP administrator account.&lt;/li&gt;
&lt;li&gt;At least one SAN value which is the actual external, publicly-accessible IP
address or fully-qualified domain name for node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So be sure to have this information at hand. If you&amp;rsquo;re installing UCP on a cloud
provider such as AWS, make sure your instance has a public IP or hostname.&lt;/p&gt;

&lt;p&gt;Review the options available on the &lt;code&gt;ucp join&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it docker/ucp join --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also find the documentation for the &lt;code&gt;ucp join&lt;/code&gt; command on
the &lt;a href=&#34;../v1.10/ucp/reference/join/&#34;&gt;UCP join command reference&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;For each node that you want to add to your UCP cluster:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into that node.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;ucp join&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp join -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; command pulls several images and prompts you for the
installation values it needs. When it completes, the command notifies
you that it is starting Docker Swarm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO[0005] Verifying your system is compatible with UCP
INFO[0011] Sending add host request to UCP server
INFO[0011] Starting local swarm containers
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Repeat steps 1 and 2 on the other nodes you want to add to your UCP cluster.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Log into UCP with your browser and navigate to the &lt;strong&gt;Nodes&lt;/strong&gt; page.&lt;/p&gt;

&lt;p&gt;The nodes page should now display all the nodes of your cluster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/nodes-page.png&#34; alt=&#34;UCP nodes page&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-10-set-up-certificates-for-the-docker-cli&#34;&gt;Step 10: Set up certificates for the Docker CLI&lt;/h2&gt;

&lt;p&gt;After installing UCP, you can run the &lt;code&gt;docker&lt;/code&gt; command, against UCP
cluster nodes.
Since all traffic between users and UCP nodes is secure and authenticated,
when using the Docker CLI client, you&amp;rsquo;ll need to provide client certificates.&lt;/p&gt;

&lt;p&gt;You have two ways of downloading a bundle that contains the client certificates
for a user:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download them from the UCP web app, or&lt;/li&gt;
&lt;li&gt;Download them from the REST API, using the &lt;code&gt;curl&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download-the-client-bundle-from-the-ucp-web-app&#34;&gt;Download the client bundle from the UCP web app&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you haven&amp;rsquo;t already done so, log into UCP.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to your profile.&lt;/p&gt;

&lt;p&gt;As an example, if you&amp;rsquo;re logged in as the &lt;code&gt;Admin&lt;/code&gt; user,
on the right-hand menu, navigate to &lt;strong&gt;Admin &amp;gt; Profile&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &lt;strong&gt;Create Client Bundle&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;The browser downloads the &lt;code&gt;ucp-bundle-admin.zip&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;download-the-client-bundle-using-the-rest-api&#34;&gt;Download the client bundle using the REST API&lt;/h3&gt;

&lt;p&gt;You can download the client certificate bundle, using the UCP REST API. In
this example we&amp;rsquo;ll be using &lt;code&gt;curl&lt;/code&gt; for making the web requests to the API, and
&lt;code&gt;jq&lt;/code&gt; to parse the responses from the API.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the command line, log into a machine with network access to
the UCP controller.&lt;/p&gt;

&lt;p&gt;You might log into the controller node itself, or any machine that
can &lt;code&gt;ping&lt;/code&gt; it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;jq&lt;/code&gt; packages if you don&amp;rsquo;t have them.&lt;/p&gt;

&lt;p&gt;On Ubuntu, the installation looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install zip curl jq
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  libcurl3
The following NEW packages will be installed:
  jq zip
The following packages will be upgraded:
  curl libcurl3
  ----output snipped----
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an environment variable to hold your user security token.&lt;/p&gt;

&lt;p&gt;To connect to the UCP controller with &lt;code&gt;curl&lt;/code&gt;, you must export your user
security token from the UCP controller.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ AUTHTOKEN=$(curl -sk -d &#39;{&amp;quot;username&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;&amp;lt;password&amp;gt;&amp;quot;}&#39; https://&amp;lt;ducp-0 IP&amp;gt;/auth/login | jq -r .auth_token)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curl the client bundle down to your node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -k -H &amp;quot;Authorization: Bearer $AUTHTOKEN&amp;quot; https://&amp;lt;ducp-0 IP&amp;gt;/api/clientbundle -o bundle.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Curl downloads a &lt;code&gt;bundle.zip&lt;/code&gt; file to your working directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;install-the-certificate-bundle&#34;&gt;Install the certificate bundle&lt;/h3&gt;

&lt;p&gt;Once you download the bundle, you can unzip and use it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make sure you have &lt;code&gt;zip&lt;/code&gt; installed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which unzip
/usr/bin/unzip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t, install it before continuing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the folder containing the bundle file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unzip the file to reveal its contents.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ucp-bundle
├── ca.pem
├── cert.pem
├── cert.pub
├── env.sh
└── key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set up your environment by running the &lt;code&gt;env.sh&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;docker info&lt;/code&gt; command to get the location of the Swarm
managers and engines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker info
Containers: 9
Images: 9
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 1
 node1: 192.168.122.7:12376
  └ Containers: 9
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 2.054 GiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.0.9-boot2docker, operatingsystem=Boot2Docker 1.8.1 (TCL 6.3); master : eb5571f - Thu Sep  3 22:18:54 UTC 2015, provider=kvm, storagedriver=aufs
Cluster Managers: 1
 192.168.122.7: Healthy
  └ Orca Controller: https://192.168.122.7
  └ Swarm Manager: tcp://192.168.122.7:3376
  └ KV: etcd://192.168.122.7:12379
CPUs: 1
Total Memory: 2.054 GiB
Name: node1
ID: PNLT:MFCO:DDWL:MSLF:YVHU:35Z3:66KM:DFZM:OPBK:D4BQ:EKNT:6DXA
Labels:
 com.docker.ucp.license_key=unlicensed
 com.docker.ucp.license_max_engines=0
 com.docker.ucp.license_expires=EXPIRED
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;client-bundles-with-an-externally-managed-ca&#34;&gt;Client bundles with an externally managed CA&lt;/h3&gt;

&lt;p&gt;When using UCP with an external Certificate Authority, client bundles
for non-admin users won&amp;rsquo;t be signed automatically. It is still possible to
manually issue certificates signed by the Certificate Authority, that UCP users
can use to interact with UCP with the CLI client.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generate a 2048-bit RSA private key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl genrsa -out key.pem 2048
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a Certificate Signing Request (CSR).&lt;/p&gt;

&lt;p&gt;The output &lt;code&gt;cert.csr&lt;/code&gt; should be provided to your organization&amp;rsquo;s CA
owner to be signed, with a minimum of client authentication usage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl req -new -sha256 -key key.pem -out cert.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your CA owner signs the CSR, and provides the &lt;code&gt;cert.pem&lt;/code&gt; and &lt;code&gt;ca.pem&lt;/code&gt; files.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract the public key from the signed certificate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl x509 -pubkey -noout -in cert.pem  &amp;gt; cert.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the content of the &lt;code&gt;cert.pub&lt;/code&gt; to your UCP profile.&lt;/p&gt;

&lt;p&gt;In the UCP web app, navigate to your &lt;strong&gt;profile&lt;/strong&gt;, and click the &lt;strong&gt;Add an
Existing Public Key&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/add-pk.png&#34; alt=&#34;Add public key&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Set a name, and the contents of the &lt;code&gt;cert.pub&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the necessary environment variables.&lt;/p&gt;

&lt;p&gt;Now that you have linked the public key to you account, you need to
configure your CLI client. Set the following environment variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_TLS_VERIFY=1
export DOCKER_CERT_PATH=$(pwd)
export DOCKER_HOST=tcp://&amp;lt;ucp-hostname&amp;gt;:443
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;disable-collection-of-usage-metrics&#34;&gt;Disable collection of usage metrics&lt;/h2&gt;

&lt;p&gt;UCP collects anonymous usage metrics, to help us improve it.
These metrics are entirely anonymous, don&amp;rsquo;t identify your company, users,
applications, or any other sensitive information.&lt;/p&gt;

&lt;p&gt;To disable usage reporting:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into Docker UCP&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to the &lt;strong&gt;Settings&lt;/strong&gt; screen&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the &lt;strong&gt;Anonymous Usage Reporting&lt;/strong&gt; section, toggle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable hourly usage reporting, to send sending usage reports.&lt;/li&gt;
&lt;li&gt;Enable API tracking, to send sending metrics on each API call.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &lt;strong&gt;Update Usage Reporting&lt;/strong&gt; button, to save your changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;uninstall&#34;&gt;Uninstall&lt;/h2&gt;

&lt;p&gt;To uninstall Docker UCP, use the &lt;code&gt;ucp uninstall&lt;/code&gt; command. This command only
removes the UCP containers, and doesn&amp;rsquo;t affect any other containers.
When uninstalling UCP from a cluster, leave the UCP controller node for last.&lt;/p&gt;

&lt;p&gt;Review the options available on the &lt;code&gt;ucp uninstall&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it docker/ucp uninstall --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also find the documentation for the &lt;code&gt;ucp uninstall&lt;/code&gt; command at
the &lt;a href=&#34;../v1.10/ucp/reference/uninstall/&#34;&gt;UCP uninstall command reference&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;To uninstall UCP from a node:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Login into the node you want to remove UCP from&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock --name ucp docker/ucp uninstall -i

INFO[0000] Removing UCP Containers
INFO[0001] Removing UCP images
INFO[0007] Removing UCP volumes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After uninstalling UCP, you can remove the &lt;code&gt;docker/ucp&lt;/code&gt; images that
were pulled from Docker Hub when installing UCP.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Repeat steps 1 and 2 on each node of the cluster. Make sure to save
the controller for last.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read more &lt;a href=&#34;https://www.docker.com/universal-control-plane&#34;&gt;about Docker UCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read more &lt;a href=&#34;http://docs.docker.com/reference/commandline/cli/&#34;&gt;about the Docker CLI client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learn &lt;a href=&#34;http://docs.docker.com/swarm/&#34;&gt;about Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Integrate with Trusted Registry</title>
      <link>https://docs.docker.com/v1.10/ucp/dtr-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/dtr-integration/</guid>
      <description>

&lt;h1 id=&#34;integrate-ucp-with-docker-trusted-registry&#34;&gt;Integrate UCP with Docker Trusted Registry&lt;/h1&gt;

&lt;p&gt;This page explains how to integrate Universal Control Plane (UCP) with the
Docker Trusted Registry (DTR). Trusted Registry is a image storage and
management service that you can install within your company&amp;rsquo;s private
infrastructure.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;You must have already installed DTR on your infrastructure before performing
this procedure. The DTR server and the UCP controller must be able to
communicate over your network infrastructure.&lt;/p&gt;

&lt;p&gt;The Universal Control Plane and Trusted Registry are both part of the Docker
Datacenter solution. This means the license you use for UCP works with DTR or,
if you have a DTR license, it also works with UCP.&lt;/p&gt;

&lt;h2 id=&#34;step-1-optional-prepare-a-cert-script&#34;&gt;Step 1. (Optional) Prepare a cert script&lt;/h2&gt;

&lt;p&gt;If you are using a self-signed or third-party CA with the Trusted Registry, you
need to the prepare a &lt;code&gt;cert_create.sh&lt;/code&gt; script. You&amp;rsquo;ll use this script to install
the self-signed cert on the nodes in your UCP cluster.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a file called &lt;code&gt;cert_create.sh&lt;/code&gt; with your favorite editor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following to content to the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DTR_HOST=&amp;quot;&amp;lt;dtr-fully-qualified-domain-name&amp;gt;&amp;quot;
sudo mkdir -p /etc/docker/certs.d/${DTR_HOST}
openssl s_client -host ${DTR_HOST} -port 443 &amp;lt;/dev/null 2&amp;gt;/dev/null | openssl x509 -CAform PEM | sudo tee /etc/docker/certs.d/${DTR_HOST}/ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace the &lt;code&gt;&amp;lt;dtr-fully-qualified-domain-name&amp;gt;&lt;/code&gt; value with the fully qualified DNS
value for your DTR instance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save and close the &lt;code&gt;cert_create.sh&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set execute permission on the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod 755 cert_create.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-2-add-the-ucp-cert-to-the-trusted-registry&#34;&gt;Step 2. Add the UCP cert to the Trusted Registry&lt;/h2&gt;

&lt;p&gt;In this step, you configure DTR and UCP to communicate. To do this you need an
admin level certificate bundle for UCP or terminal access to the UCP controller.
This setup also requires restarting the Docker Trusted Registry server.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into or connect to the UCP primary controller.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate the UCP certificates using the &lt;code&gt;ucp dump-certs&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;This command generates the certificates for the Swarm cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp dump-certs  --cluster -ca &amp;gt; /tmp/cluster-root-ca.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cat the &lt;code&gt;cluster-root-ca.pem&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /tmp/cluster-root-ca.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the UCP cluster&amp;rsquo;s root CA.&lt;/p&gt;

&lt;p&gt;This example illustrates what you should copy, your installation certificate
will be different.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN CERTIFICATE-----
MIIFGDCCAwCgAwIBAgIIIQjwMnZnj2gwDQYJKoZIhvcNAQENBQAwGDEWMBQGA1UE
AxMNU3dhcm0gUm9vdCBDQTAeFw0xNjAyMTAxNzQzMDBaFw0yMTAyMDgxNzQzMDBa
MBgxFjAUBgNVBAMTDVN3YXJtIFJvb3QgQ0EwggIiMA0GCSqGSIb3DQEBAQUAA4IC
DwAwggIKAoICAQC5UtvO/xju7INdZkXA9TG7T6JYo1CIf5yZz9LZBDrexSAx7uPi
7b5YmWGUA26VgBDvAFuLuQNRy/OlITNoFIEG0yovw6waLcqr597ox9d9jeaJ4ths
...&amp;lt;output snip&amp;gt;...
2wDuqlzByRVTO0NL4BX0QV1J6LFtrlWU92WxTcOV8T7Zc4mzQNMHfiIZcHH/p3+7
cRA7HVdljltI8UETcrEvTKb/h1BiPlhzpIfIHwMdA2UScGgJlaH7wA0LpeJGWtUc
AKrb2kTIXNQq7phH
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Login to the Trusted Registry dashboard as a user.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;Settings &amp;gt; General&lt;/strong&gt; page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Locate the &lt;strong&gt;Auth Bypass TLS Root CA&lt;/strong&gt; field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Paste the UCP root CA you copied in step 4 above into this field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll to the bottom of the page and press &lt;strong&gt;Save and restart&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-3-add-the-trusted-registry-cert-to-ucp&#34;&gt;Step 3. Add the Trusted Registry cert to UCP&lt;/h2&gt;

&lt;p&gt;You must integrate the Trusted Registry with UCP by installing the Trusted
Registry CA into your UCP.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into UCP.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;Settings &amp;gt; DTR&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter the URL of your Trusted Registry in the &lt;strong&gt;URL&lt;/strong&gt; field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not set the &lt;strong&gt;Insecure&lt;/strong&gt; option.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Regardless of whether you are using self-signed, external third-party, or
   internal certificates, setting this value means that traffic between the
   Trusted Registry and UCP is encrypted but unverified. Setting &lt;strong&gt;Insecure&lt;/strong&gt; is
   not recommended as it makes your installation vulnerable to man-in-the-middle
   attacks.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;(Optional) Upload the Trusted Registry root CA certificate.&lt;/p&gt;

&lt;p&gt;If your Trusted Registry installation is using an external, 3rd-party root
CA you can skip this step. If your registry is using internal, corporate or
a self-signed root CA, you &lt;em&gt;must&lt;/em&gt; follow this step. To create the Trusted
Registry root CA file:&lt;/p&gt;

&lt;p&gt;a. Run the following command from a machine (Linux/Mac) capable of connecting to your DTR node:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl s_client -host &amp;lt;dtr-fully-qualified-domain-name&amp;gt; -port 443 &amp;lt;/dev/null 2&amp;gt;/dev/null | openssl x509 -CAform PEM | tee /tmp/dtr.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl s_client -host ec2-54-187-154-87.us-west-2.compute.amazonaws.com -port 443 &amp;lt;/dev/null 2&amp;gt;/dev/null | openssl x509 -CAform PEM | tee /tmp/dtr.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b. Upload the &lt;code&gt;dtr.pem&lt;/code&gt; file you just created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/dtr-integrate-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;strong&gt;Update Registry&lt;/strong&gt; to save your changes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(Optional) Install the Trusted Registry certificate on every UCP node in your cluster.&lt;/p&gt;

&lt;p&gt;This step ensures that the UCP nodes trust the registry&amp;rsquo;s root CA. If your
Trusted Registry installation is using an external, 3rd-party root CA
you can skip this step. If your registry is using internal, corporate or a
self-signed root CA, you &lt;em&gt;must&lt;/em&gt; follow this step.&lt;/p&gt;

&lt;p&gt;a. Log into a UCP node using an account with &lt;code&gt;sudo&lt;/code&gt; privileges.&lt;/p&gt;

&lt;p&gt;b. Copy the &lt;code&gt;cert_create.sh&lt;/code&gt;to the node.&lt;/p&gt;

&lt;p&gt;c. Run the &lt;code&gt;cert_create.sh&lt;/code&gt; on the node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cert_create.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d. Verify the cert was created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cat /etc/docker/certs.d/&amp;lt;dtr-fully-qualified-domain-name&amp;gt;/ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-4-create-a-test-repository&#34;&gt;Step 4. Create a test repository&lt;/h2&gt;

&lt;p&gt;Before you can confirm you integration, you need to make sure you have a test
repository on the Trusted Registry.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into the Trusted Registry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;Repositories&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;New repository&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a private repository called &lt;code&gt;hello_world&lt;/code&gt; under your username.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/dtr-integrate.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to the &lt;strong&gt;Settings&lt;/strong&gt; page and look for the &lt;strong&gt;Domain name&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll use name value in the next section, write it down or remember it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-5-confirm-the-integration&#34;&gt;Step 5. Confirm the integration&lt;/h2&gt;

&lt;p&gt;The best way to confirm the integration is to push and pull an image from a UCP
node to your test repository. In this procedure, you must use a username and
password combination that exists on both the Trusted Registry and UCP.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Connect to the terminal on a UCP node via an authorized UCP certificate
bundle.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pull Docker&amp;rsquo;s &lt;code&gt;hello-world&lt;/code&gt; image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull hello-world
Using default tag: latest
latest: Pulling from library/hello-world
03f4658f8b78: Pull complete
a3ed95caeb02: Pull complete
Digest: sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
Status: Downloaded newer image for hello-world:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List the &lt;code&gt;hello-world&lt;/code&gt; image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
...&amp;lt;output snipped&amp;gt;...
hello-world             latest              690ed74de00f        4 months ago        960 B
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Retag the &lt;code&gt;hello-world&lt;/code&gt; image with a new tag.&lt;/p&gt;

&lt;p&gt;The syntax for tagging an image is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker tag &amp;lt;image-name&amp;gt; &amp;lt;dtr-domain-name&amp;gt;/&amp;lt;username&amp;gt;/&amp;lt;image-name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with your actual username and the &lt;ID&gt;
with the ID of the &lt;code&gt;hello-world&lt;/code&gt; image you pulled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker tag hello-world mydtr.company.com/moxiegirl/hello_world:test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List the new image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE
...&amp;lt;output snipped&amp;gt;...
hello-world                       latest              690ed74de00f        4 months ago        960 B
mydtr.company.com/admin/hello_world   test                690ed74de00f        4 months ago        960 B
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Login into the DTR instance from the command line.&lt;/p&gt;

&lt;p&gt;The example below uses &lt;code&gt;mydtr.company.com&lt;/code&gt; as the URL for the DTR instance.
Your&amp;rsquo;s will be different.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$  docker login mydtr.company.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provide your username, password, and email when prompted.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push your newly tagged image to the DTR instance.&lt;/p&gt;

&lt;p&gt;The following is an example only, substitute your DTR URL and username when
you run this command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker push mydtr.company.com/moxiegirl/hello_world:test
The push refers to a repository [mydtr.company.com/moxiegirl/hello_world]
5f70bf18a086: Pushed
b652ec3a27e7: Pushed
test: digest: sha256:6febc57b05c1a791edd184fd3480a33aaa63949573daa5d1bd17bb5f75477b82 size: 1941
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Log into the Trusted Registry and confirm your repository contains the image your pushed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/dtr_tag.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Log into UCP.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;Images&lt;/strong&gt; and search for &lt;code&gt;hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/dtr_hello.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delete any &lt;code&gt;hello-world&lt;/code&gt; or &lt;code&gt;hello_world&lt;/code&gt; image.&lt;/p&gt;

&lt;p&gt;This step ensures the next step goes to the Trusted Registry. Once you are sure you no longer have any of your test images in UCP, go onto the next step.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;While still on &lt;strong&gt;Images&lt;/strong&gt;, choose &lt;strong&gt;Pull Image&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter the name of your test image and press &lt;strong&gt;Pull&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/dtr_pull.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;troubleshooting-section&#34;&gt;Troubleshooting section&lt;/h2&gt;

&lt;p&gt;This section details common problems you can encounter when working with the DTR /
UCP integration.&lt;/p&gt;

&lt;h3 id=&#34;pull-completes-but-no-image-is-pulled&#34;&gt;Pull completes but no image is pulled&lt;/h3&gt;

&lt;p&gt;Currently, UCP does not return pull errors in the UI. If you do not get an image
with the &lt;strong&gt;Pull Images&lt;/strong&gt; operation, check the UCP controller logs.&lt;/p&gt;

&lt;h3 id=&#34;unknown-authority-error-on-push&#34;&gt;Unknown authority error on push&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% docker push mydtr.acme.com/jdoe/myrepo:latest
The push refers to a repository [mydtr.acme.com/jdoe/myrepo]
unable to ping registry endpoint https://mydtr.acme.com/v0/
v2 ping attempt failed with error: Get https://mydtr.acme.com/v2/: x509: certificate signed by unknown authority
v1 ping attempt failed with error: Get https://mydtr.acme.com/v1/_ping: x509: certificate signed by unknown authority
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Review the trust settings in DTR and make sure they are correct. Try repasting
the first PEM block from the &lt;code&gt;chain.pem&lt;/code&gt; file.&lt;/p&gt;

&lt;h3 id=&#34;authentication-required&#34;&gt;Authentication required&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% docker push mydtr.acme.com/jdoe/myrepo:latest
The push refers to a repository [mydtr.acme.com/jdoe/myrepo]
5f70bf18a086: Preparing
2c84284818d1: Preparing
unauthorized: authentication required
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You must login before you can push to DTR.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manage and authorize users</title>
      <link>https://docs.docker.com/v1.10/ucp/manage/monitor-manage-users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/manage/monitor-manage-users/</guid>
      <description>

&lt;h1 id=&#34;manage-and-authorize-ucp-users&#34;&gt;Manage and authorize UCP users&lt;/h1&gt;

&lt;p&gt;This page explains how to manage users and authorize users within the UCP.
Managing users requires that you understand how to create users and combine them
into teams. Authorizing users requires that you understand how to apply roles
and create permissions within UCP.  On this page, you learn to do both. You also
learn about the features and systems of UCP that support user management and
authorization.&lt;/p&gt;

&lt;h2 id=&#34;understand-user-authorization-in-ucp&#34;&gt;Understand user authorization in UCP&lt;/h2&gt;

&lt;p&gt;Users in UCP have two levels of authorization. They may have authorization to
manage UCP and they have authorization to access the Docker objects and
resources that UCP manages. You can authorize user to UCP manage UCP by enabling
the &lt;strong&gt;IS A UCP ADMIN&lt;/strong&gt; in a user&amp;rsquo;s &lt;strong&gt;Account Details&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/account_details.png&#34; alt=&#34;Account Details&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Users that are UCP administrators have authorization to fully access all Docker
objects in your production system. This authorization is the granted both
whether access is through the GUI or the command line.&lt;/p&gt;

&lt;p&gt;Users within UCP have &lt;em&gt;permissions&lt;/em&gt; assigned to them by default. This authorizes
what a user can do to Docker resource such as volumes, networks, images, and
containers. UCP allows you define default permissions for a user when you create
that user. In this release of UCP, more granular access to just one object, the
container object, is possible through the use of teams.&lt;/p&gt;

&lt;p&gt;The possible permissions are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;No Access&lt;/td&gt;
&lt;td&gt;Cannot access any resources.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;View Only&lt;/td&gt;
&lt;td&gt;Can view resources. This role grants the ability to view a container but not restart, kill, or remove it.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Restricted Control&lt;/td&gt;
&lt;td&gt;Can edit resources. This role grants the ability to create, restart, kill, and remove containers.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Full Control&lt;/td&gt;
&lt;td&gt;Can do anything possible to resources. This role grants full rights to all actions on containers.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For containers only, you can extend the default access permissions with more
granular, role-based permissions. Docker Engine allows container creators to
apply arbitrary, descriptive strings called &lt;em&gt;labels&lt;/em&gt; to a container. If you
define labels for use by container creators, you can leverage these
labels with UCP teams to configure role-based access to containers.&lt;/p&gt;

&lt;p&gt;The general process for configuring role-based access to containers is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify one or more labels to apply to containers.&lt;/li&gt;
&lt;li&gt;Create one or more teams.&lt;/li&gt;
&lt;li&gt;Define a permission by combining a pre-identified label with a role value.&lt;/li&gt;
&lt;li&gt;Add users to the team.&lt;/li&gt;
&lt;li&gt;Ensure container creators use the pre-defined labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you configure it, users have this access through UCP and through their
interactions on the command line via the client bundle.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Users can by-pass all UCP authorization controls by logging into a UCP node via
standard SSH and addressing the Swarm cluster directly. For this reason, You
must be sure to secure network access to a cluster&amp;rsquo;s nodes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;understand-restricted-control&#34;&gt;Understand Restricted Control&lt;/h2&gt;

&lt;p&gt;Containers run as services on your network. Without proper knowledge, users can
launch a container with an insecure configuration. To reduce the risk of this
happening, the &lt;strong&gt;Restricted Control&lt;/strong&gt; limits the options users can use when
launching containers.&lt;/p&gt;

&lt;p&gt;A user with &lt;strong&gt;Restricted Control&lt;/strong&gt; can create, restart, kill, or remove a
container. These users are can not &lt;code&gt;docker exec&lt;/code&gt; into a container. Additionally,
&lt;strong&gt;Restricted Control&lt;/strong&gt; prevents users from running a container with these
options:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Prevented Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--privileged&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A “privileged” container is given access to all devices.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--cap-add&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The ability to expand the kernel-level capabilities a user or process has in a  container.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;host mounted volumes&lt;/td&gt;
&lt;td&gt;Mount a volume from the host where the container is running.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--ipc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The ability to set a container&amp;rsquo;s IPC (POSIX/SysV IPC) namespace mode. This provides separation of named shared memory segments, semaphores and message queues. mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PID namespace provides separation of processes. The PID Namespace removes the view of the system processes, and allows process ids to be reused including pid 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Users that attempt to create containers with these options receive an error message.&lt;/p&gt;

&lt;h2 id=&#34;creating-users-through-ucp&#34;&gt;Creating users through UCP&lt;/h2&gt;

&lt;p&gt;UCP offers two ways to create user accounts. You can manually create accounts
one-at-a-time or you can import users as a group into a team via UCP&amp;rsquo;s LDAP
integration. To create an individual user, do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Users &amp;amp; Teams&lt;/strong&gt; from the UCP dashboard.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Create User&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/create_user.png&#34; alt=&#34;Create users&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Complete the fields for the user.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;DEFAULT PERMISSIONS&lt;/strong&gt; define the default access role a user has to all
the Docker objects and resources in the system. You can refine and extend access
on containers by adding a user to a &lt;strong&gt;Team&lt;/strong&gt; later.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt; to create the user.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;creating-a-team&#34;&gt;Creating a team&lt;/h2&gt;

&lt;p&gt;UCP offers two ways to create teams. You can manually create teams one-at-a-time
or you can populate a team by importing multiple users via an LDAP or Active
Directory connection. The teams you populate one-at-a-time are &lt;strong&gt;Managed&lt;/strong&gt; teams
meaning they contain only users managed by UCP.&lt;/p&gt;

&lt;p&gt;Teams you create via an LDAP or Active Directory connection are known as
&lt;strong&gt;Discovered&lt;/strong&gt; teams. To use LDAP or Active Directory, you must have already
configured the AUTH settings in UCP. When you create a &lt;strong&gt;Discovered&lt;/strong&gt; team, the
system imports the members and applies the default authorization set in UCP&amp;rsquo;s
&lt;strong&gt;AUTH&lt;/strong&gt; settings. The value appears in the &lt;strong&gt;DEFAULT PERMISSIONS FOR NEW
DISCOVERED ACCOUNTS&lt;/strong&gt; field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/ldap_access.png&#34; alt=&#34;LDAP config&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To create &lt;strong&gt;Discovered&lt;/strong&gt; team with LDAP or Active Directory, do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Login into UCP as a user with UCP ADMIN authorization.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Users &amp;amp; Teams&lt;/strong&gt; from the UCP dashboard.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Create a Team&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The system displays the &lt;strong&gt;Create Team&lt;/strong&gt; page. At this point, you decide what
&lt;strong&gt;TYPE&lt;/strong&gt; of team you want to create. You can&amp;rsquo;t change or convert the team
&lt;strong&gt;TYPE&lt;/strong&gt; later.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;Discovered&lt;/strong&gt; from the &lt;strong&gt;TYPE&lt;/strong&gt; dropdown.&lt;/p&gt;

&lt;p&gt;The system displays options for the &lt;strong&gt;Discovered&lt;/strong&gt; team. Completing this
dialog requires that you have a basic understanding of LDAP or access to
someone who does.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the team.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter an &lt;strong&gt;LDAP DN&lt;/strong&gt; value.&lt;/p&gt;

&lt;p&gt;This value is a distinguished name (DN) identify the group you want to
import. A distinguished name describes a position in an LDAP
directory information tree (DIT).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter a &lt;strong&gt;LDAP MEMBER ATTRIBUTE&lt;/strong&gt; value.&lt;/p&gt;

&lt;p&gt;This identifies the attribute you should use to retrieve the values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/save_team.png&#34; alt=&#34;Create users&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save the team.&lt;/p&gt;

&lt;p&gt;After a moment, the system creates a team with the users matching
your team specification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/match_list.png&#34; alt=&#34;Match users&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;add-permissions-to-a-team&#34;&gt;Add permissions to a team&lt;/h2&gt;

&lt;p&gt;You can use a team to simply organize &lt;strong&gt;Managed&lt;/strong&gt; users or to import/organize
&lt;strong&gt;Discovered&lt;/strong&gt; users. Optionally, you can also add permissions to a the team.
Permissions are a combination of labels and roles you can apply to a team.
Permissions authorize users to act on containers with the matching labels
according to roles you define.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For correct application, you must ensure the labels exist on
containers deployed ins UCP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To add &lt;strong&gt;Permissions&lt;/strong&gt; to a team, do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select the team.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;PERMISSIONS&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Add Label&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/add_permission.png&#34; alt=&#34;Add permission&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;related-information&#34;&gt;Related information&lt;/h2&gt;

&lt;p&gt;To learn how to apply labels, see the how to &lt;a href=&#34;https://docs.docker.com/engine/userguide/labels-custom-metadata/&#34;&gt;Apply custom
metadata&lt;/a&gt;
Engine documentation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manage and monitor</title>
      <link>https://docs.docker.com/v1.10/ucp/manage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/manage/</guid>
      <description>

&lt;h1 id=&#34;ucp-resource-management-and-monitoring&#34;&gt;UCP resource management and monitoring&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/manage/monitor-ucp/&#34;&gt;Your UCP installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/manage/monitor-manage-users/&#34;&gt;Users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Monitor and troubleshoot UCP</title>
      <link>https://docs.docker.com/v1.10/ucp/manage/monitor-ucp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/manage/monitor-ucp/</guid>
      <description>

&lt;h1 id=&#34;monitor-and-troubleshoot-your-ucp-installation&#34;&gt;Monitor and troubleshoot your UCP installation&lt;/h1&gt;

&lt;p&gt;This article gives you an overview of how to monitor your Docker UCP
installation. Here you&amp;rsquo;ll also find the information you need to troubleshoot
if something goes wrong.&lt;/p&gt;

&lt;h2 id=&#34;understand-ucp&#34;&gt;Understand UCP&lt;/h2&gt;

&lt;p&gt;Docker UCP has several components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UCP controller node: the node that handles user requests,&lt;/li&gt;
&lt;li&gt;UCP replica nodes: replicas of the controller node, for high-availability,&lt;/li&gt;
&lt;li&gt;UCP nodes: the nodes that run your own containers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;../v1.10/ucp/plan-production-install/#ucp-architecture&#34;&gt;Learn more about the UCP architecture&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;check-the-cluster-status&#34;&gt;Check the cluster status&lt;/h2&gt;

&lt;p&gt;To monitor your UCP installation, the first thing to check is the
&lt;strong&gt;Dashboard&lt;/strong&gt; screen on the UCP web app.&lt;/p&gt;

&lt;p&gt;In your web browser, navigate to the UCP web app. After logging in, you&amp;rsquo;ll be
directed to the &lt;strong&gt;Dashboard&lt;/strong&gt; screen, where you can check your UCP cluster
installation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/nodes-3.png&#34; alt=&#34;UCP dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, our cluster has 3 nodes.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;nodes&lt;/strong&gt; card, or the &lt;strong&gt;Nodes&lt;/strong&gt; menu option to navigate to see
more information about the controller, replicas, and nodes of your cluster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/cluster-nodes.png&#34; alt=&#34;UCP nodes list&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can also check the state of the components of the UCP cluster. On the
menu, navigate to &lt;strong&gt;Containers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By default the Containers screen doesn&amp;rsquo;t display system containers. On the
filter dropdown choose &lt;strong&gt;Show all containers&lt;/strong&gt; to see all the UCP components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/container-list.png&#34; alt=&#34;UCP container list&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see more information about these containers. &lt;strong&gt;Click on the container&lt;/strong&gt;
to see its details.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/container-detail-2.png&#34; alt=&#34;UCP container details&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the container details page, you can see the status, resource consumption,
and logs of a specific container.&lt;/p&gt;

&lt;h2 id=&#34;check-the-cluster-status-from-the-cli&#34;&gt;Check the cluster status from the CLI&lt;/h2&gt;

&lt;p&gt;You can also check UCP status using the command line:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make sure you&amp;rsquo;ve downloaded a client certificate bundle.&lt;/p&gt;

&lt;p&gt;UCP uses mutual TLS. So you need to have a client certificate bundle
to interact with UCP from the command line.
&lt;a href=&#34;../v1.10/ucp/production-install/#set-8-set-up-certificates-for-the-cli&#34;&gt;Learn how to get a client bundle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have a client bundle, you&amp;rsquo;ll need to login into the
host directly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your terminal, navigate to the client bundle folder you downloaded.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the contents of the &lt;code&gt;env.sh&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;This file sets the environment variables you need to connect to the UCP
controller. If you&amp;rsquo;re using Windows, use the &lt;code&gt;env.cmd&lt;/code&gt; file instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat env.sh

export DOCKER_TLS_VERIFY=1
export DOCKER_CERT_PATH=$(pwd)
export DOCKER_HOST=tcp://ec2-54-183-169-0.us-west-1.compute.amazonaws.com:443
#
# Bundle for user joao.fernandes
# UCP Instance ID N2YI:APRI:EP3D:IT2A:S6FR:HHFD:NYPD:UVCL:KSPV:E3NR:TDAJ:7HOU
#
# This admin cert will also work directly against Swarm and the individual
# engine proxies for troubleshooting.  After sourcing this env file, use
# &amp;quot;docker info&amp;quot; to discover the location of Swarm managers and engines.
# and use the --host option to override $DOCKER_HOST
#
# Run this command from within this directory to configure your shell:
# eval $(&amp;lt;env.sh)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Follow the instructions on the &lt;code&gt;env.sh&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(&amp;lt;env.sh)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, when using the &lt;code&gt;docker&lt;/code&gt; command, the requests are sent
to the UCP controller.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use &lt;code&gt;docker version&lt;/code&gt; and &lt;code&gt;docker info&lt;/code&gt; to see the state of your cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker info

Containers: 13
Images: 24
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 3
 ucp-controller: ec2-54-183-169-0.us-west-1.compute.amazonaws.com:12376
  └ Status: Healthy
  └ Containers: 9
  └ Reserved CPUs: 0 / 1
----output snipped----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your client bundle is for a non-admin user, you won&amp;rsquo;t have permissions
to execute all docker commands.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;use-the-cli-with-admin-client-bundles&#34;&gt;Use the CLI with admin client bundles&lt;/h2&gt;

&lt;p&gt;To protect your UCP cluster against unauthorized access, all components of the
cluster use mutual TLS.
That way, for two components to talk, both need to identify using certificates.&lt;/p&gt;

&lt;p&gt;UCP has two different root CAs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One to issue certificates for cluster components&lt;/li&gt;
&lt;li&gt;Another to issue certificates for user bundles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All components of the cluster trust certificates signed by the first root CA.
Only the UCP controller trusts certificates signed by the second root CA.&lt;/p&gt;

&lt;p&gt;This means that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cluster components can communicate with each other, but won&amp;rsquo;t accept
requests from other systems,&lt;/li&gt;
&lt;li&gt;Users need to download a certificate bundle to interact with the UCP
controller.
Even though that can make requests to the controller, they can&amp;rsquo;t interact with
any other component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To ensure admin users can troubleshoot all cluster components, their
client bundles are signed by the first root CA.
So if you have an admin user client bundle, you can execute the &lt;code&gt;docker&lt;/code&gt;
command against the Swarm manager, or any Docker Engines on the cluster, using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H &amp;lt;node_ip&amp;gt;:&amp;lt;engine_port&amp;gt; &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(&amp;lt;env.sh)
$ docker -H tcp://ec2-54-183-169-0.us-west-1.compute.amazonaws.com:12376 ps

CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                                                                             NAMES
452ecf25cc24        docker/ucp-controller:0.8.0    &amp;quot;/bin/controller serv&amp;quot;   16 hours ago        Up 16 hours         0.0.0.0:443-&amp;gt;8080/tcp                                                             ucp-controller
dd7005d44f35        docker/ucp-cfssl-proxy:0.8.0   &amp;quot;/bin/run&amp;quot;               16 hours ago        Up 16 hours         0.0.0.0:12381-&amp;gt;12381/tcp                                                          ucp-swarm-ca-proxy
3862e9683ba2        docker/ucp-cfssl:0.8.0         &amp;quot;/bin/cfssl serve -ad&amp;quot;   16 hours ago        Up 16 hours         8888/tcp                                                                          ucp-swarm-ca
220ed108b835        docker/ucp-cfssl-proxy:0.8.0   &amp;quot;/bin/run&amp;quot;               16 hours ago        Up 16 hours         0.0.0.0:12382-&amp;gt;12382/tcp, 12381/tcp                                               ucp-ca-proxy
b765417f71d0        docker/ucp-cfssl:0.8.0         &amp;quot;/bin/cfssl serve -ad&amp;quot;   16 hours ago        Up 16 hours         8888/tcp                                                                          ucp-ca
01ab8aa73012        swarm:1.1.0-rc2                &amp;quot;/swarm manage --tlsv&amp;quot;   16 hours ago        Up 16 hours         0.0.0.0:2376-&amp;gt;2375/tcp                                                            ucp-swarm-manager
cb85fe3cf914        swarm:1.1.0-rc2                &amp;quot;/swarm join --discov&amp;quot;   16 hours ago        Up 16 hours         2375/tcp                                                                          ucp-swarm-join
9d468d8e6e48        docker/ucp-proxy:0.8.0         &amp;quot;/bin/run&amp;quot;               16 hours ago        Up 16 hours         0.0.0.0:12376-&amp;gt;2376/tcp                                                           ucp-proxy
f488479212e1        docker/ucp-etcd:0.8.0          &amp;quot;/bin/etcd --data-dir&amp;quot;   16 hours ago        Up 16 hours         2380/tcp, 4001/tcp, 7001/tcp, 0.0.0.0:12380-&amp;gt;12380/tcp, 0.0.0.0:12379-&amp;gt;2379/tcp   ucp-kv

$ docker -H tcp://ec2-54-183-169-0.us-west-1.compute.amazonaws.com:12376 restart ucp-controller
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;review-ucp-logs-on-the-cli&#34;&gt;Review UCP logs on the CLI&lt;/h2&gt;

&lt;p&gt;With an admin client bundle, you can access the logs of any component of a
UCP installation. You use the &lt;code&gt;docker -H&lt;/code&gt; option to run your commands against
the Swarm manager, or Docker engine directly.&lt;/p&gt;

&lt;p&gt;As as example, to see the logs of the ucp controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Populate the Docker environment variables to use the client bundle
$ eval $(&amp;lt;env.sh)

# Get information about the UCP cluster
$ docker info

Containers: 13
Images: 26
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 3
 ucp-controller: ec2-54-183-169-0.us-west-1.compute.amazonaws.com:12376
--- output snipped ---

# Check the containers that are running on the controller node
$ docker -H tcp://ec2-54-183-169-0.us-west-1.compute.amazonaws.com:12376 ps

CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                          NAMES
452ecf25cc24        docker/ucp-controller:0.8.0    &amp;quot;/bin/controller serv&amp;quot;   42 hours ago        Up 42 hours         0.0.0.0:443-&amp;gt;8080/tcp          ucp-controller
dd7005d44f35        docker/ucp-cfssl-proxy:0.8.0   &amp;quot;/bin/run&amp;quot;               42 hours ago        Up 42 hours         0.0.0.0:12381-&amp;gt;12381/tcp       ucp-swarm-ca-proxy
--- output snipped ---

# Check the logs of the ucp-controller container
$ docker -H tcp://ec2-54-183-169-0.us-west-1.compute.amazonaws.com:12376 logs ucp-controller

{&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;license_key&amp;quot;:&amp;quot;unlicensed&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;builtin:Password based auth failure&amp;quot;,&amp;quot;remote_addr&amp;quot;:&amp;quot;50.233.46.103:34706&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2016-02-18T20:48:56Z&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;auth fail&amp;quot;,&amp;quot;username&amp;quot;:&amp;quot;daniel&amp;quot;}
{&amp;quot;level&amp;quot;:&amp;quot;info&amp;quot;,&amp;quot;license_key&amp;quot;:&amp;quot;unlicensed&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;builtin:Password based auth failure&amp;quot;,&amp;quot;remote_addr&amp;quot;:&amp;quot;50.233.46.103:34706&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2016-02-18T20:49:04Z&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;auth fail&amp;quot;,&amp;quot;username&amp;quot;:&amp;quot;daniel.mattews&amp;quot;}
--- output snipped ---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-ucp-logging&#34;&gt;Configure UCP logging&lt;/h2&gt;

&lt;p&gt;You can configure UCP for sending logs to a remote logging service:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login into UCP with an administrator account&lt;/li&gt;
&lt;li&gt;Navigate to the &lt;strong&gt;Settings&lt;/strong&gt; page&lt;/li&gt;
&lt;li&gt;Set the information about your logging server, and click
&lt;strong&gt;Enable Remote Logging&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/settings-log.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/plan-production-install/#ucp-architecture&#34;&gt;Learn about the UCP architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/support/&#34;&gt;Get support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Plan a production installation</title>
      <link>https://docs.docker.com/v1.10/ucp/plan-production-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/plan-production-install/</guid>
      <description>

&lt;h1 id=&#34;plan-a-production-installation&#34;&gt;Plan a production installation&lt;/h1&gt;

&lt;p&gt;This article gives you an overview of the Docker Universal Control Plane (UCP)
architecture and its components. Here you&amp;rsquo;ll also find all the information
you need to plan a UCP installation on a production environment.&lt;/p&gt;

&lt;p&gt;The following topics are covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ucp-architecture&#34;&gt;UCP architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-ucp-installation&#34;&gt;The UCP installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#understand-your-installation-options&#34;&gt;Understand your installation options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installation-checklist&#34;&gt;Installation checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ucp-architecture&#34;&gt;UCP architecture&lt;/h2&gt;

&lt;p&gt;Docker UCP is a cluster with multiple nodes, each running the
Commercially Supported (CS) Docker Engine.
In this cluster, there are 3 different types of nodes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#UCP-controller-node&#34;&gt;UCP controller node&lt;/a&gt;: the node that handles user
requests,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ucp-replica-nodes&#34;&gt;UCP replica nodes&lt;/a&gt;: replicas of the controller node, for
high-availability,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ucp-nodes&#34;&gt;UCP nodes&lt;/a&gt;: the nodes that run your own containers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/ucp-architecture.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;ucp-controller-node&#34;&gt;UCP controller node&lt;/h4&gt;

&lt;p&gt;This is the node that handles user requests to UCP. Users interact with UCP
using a web browser, or a CLI client.&lt;/p&gt;

&lt;p&gt;Below is a list of the containers that are deployed to the controller node,
when running the &lt;code&gt;ucp install&lt;/code&gt; command:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-kv&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This container runs the key-value store used by UCP. Don&amp;rsquo;t use this key-value store in your applications, since it&amp;rsquo;s for internal use only.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-manager&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This Swarm manager uses the replicated KV store for leader election and cluster membership tracking.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-controller&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This container runs the UCP server, using the replicated KV store for configuration state.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-join&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs the &lt;code&gt;swarm join&lt;/code&gt; command to periodically publish this node existence to the KV store. If the node goes down, this publishing stops, and the registration times out, and the node is automatically dropped from the cluster.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-proxy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs a local TLS proxy for the docker socket to enable secure access of the local docker daemon.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-cluster-root-ca&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Run the Swarm CA used for admin certificate bundles, and adding new nodes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-client-root-ca&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Run the (optional) UCP CA used for signing user bundles.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;ucp-replica-nodes&#34;&gt;UCP replica nodes&lt;/h4&gt;

&lt;p&gt;Docker UCP has support for high availability. You can configure replica nodes
for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load-balancing user requests across the controller and replica nodes,&lt;/li&gt;
&lt;li&gt;Maintain a copy of the system configuration, in case the controller fails.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A cluster with N controller and replica nodes can only tolerate (N-1)/2 node
failures. So be sure to set up at least two replicas, when installing UCP for
production.&lt;/p&gt;

&lt;p&gt;Below is a list of the containers that are deployed to the replica node,
when running the &lt;code&gt;ucp join --replica&lt;/code&gt; command:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-kv&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This container runs the key-value store used by UCP. Don&amp;rsquo;t use this key-value store in your applications, since it&amp;rsquo;s for internal use only.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-manager&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This Swarm manager uses the replicated KV store for leader election and cluster membership tracking.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-controller&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This container runs the UCP server, using the replicated KV store for configuration state.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-join&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs the &lt;code&gt;swarm join&lt;/code&gt; command to periodically publish this node existence to the KV store. If the node goes down, this publishing stops, and the registration times out, and the node is automatically dropped from the cluster.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-proxy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs a local TLS proxy for the docker socket to enable secure access of the local docker daemon.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In UCP v1.0 the controller serves as root CA, and no other nodes are able to
sign certificates. If the controller fails, it might not be possible to add new
nodes to the cluster. &lt;a href=&#34;../v1.10/ucp/understand_ha/&#34;&gt;Learn more about high availability&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;ucp-nodes&#34;&gt;UCP nodes&lt;/h4&gt;

&lt;p&gt;These are the nodes that run your own containers. When you deploy
your containers using UCP, it spreads the load across these nodes. You can
configure the strategies used by UCP to deploy the containers across multiple
nodes.&lt;/p&gt;

&lt;p&gt;Below is a list of the containers that are deployed to the node,
when running the &lt;code&gt;ucp join&lt;/code&gt; command:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-join&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs the &lt;code&gt;swarm join&lt;/code&gt; command to periodically publish this node existence to the KV store. If the node goes down, this publishing stops, and the registration times out, and the node is automatically dropped from the cluster.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-proxy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs a local TLS proxy for the docker socket to enable secure access of the local docker daemon.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;the-ucp-installation&#34;&gt;The UCP installation&lt;/h2&gt;

&lt;p&gt;The UCP installation consists of using the Docker Engine CLI to run the &lt;code&gt;ucp&lt;/code&gt;
tool. The &lt;code&gt;ucp&lt;/code&gt; tool is a Docker image that can run subcommands like &lt;code&gt;install&lt;/code&gt;
to install UCP on a node, or &lt;code&gt;join&lt;/code&gt; to join a node to a UCP cluster.&lt;/p&gt;

&lt;p&gt;The general format of these commands is:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Docker client&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;run command with options&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ucp image&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Subcommand with options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;install --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;join --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;uninstall --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can use the &lt;code&gt;ucp&lt;/code&gt; tool interactively, by passing them the &lt;code&gt;-i&lt;/code&gt; option, or
non-interactively, by passing command-line options.&lt;/p&gt;

&lt;p&gt;To list all the possible subcommands for the &lt;code&gt;ucp&lt;/code&gt; tool, use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it docker/ucp  --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also find more information about the &lt;code&gt;ucp&lt;/code&gt; command at the
&lt;a href=&#34;../v1.10/ucp/reference/&#34;&gt;UCP tool reference page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ucp&lt;/code&gt; tool pulls several images from Docker Hub, and runs them in
containers. The only change the &lt;code&gt;ucp&lt;/code&gt; tool makes to your system, is
creating certificates under the
&lt;a href=&#34;#data-volumes-used&#34;&gt;data volumes you create when installing&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;understand-your-installation-options&#34;&gt;Understand your installation options&lt;/h2&gt;

&lt;p&gt;The best way to test-drive UCP is to install and run it on a sandbox.
The default options of the &lt;code&gt;ucp install&lt;/code&gt; command, make it easy to test UCP.
&lt;a href=&#34;../v1.10/ucp/evaluation-install/&#34;&gt;Learn how to install UCP on your local machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When installing UCP for production, you&amp;rsquo;ll want to ensure your installation
scales and is secure. You&amp;rsquo;ll need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up UCP for high availability,&lt;/li&gt;
&lt;li&gt;Customize some of the ports used,&lt;/li&gt;
&lt;li&gt;Customize the data volumes used,&lt;/li&gt;
&lt;li&gt;Use your own certificates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;../v1.10/ucp/production-install/&#34;&gt;Learn how to install UCP in production&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation-checklist&#34;&gt;Installation checklist&lt;/h2&gt;

&lt;p&gt;Before installing UCP, make sure you have the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#hardware-and-software-requirements&#34;&gt;Hardware and sofware requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ports-used&#34;&gt;Ports used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ip-addresses-and-fully-qualified-domain-names&#34;&gt;IP addresses and fully-qualified domain names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subject-alternative-names-sans&#34;&gt;Subject alternative names (SANs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-volumes-used&#34;&gt;Data volumes used&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware-and-software-requirements&#34;&gt;Hardware and software requirements&lt;/h3&gt;

&lt;p&gt;You can install UCP on-premises or on a cloud provider such AWS or Digital
Ocean. To install UCP, all nodes must have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.50 GB of RAM&lt;/li&gt;
&lt;li&gt;3.00 GB of available disk space&lt;/li&gt;
&lt;li&gt;One of the supported operating systems installed:

&lt;ul&gt;
&lt;li&gt;RHEL 7.0, 7.1&lt;/li&gt;
&lt;li&gt;Ubuntu 14.04 LTS&lt;/li&gt;
&lt;li&gt;CentOS 7.1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Kernel version 3.10 or higher&lt;/li&gt;
&lt;li&gt;CS Docker Engine installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the &lt;code&gt;ucp&lt;/code&gt; tool detects that your system doesn&amp;rsquo;t have these
requirements, it displays a warning message.&lt;/p&gt;

&lt;h3 id=&#34;ports-used&#34;&gt;Ports used&lt;/h3&gt;

&lt;p&gt;The following ports are using on UCP installation:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Hosts&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Direction&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Port&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;443  (configurable)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Web app and CLI client access to UCP.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2376 (configurable)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Swarm manager accepts requests from UCP controller.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas, nodes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2375&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Heartbeat for nodes, to ensure they are running.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas, nodes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12376&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Proxy for TLS, provides access to UCP, Swarm, and Engine.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12379&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Internal node configuration, cluster configuration, and HA.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12380&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Internal node configuration, cluster configuration, and HA.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12381&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Proxy for TLS, provides access to UCP.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12382&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Manages TLS and requests from swarm manager.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;controller, replicas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;out&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;443&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Send anonymous usage reports to Docker.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;UCP collects anonymous usage metrics, to help us improve it.
These metrics are entirely anonymous, don&amp;rsquo;t identify your company, users,
applications, or any other sensitive information.
You can disable this at any time on the UCP settings screen.&lt;/p&gt;

&lt;h3 id=&#34;ip-addresses-and-fully-qualified-domain-names&#34;&gt;IP addresses and fully-qualified domain names&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ucp install&lt;/code&gt; command tries to use your network configurations to find
the fully-qualified domain names (FQDN) of your hosts.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t set up your network with FQDNs, the installer might not be able
to find the FQDN for the host. If that happens, you&amp;rsquo;ll be prompted for an
accessible host address. You can also use the &lt;code&gt;--host-address&lt;/code&gt; option to
specify the FQDN to the install command.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re installing UCP on a cloud provider such as AWS or Digital Ocean,
you might need to create a private network for you UCP installation. In that
case, make sure all nodes of the cluster can communicate using their private
IPs.&lt;/p&gt;

&lt;h3 id=&#34;subject-alternative-names-sans&#34;&gt;Subject alternative names (SANs)&lt;/h3&gt;

&lt;p&gt;All the communication between the nodes is protected by mutual TLS. The UCP
installation configures TLS for you automatically.&lt;/p&gt;

&lt;p&gt;For that, UCP requires that all clients, including the Docker Engine, use a
Swarm TLS certificate chain signed by the UCP Swarm Root CA. You provide the
certificate system with subject alternative names or SANs. The SANs are used to
set up individual &amp;ldquo;leaf certificates.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;When using the &lt;code&gt;ucp install&lt;/code&gt; or &lt;code&gt;ucp join&lt;/code&gt; commands interactively, you are
prompted for the subject alternative names of the host. This can be a public
IP address, or fully-qualified domain name.
You can also send the &lt;code&gt;--san&lt;/code&gt; option to specify the SANs for a host.&lt;/p&gt;

&lt;h3 id=&#34;data-volumes-used&#34;&gt;Data volumes used&lt;/h3&gt;

&lt;p&gt;UCP uses named volumes for persistence of data. When installing UCP for
production, you need to create the following volumes:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Volume name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-client-root-ca&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The certificate and key for the UCP root CA. Do not create this volume if you are using your own certificates.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-cluster-root-ca&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The certificate and key for the Swarm root CA.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-controller-server-certs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The controller certificates for the UCP controllers web server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-node-certs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The Swarm certificates for the current node (repeated on every node in the cluster).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-kv-certs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The Swarm KV client certificates for the current node (repeated on every node in the cluster).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-controller-client-certs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The UCP Controller Swarm client certificates for the current node.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ucp-kv&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Key value store persistence.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you don&amp;rsquo;t create these volumes, the &lt;code&gt;ucp install&lt;/code&gt; command creates them for
you with the default volume driver and flags.&lt;/p&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/evaluation-install/&#34;&gt;Test-drive Docker UCP by installing it on a sandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/ucp/production-install/&#34;&gt;Install Docker UCP on production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://docs.docker.com/v1.10/ucp/release_notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/release_notes/</guid>
      <description>

&lt;h1 id=&#34;ucp-release-notes&#34;&gt;UCP Release Notes&lt;/h1&gt;

&lt;h2 id=&#34;version-1-0-1&#34;&gt;Version 1.0.1&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Core&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgraded Swarm to 1.1.3&lt;/li&gt;
&lt;li&gt;Improved support for &lt;code&gt;docker cp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;System CA pool fallback for secure DTR connections&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;--swarm-experimental&lt;/code&gt; option during UCP install&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UI&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can provide one-time credentials to deploy a container from a private registry in UI&lt;/li&gt;
&lt;li&gt;Added checkbox to select all containers in Containers screen&lt;/li&gt;
&lt;li&gt;Removed click handlers from UI elements containing checkboxes&lt;/li&gt;
&lt;li&gt;Usernames and team names now need to be url-compatible&lt;/li&gt;
&lt;li&gt;Several usability improvements to Team screen&lt;/li&gt;
&lt;li&gt;Messages now display team name, instead of Id&lt;/li&gt;
&lt;li&gt;Added support for Growl style notifications&lt;/li&gt;
&lt;li&gt;Improved usability of Applications page, when there are no applications
deployed&lt;/li&gt;
&lt;li&gt;Several improvements to form validations&lt;/li&gt;
&lt;li&gt;Improved error messages displayed when users try to pull an image with
no name&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t allow creating teams with the same name&lt;/li&gt;
&lt;li&gt;Non-admin users can no longer see cluster overview in Dashboard screen&lt;/li&gt;
&lt;li&gt;Page size control is no longer displayed when the list has few elements&lt;/li&gt;
&lt;li&gt;Renamed &amp;lsquo;Roles&amp;rsquo; to &amp;lsquo;Permissions&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bug fixes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users that are on a team and have permission set to &amp;lsquo;None&amp;rsquo;, can no longer see
containers&lt;/li&gt;
&lt;li&gt;Volume driver options are now being correctly sent to Docker Engine&lt;/li&gt;
&lt;li&gt;Fix bug with visibility to User containers with the owner the same as a label&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;version-1-0-0&#34;&gt;Version 1.0.0&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Core&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;License is now required to add nodes&lt;/li&gt;
&lt;li&gt;Improved access control system&lt;/li&gt;
&lt;li&gt;/_ping endpoint now checks the state of datastore and Swarm&lt;/li&gt;
&lt;li&gt;Use mutual TLS in CFSSL&lt;/li&gt;
&lt;li&gt;Improved access control for Docker Engine proxy&lt;/li&gt;
&lt;li&gt;Added support for custom server certificates and user bundles&lt;/li&gt;
&lt;li&gt;Users can now launch &amp;ldquo;private&amp;rdquo; containers if default permission is Restricted Control or greater&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UI&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pages for Containers, Images, and Applications are now consistent&lt;/li&gt;
&lt;li&gt;Improved usability of LDAP configuration page&lt;/li&gt;
&lt;li&gt;Logs are displayed during LDAP configuration&lt;/li&gt;
&lt;li&gt;Users can now see their permissions and teams on their profile page&lt;/li&gt;
&lt;li&gt;Improved license configuration&lt;/li&gt;
&lt;li&gt;Improved error messages for restricted operations&lt;/li&gt;
&lt;li&gt;Support for enabling and disabling DTR integration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bug fixes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users only see volumes, images, and networks if they have permissions&lt;/li&gt;
&lt;li&gt;User default role now setup properly with LDAP authentication&lt;/li&gt;
&lt;li&gt;Fixed container privilege escalation in access control&lt;/li&gt;
&lt;li&gt;Fixed UI issue that caused errors in Safari&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Misc&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UCP now uses a vendored UCP Swarm image&lt;/li&gt;
&lt;li&gt;Removed timestamps from controller logs&lt;/li&gt;
&lt;li&gt;Switched from &amp;lsquo;Full Control&amp;rsquo; to &amp;lsquo;Restricted Control&amp;rsquo; for managing non-container resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Known issues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In version 1.0.0 it&amp;rsquo;s not possible to create containers on user-defined
bridge networks, using the UCP web app.
This happens because the UCP web app is using the &amp;lt;node&amp;gt;/&amp;lt;network_name&amp;gt; syntax,
which is not supported.&lt;/p&gt;

&lt;p&gt;As a workaround, create the containers using the CLI and:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use only &amp;lt;network_name&amp;gt;, and let Swarm find the node with that network, or&lt;/li&gt;
&lt;li&gt;Use the network ID instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Upgrade notes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not possible to upgrade from previous versions to v1.0. If you&amp;rsquo;ve
participated in the Docker UCP beta program, you need to uninstall the beta
version, before installing v1.0.&lt;/p&gt;

&lt;p&gt;To ensure a smooth transition process, start by uninstalling UCP from
the regular nodes, followed by the controller nodes. Also, make sure you
use &lt;code&gt;ucp uninstall&lt;/code&gt; command from version 1.0:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -it --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp:1.0.0 uninstall -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After uninstalling, you can &lt;a href=&#34;../v1.10/ucp/evaluation-install/&#34;&gt;Install UCP for evaluation&lt;/a&gt;,
or &lt;a href=&#34;../v1.10/ucp/production-install/&#34;&gt;Install UCP for production&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up container networking</title>
      <link>https://docs.docker.com/v1.10/ucp/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/networking/</guid>
      <description>

&lt;h1 id=&#34;enable-container-networking-with-ucp&#34;&gt;Enable container networking with UCP&lt;/h1&gt;

&lt;p&gt;Along with host and bridge networks, Docker Engine lets users create container
overlay networks. These networks span multiple hosts running Docker Engine.
Launching a container on one host, makes the container available to all hosts in
that container network. Another name for this capability is multi-host networking.&lt;/p&gt;

&lt;p&gt;This page explains how to use the &lt;code&gt;engine-discovery&lt;/code&gt; command to enable
multi-host container networks on your UCP installation. You&amp;rsquo;ll do a complete
configuration on all nodes within your UCP deployment.&lt;/p&gt;

&lt;h2 id=&#34;about-container-networks-and-ucp&#34;&gt;About container networks and UCP&lt;/h2&gt;

&lt;p&gt;You create a container network using the Docker Engine client or the UCP
administration console. Container networks are custom networks you create using
the &lt;code&gt;overlay&lt;/code&gt; network plugin driver. You must configure container networking
explicitly on UCP. Once you have your UCP installation running but before you
start using it, you enable container networks.&lt;/p&gt;

&lt;p&gt;Enabling container networking is a process. First, you run the
&lt;code&gt;engine-discovery&lt;/code&gt; subcommand on the node. This subcommand configures the Engine
daemon options (&lt;code&gt;DOCKER_OPTS&lt;/code&gt;) for the cluster key-value store. The options
include the IP address of each UCP controller and replica. Once you have run the
subcommand, you then restart the node&amp;rsquo;s Engine daemon for the changes to take
effect.&lt;/p&gt;

&lt;p&gt;Because the Engine daemon options rely on you already having the IP addresses of
the controller and replicas, you run &lt;code&gt;engine-discovery&lt;/code&gt; after you have installed
these key nodes. You should enable networking on the controller first and then
the replicas. Once these are configured, you run the subcommand on each worker
node.&lt;/p&gt;

&lt;p&gt;After you&amp;rsquo;ve configured discovery, you can create a container through UCP the
application or the Engine CLI. To create a network using the Engine CLI, open a
command line on any UCP node and do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network create -d overlay my-custom-network
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-each-node-host-ip-address&#34;&gt;Get each node host IP address&lt;/h2&gt;

&lt;p&gt;To continue with this procedure, you need to know the host address values you
used on each controller or node. This is the address used with the &lt;code&gt;install&lt;/code&gt; or
&lt;code&gt;join&lt;/code&gt; subcommands to identify a node. Host addresses are used among the UCP
nodes for network communication.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into your UCP dashboard as a user with &lt;code&gt;admin&lt;/code&gt; privileges.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Nodes&lt;/strong&gt; on the dashboard.&lt;/p&gt;

&lt;p&gt;A page listing the installed UCP nodes appears.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/host_ip_address.png&#34; alt=&#34;Nodes page&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the &lt;strong&gt;ADDRESS&lt;/strong&gt; field to record the host IP address for each node.&lt;/p&gt;

&lt;p&gt;Make sure you do not include the port number, just the IP address.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;enable-the-networking-feature&#34;&gt;Enable the networking feature&lt;/h2&gt;

&lt;p&gt;If you followed the prerequisites, you should have a list of the host-address
values you used with &lt;code&gt;install&lt;/code&gt; to create the controller, the replicas, and
&lt;code&gt;join&lt;/code&gt; each node. In this step, you enable the networking feature on all your
controller node, your replicas nodes (if you are using high availability), and
the worker nodes.&lt;/p&gt;

&lt;p&gt;Do this procedure on one node at a time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;begin with the controller&lt;/li&gt;
&lt;li&gt;continue onto doing all replicas&lt;/li&gt;
&lt;li&gt;finish with the worker nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do this procedure on one node at a time because if you restart all the
controller daemons at the same time, you can increase the startup delay. This is
because &lt;code&gt;etcd&lt;/code&gt; has to come up and establish quorum before the daemons can fully
recover.&lt;/p&gt;

&lt;p&gt;To enable the networking feature, do the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into the host running the UCP controller.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the &lt;code&gt;discovery-engine&lt;/code&gt; help.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm docker/ucp engine-discovery --help
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Leave the UCP processes running.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;discovery-engine&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The command syntax is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it --name ucp \
  -v /var/run/docker.sock:/var/run/docker.sock \
  docker/ucp engine-discovery
  --controller &amp;lt;private IP&amp;gt; [--controller &amp;lt;private IP&amp;gt; ]
  --host-address [&amp;lt;private IP&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using high availability, you must provide the controller and all
the replica&amp;rsquo;s by passing multiple &lt;code&gt;--controller&lt;/code&gt; flags. when you configure
network. The command installs discovery on a UCP installation
with a two controllers (a primary and a replica).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it --name ucp \
  -v /var/run/docker.sock:/var/run/docker.sock docker/ucp engine-discovery \
  --controller 192.168.99.106 --controller 192.168.99.116 \
  --host-address 192.168.99.106
  INFO[0000] New configuration established.  Signaling the daemon to load it...
  INFO[0001] Successfully delivered signal to daemon  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;host-address&lt;/code&gt; value is the the external address of the node you&amp;rsquo;re
operating against. This is the address other nodes when communicating with
each other across the communication network.&lt;/p&gt;

&lt;p&gt;If you specify the &lt;code&gt;--host-address&lt;/code&gt; flag without an IP, the command attempts
to discover the address of the current node.  If the command cannot discover
the address, it fails and prompts you to supply it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;FATA[0000] flag needs an argument: -host-address  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart the Engine &lt;code&gt;daemon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Engine &lt;code&gt;daemon&lt;/code&gt; is a OS service process running on each node in your
cluster.  How you restart a service is operating-system dependent. Some
examples appear below but keep in mind that on your system, the restart
operation may differ. Check with your system administrator if you are not
sure how to restart a daemon. Some example restarts include the following,
keep in mind your installation may be different:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Centos/RedHat&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl daemon-reload
$ sudo systemctl restart docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Review the Docker logs to check the restart.&lt;/p&gt;

&lt;p&gt;The logging facilities for the Engine daemon is installation dependent. Some
example review operations include the following, keep in mind your
installation may be different:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo tail -f /var/log/upstart/docker.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Centos/RedHat&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo journalctl -fu docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify that you can create and remove a custom network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create -d overlay my-custom-network
$ docker network ls
$ docker network rm my-custom-network
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Repeat steps 2-6 on the replica nodes in your cluster.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After enabling networking on the controllers and replicas, repeat steps 2-6 on
the remaining nodes in the cluster.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;adding-new-nodes-and-replicas&#34;&gt;Adding new nodes and replicas&lt;/h2&gt;

&lt;p&gt;Once your UCP installation is up and running, you may need to add a new worker
node or a new replica node. If you add a new worker node, you must run
&lt;code&gt;engine-discovery&lt;/code&gt; on the node after you &lt;code&gt;join&lt;/code&gt; it to the cluster. If you need
to add a replica, you&amp;rsquo;ll need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Re-run network configuration process on the controller to add the replica..&lt;/li&gt;
&lt;li&gt;Run network configuration process  on the new replica.&lt;/li&gt;
&lt;li&gt;Run network configuration process again on all your nodes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will update the Engine&amp;rsquo;s &lt;code&gt;daemon&lt;/code&gt; configuration to include the new
&lt;code&gt;replica&lt;/code&gt;. Keep in mind that this process can add downtime to your UCP
production installation. You should plan accordingly.&lt;/p&gt;

&lt;h2 id=&#34;troubleshoot-container-networking&#34;&gt;Troubleshoot container networking&lt;/h2&gt;

&lt;p&gt;This section lists errors you can encounter when working with container networks
and UCP.&lt;/p&gt;

&lt;h3 id=&#34;create-failed-to-parse-pool-request-for-address&#34;&gt;Create: failed to parse pool request for address&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create -d overlay my-custom-network
Error response from daemon: failed to parse pool request for address space &amp;quot;GlobalDefault&amp;quot; pool &amp;quot;&amp;quot; subpool &amp;quot;&amp;quot;: cannot find address space GlobalDefault (most likely the backing datastore is not configured)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you attempt the same operation from UCP&amp;rsquo;s web administration, you receive
the same error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../ucp/images/network_gui_error.png&#34; alt=&#34;Network error&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you have not configured multi-host networking using the &lt;code&gt;engine-discovery&lt;/code&gt;
command, the Docker client returns these errors. Check the Engine daemon
configuration and make sure you have properly configured it.&lt;/p&gt;

&lt;h3 id=&#34;daemon-configuration-errors&#34;&gt;daemon configuration errors&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;engine-discovery&lt;/code&gt; command works by modifying the start configuration for
the Docker daemon. The tool stores the configuration the
&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; file on the node.  To view the configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cat /etc/docker/daemon.json
{
  &amp;quot;cluster-advertise&amp;quot;: &amp;quot;10.0.11.78:12376&amp;quot;,
  &amp;quot;cluster-store&amp;quot;: &amp;quot;etcd://10.0.11.78:12379,10.0.11.149:12379,10.0.26.238:12379&amp;quot;,
  &amp;quot;cluster-store-opts&amp;quot;: {
    &amp;quot;kv.cacertfile&amp;quot;: &amp;quot;/var/lib/docker/discovery_certs/ca.pem&amp;quot;,
    &amp;quot;kv.certfile&amp;quot;: &amp;quot;/var/lib/docker/discovery_certs/cert.pem&amp;quot;,
    &amp;quot;kv.keyfile&amp;quot;: &amp;quot;/var/lib/docker/discovery_certs/key.pem&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have trouble with discovery, try these troubleshooting measures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review the daemon logs to ensure the daemon was started.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;-D&lt;/code&gt; (debug) to the Docker daemon start options.&lt;/li&gt;
&lt;li&gt;Check your Docker daemon configuration to ensure that &lt;code&gt;--cluster-advertise&lt;/code&gt; is set properly.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Check your daemon configuration &lt;code&gt;--cluster-store&lt;/code&gt; options is point to the
key-store &lt;code&gt;etcd://CONTROLLER_PUBLIC_IP_OR_DOMAIN:PORT&lt;/code&gt; on the UCP controller.&lt;/li&gt;
&lt;li&gt;Make sure the controller is accessible over the network, for example &lt;code&gt;ping CONTROLLER_PUBLIC_IP_OR_DOMAIN&lt;/code&gt;.
A ping requires that inbound ICMP requests are allowed on the controller.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stop the daemon and start it manually from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /usr/bin/docker daemon -D --cluster-advertise eth0:12376 --cluster-store etcd://CONTROLLER_PUBLIC_IP_OR_DOMAIN:12379 --cluster-store-opt kv.cacertfile=/var/lib/docker/discovery_certs/ca.pem --cluster-store-opt kv.certfile=/var/lib/docker/discovery_certs/cert.pem --cluster-store-opt kv.keyfile=/var/lib/docker/discovery_certs/key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, you&amp;rsquo;ll need to restart the daemon each time you change the start options.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up high availability</title>
      <link>https://docs.docker.com/v1.10/ucp/understand_ha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/understand_ha/</guid>
      <description>

&lt;h1 id=&#34;set-up-high-availability&#34;&gt;Set up high availability&lt;/h1&gt;

&lt;p&gt;Docker Universal Control Plane is designed for high availability (HA).
When setting up a UCP cluster, you can add additional nodes to serve as
replicas of the controller.&lt;/p&gt;

&lt;p&gt;Adding replica nodes to your cluster allows you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load-balance user requests across the controller and replica nodes,&lt;/li&gt;
&lt;li&gt;Maintain the cluster state in case of failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This page explains some of the components of UCP that provide support for
high availability. It also provides some guidelines on how to set up UCP to
ensure it can handle failures.&lt;/p&gt;

&lt;h2 id=&#34;understand-high-availability-terms-and-containers&#34;&gt;Understand high availability terms and containers&lt;/h2&gt;

&lt;p&gt;A Docker UCP installation is made of several nodes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Controller node: the node that handles user requests,&lt;/li&gt;
&lt;li&gt;Replica nodes: replicas of the controller node, for high-availability,&lt;/li&gt;
&lt;li&gt;Nodes: the nodes that run your containers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;controller&lt;/strong&gt; is the first node added to cluster by running the
 &lt;code&gt;ucp install&lt;/code&gt;. This node runs the following containers:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-kv&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This container runs the key-value store used by UCP. Don&amp;rsquo;t use this key-value store in your applications, since it&amp;rsquo;s for internal use only.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-manager&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This Swarm manager uses the replicated KV store for leader election and cluster membership tracking.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-controller&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This container runs the UCP server, using the replicated KV store for configuration state.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-join&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs the &lt;code&gt;swarm join&lt;/code&gt; command to periodically publish this nodes existence to the KV store. If the node goes down, this publishing stops, and the registration times out, and the node is automatically dropped from the cluster.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-proxy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs a local TLS proxy for the docker socket to enable secure access of the local docker daemon.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-cluster-root-ca&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;These &lt;strong&gt;unreplicated&lt;/strong&gt; containers run the Swarm CA used for admin certificate bundles, and adding new nodes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-client-root-ca&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;These &lt;strong&gt;unreplicated&lt;/strong&gt; containers run the (optional) UCP CA used for signing user bundles.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A &lt;strong&gt;replica node&lt;/strong&gt; is a node you add to the cluster by running the
&lt;code&gt;ucp join --replica&lt;/code&gt; command. These nodes run the following containers:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-kv&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This etcd container runs the replicated KV store.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-manager&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This Swarm manager uses the replicated KV store for leader election and cluster membership tracking.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-controller&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This container runs the UCP server, using the replicated KV store for configuration state.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-join&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs the &lt;code&gt;swarm join&lt;/code&gt; command to periodically publish this nodes existence to the KV store. If the node goes down, this publishing stops, and the registration times out, and the node is automatically dropped from the cluster.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-proxy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs a local TLS proxy for the docker socket to enable secure access of the local docker daemon.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The remaining &lt;strong&gt;non-replica nodes&lt;/strong&gt; provide additional capacity to the cluster,
to run your own containers and applications. They don&amp;rsquo;t contribute to the
high-availability of the UCP cluster. These nodes run the following containers:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-swarm-join&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs the &lt;code&gt;swarm join&lt;/code&gt; command to periodically publish this nodes existence to the KV store. If the node goes down, this publishing stops, and the registration times out, and the node is automatically dropped from the cluster.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ucp-proxy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Runs a local TLS proxy for the docker socket to enable secure access of the local docker daemon.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;size-your-deployment&#34;&gt;Size your deployment&lt;/h2&gt;

&lt;p&gt;To make the cluster tolerant to more failures, add additional replica nodes to
your cluster. For an high-availability deployment of UCP, you should have at
least one controller and two replicas in your cluster.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Controller and replicas&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Failures tolerated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When sizing your cluster, follow these rules of thumb:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t create a cluster with just one controller and one replica. Your cluster
won&amp;rsquo;t tolerate any failures, and it&amp;rsquo;s possible that you experience performance
degradation.&lt;/li&gt;
&lt;li&gt;When a replica fails, the number of failures tolerated by your cluster
decreases. Don&amp;rsquo;t leave that replica offline for long.&lt;/li&gt;
&lt;li&gt;Adding too many replicas to the cluster might also lead to performance
degradation, as each value stored in the key-value store needs to be
replicated across all replicas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;load-balancing-on-ucp&#34;&gt;Load-balancing on UCP&lt;/h2&gt;

&lt;p&gt;At present, UCP does not include a load-balancer. You may configure one your
own. If you do, you can load balance between the primary and replica nodes on
port &lt;code&gt;443&lt;/code&gt; for web access to the system via a single IP/hostname.&lt;/p&gt;

&lt;p&gt;If an external load balancer is not used, system administrators should note the
IP/hostname of the primary and all controller replicas. In this way, an
administrator can access them when needed.&lt;/p&gt;

&lt;h2 id=&#34;backup-policy&#34;&gt;Backup policy&lt;/h2&gt;

&lt;p&gt;UCP configurations are stored using a key-value store that is replicated across
the controller and replica nodes. This makes the cluster tolerant to failures.&lt;/p&gt;

&lt;p&gt;The data of the key-value store and the certificates used for TLS are persisted
using volumes. &lt;a href=&#34;../v1.10/ucp/plan-production-install/#data-volumes-used&#34;&gt;These volumes&lt;/a&gt;
are created when installing UCP on a node, and when joining nodes to a cluster.&lt;/p&gt;

&lt;p&gt;On UCP version 1.0, the CAs present in the controller node are not replicated
on other nodes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swarm CA:

&lt;ul&gt;
&lt;li&gt;Used for admin cert bundle generation,&lt;/li&gt;
&lt;li&gt;Used for adding hosts to the cluster.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UCP CA:

&lt;ul&gt;
&lt;li&gt;Used for user bundle generation,&lt;/li&gt;
&lt;li&gt;Used to sign certs for new replica nodes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the controller node fails, replica nodes will keep the system state and
still be able to handle user requests. However during a controller node failure
it&amp;rsquo;s not possible to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download new certificate bundles for admin and non-admin users. Existing bundles will still work,&lt;/li&gt;
&lt;li&gt;Add more nodes to the cluster. Existing nodes will continue to operate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should keep a backup of these volumes, so that you can restore the CAs used
in the controller node, in case of failure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UCP Key/Value Store Backends</title>
      <link>https://docs.docker.com/v1.10/ucp/kv_store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/kv_store/</guid>
      <description>

&lt;h1 id=&#34;ucp-key-value-store-backend&#34;&gt;UCP Key/Value Store Backend&lt;/h1&gt;

&lt;p&gt;In this release, UCP leverages the &lt;a href=&#34;https://github.com/coreos/etcd/&#34;&gt;etcd&lt;/a&gt; KV
store internally for node discovery and high availability. This use is specific
to UCP. The services you deploy on UCP can use whichever key-store is
appropriate for the service.&lt;/p&gt;

&lt;p&gt;Under normal circumstances, you should not have to access the KV store
directly.  To mitigate unforeseen problems or change advanced settings,
you may be required by Docker support or your SE to change configuration
values or data in the store.&lt;/p&gt;

&lt;p&gt;The following example demonstrates basic &lt;code&gt;curl&lt;/code&gt; usage assuming you
have set up your environment with the downloaded ucp bundle.&lt;/p&gt;

&lt;p&gt;The example below uses the &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; tool to
pretty print the resulting json.  This can be omitted for raw json output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export KV_URL=&amp;quot;https://$(echo $DOCKER_HOST | cut -f3 -d/ | cut -f1 -d:):12379&amp;quot;

curl -s \
    --cert ${DOCKER_CERT_PATH}/cert.pem \
    --key ${DOCKER_CERT_PATH}/key.pem \
    --cacert ${DOCKER_CERT_PATH}/ca.pem \
    ${KV_URL}/v2/keys | jq &amp;quot;.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can browse the UCP keys under &lt;code&gt;/v2/keys/ucp/&lt;/code&gt; and swarm under
&lt;code&gt;/v2/keys/swarm&lt;/code&gt; as well as modify by &lt;code&gt;POST&lt;/code&gt;ing updated values to
workaround problems.  Further documentation for the etcd API is available
at &lt;a href=&#34;https://github.com/coreos/etcd/blob/master/Documentation/api.md&#34;&gt;https://github.com/coreos/etcd/blob/master/Documentation/api.md&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;troubleshooting-with-etcdctl&#34;&gt;Troubleshooting with etcdctl&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ucp-kv&lt;/code&gt; container(s) running on the primary controller (and replicas in an
HA configuration) contain the &lt;code&gt;etcdctl&lt;/code&gt; binary, which can be accessed using
&lt;code&gt;docker exec&lt;/code&gt;.  The examples (and their output) using the tool to perform
various tasks on the &lt;code&gt;etcd&lt;/code&gt; cluster.&lt;/p&gt;

&lt;p&gt;These commands assume you are running directly against the Docker Engine in
question.  If you are running these commands through UCP, you should specify the
node specific container name.&lt;/p&gt;

&lt;p&gt;Check the health of the etcd cluster (on failure it will exit with an error code, and no output)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it ucp-kv etcdctl \
        --endpoint https://127.0.0.1:2379 \
        --ca-file /etc/docker/ssl/ca.pem \
        --cert-file /etc/docker/ssl/cert.pem \
        --key-file /etc/docker/ssl/key.pem \
        cluster-health

member 16c9ae1872e8b1f0 is healthy: got healthy result from https://192.168.122.64:12379
member c5a24cfdb4263e72 is healthy: got healthy result from https://192.168.122.196:12379
member ca3c1bb18f1b30bf is healthy: got healthy result from https://192.168.122.223:12379
cluster is healthy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the current members of the cluster&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it ucp-kv etcdctl \
        --endpoint https://127.0.0.1:2379 \
        --ca-file /etc/docker/ssl/ca.pem \
        --cert-file /etc/docker/ssl/cert.pem \
        --key-file /etc/docker/ssl/key.pem \
        member list

16c9ae1872e8b1f0: name=orca-kv-192.168.122.64 peerURLs=https://192.168.122.64:12380 clientURLs=https://192.168.122.64:12379
c5a24cfdb4263e72: name=orca-kv-192.168.122.196 peerURLs=https://192.168.122.196:12380 clientURLs=https://192.168.122.196:12379
ca3c1bb18f1b30bf: name=orca-kv-192.168.122.223 peerURLs=https://192.168.122.223:12380 clientURLs=https://192.168.122.223:12379
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove a failed member (use the list above first to get the ID)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it ucp-kv etcdctl \
        --endpoint https://127.0.0.1:2379 \
        --ca-file /etc/docker/ssl/ca.pem \
        --cert-file /etc/docker/ssl/cert.pem \
        --key-file /etc/docker/ssl/key.pem \
        member remove c5a24cfdb4263e72

Removed member c5a24cfdb4263e72 from cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show the current value of a key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it ucp-kv etcdctl \
        --endpoint https://127.0.0.1:2379 \
        --ca-file /etc/docker/ssl/ca.pem \
        --cert-file /etc/docker/ssl/cert.pem \
        --key-file /etc/docker/ssl/key.pem \
        ls /docker/swarm/nodes

/docker/swarm/nodes/192.168.122.196:12376
/docker/swarm/nodes/192.168.122.64:12376
/docker/swarm/nodes/192.168.122.223:12376
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;learn-about-the-certificates&#34;&gt;Learn about the certificates&lt;/h3&gt;

&lt;p&gt;The store is configured with mutual TLS to prevent unauthorized access.&lt;/p&gt;

&lt;p&gt;All components in the system that require access to the KV store use
client certificates signed by the Swarm Root CA.  As admin account
certificates are also signed by this Swarm Root CA, administrators can
access the KV store using &lt;code&gt;curl&lt;/code&gt; or other tools, provided the admin&amp;rsquo;s
certificate is used as the client certificate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UCP tool reference</title>
      <link>https://docs.docker.com/v1.10/ucp/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/ucp/reference/</guid>
      <description>

&lt;h1 id=&#34;ucp-tool-reference&#34;&gt;ucp tool Reference&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -it \
    --name ucp \
    -v /var/run/docker.sock:/var/run/docker.sock \
    docker/ucp \
     command [arguments...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The UCP installation consists of using the Docker Engine CLI to run the &lt;code&gt;ucp&lt;/code&gt;
tool. The &lt;code&gt;ucp&lt;/code&gt; tool is an image with subcommands to &lt;code&gt;install&lt;/code&gt; a controller or
&lt;code&gt;join&lt;/code&gt; a node to a UCP controller. The general format of these commands are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Docker client&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;run&lt;/code&gt; command with options&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;ucp&lt;/code&gt; image&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Subcommand with options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;install --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;join --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;run --rm -it&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;docker/ucp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;uninstall --help&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can these two subcommands interactively by passing them the &lt;code&gt;-i&lt;/code&gt;
option or by passing command-line options. This installation guide&amp;rsquo;s steps
assume both are run interactively.&lt;/p&gt;

&lt;p&gt;To list all the possible subcommands, use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -it docker/ucp  --help
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;

&lt;p&gt;This tool has commands to &amp;lsquo;install&amp;rsquo; the UCP initial controller and
&amp;lsquo;join&amp;rsquo; nodes to that controller.  The tool can also &amp;lsquo;uninstall&amp;rsquo; the product.
This tool must run as a container with a well-known name and with the
docker.sock volume mounted, which you can cut-and-paste from the usage
example below.&lt;/p&gt;

&lt;p&gt;This tool generates TLS certificates and attempts to discover the local
systems&amp;rsquo;s hostname and primary IP addresses.  The tool may be unable to discover
your externally visible fully qualified hostname.  You can use  the
&amp;lsquo;--host-address&amp;rsquo; option to specify a hostname or primary IP address
specifically.&lt;/p&gt;

&lt;p&gt;For proper certificate verification, you should pass one or more subject
alternative names (SANs) with &amp;lsquo;--san&amp;rsquo; during &amp;lsquo;install&amp;rsquo; and &amp;lsquo;join&amp;rsquo; that matches
the fully qualified hostname you intend to use to access the given system.&lt;/p&gt;

&lt;p&gt;Additional help is available for each command with the &amp;lsquo;--help&amp;rsquo; option.&lt;/p&gt;

&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-h&lt;/code&gt; Show help
&lt;code&gt;--version&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt;   Print the version&lt;/p&gt;

&lt;h2 id=&#34;subcommands&#34;&gt;Subcommands&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../v1.10/ucp/reference/install/&#34;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Install UCP on this engine.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../v1.10/ucp/reference/join/&#34;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Join this engine to an existing UCP.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../v1.10/ucp/reference/upgrade/&#34;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Upgrade the UCP components on this Engine.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../v1.10/ucp/reference/images/&#34;&gt;&lt;code&gt;images&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Verify the UCP images on this Engine.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../v1.10/ucp/reference/uninstall/&#34;&gt;&lt;code&gt;uninstall&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Uninstall UCP components from this Engine.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../v1.10/ucp/reference/dump-certs/&#34;&gt;&lt;code&gt;dump-certs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dump out the public certs for this UCP controller.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../v1.10/ucp/reference/fingerprint/&#34;&gt;&lt;code&gt;fingerprint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dump out the TLS fingerprint for the UCP controller running on this Engine.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;../v1.10/ucp/reference/help/&#34;&gt;&lt;code&gt;help&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Shows a list of commands or help for one command.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>