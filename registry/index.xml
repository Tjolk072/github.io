<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Registries on Docker Docs</title>
    <link>http://docs.docker.com/registry/</link>
    <description>Recent content in Registries on Docker Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://docs.docker.com/registry/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://docs.docker.com/registry/spec/implementations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/spec/implementations/</guid>
      <description>

&lt;h1 id=&#34;distribution-api-implementations&#34;&gt;Distribution API Implementations&lt;/h1&gt;

&lt;p&gt;This is a list of known implementations of the Distribution API spec.&lt;/p&gt;

&lt;h2 id=&#34;docker-distribution-registry-https-github-com-docker-distribution&#34;&gt;&lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;Docker Distribution Registry&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Docker distribution is the reference implementation of the distribution API
specification. It aims to fully implement the entire specification.&lt;/p&gt;

&lt;h3 id=&#34;releases&#34;&gt;Releases&lt;/h3&gt;

&lt;h4 id=&#34;2-0-1-in-development&#34;&gt;2.0.1 (&lt;em&gt;in development&lt;/em&gt;)&lt;/h4&gt;

&lt;p&gt;Implements API 2.0.1&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Known Issues&lt;/em&gt;
 - No resumable push support
 - Content ranges ignored
 - Blob upload status will always return a starting range of 0&lt;/p&gt;

&lt;h4 id=&#34;2-0-0&#34;&gt;2.0.0&lt;/h4&gt;

&lt;p&gt;Implements API 2.0.0&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Known Issues&lt;/em&gt;
 - No resumable push support
 - No PATCH implementation for blob upload
 - Content ranges ignored&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://docs.docker.com/registry/spec/manifest-v2-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/spec/manifest-v2-1/</guid>
      <description>

&lt;h1 id=&#34;image-manifest-version-2-schema-1&#34;&gt;Image Manifest Version 2, Schema 1&lt;/h1&gt;

&lt;p&gt;This document outlines the format of of the V2 image manifest. The image
manifest described herein was introduced in the Docker daemon in the &lt;a href=&#34;https://github.com/docker/docker/commit/9f482a66ab37ec396ac61ed0c00d59122ac07453&#34;&gt;v1.3.0
release&lt;/a&gt;.
It is a provisional manifest to provide a compatibility with the &lt;a href=&#34;https://github.com/docker/docker/blob/master/image/spec/v1.md&#34;&gt;V1 Image
format&lt;/a&gt;, as the
requirements are defined for the &lt;a href=&#34;https://github.com/docker/distribution/pull/62&#34;&gt;V2 Schema 2
image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Image manifests describe the various constituents of a docker image.  Image
manifests can be serialized to JSON format with the following media types:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Manifest Type&lt;/th&gt;
&lt;th&gt;Media Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;manifest&lt;/td&gt;
&lt;td&gt;&amp;ldquo;application/vnd.docker.distribution.manifest.v1+json&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;signed manifest&lt;/td&gt;
&lt;td&gt;&amp;ldquo;application/vnd.docker.distribution.manifest.v1+prettyjws&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Note that &amp;ldquo;application/json&amp;rdquo; will also be accepted for schema 1.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/9015&#34;&gt;Proposal: JSON Registry API V2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/8093&#34;&gt;Proposal: Provenance step 1 - Transform images for validation and verification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;manifest-field-descriptions&#34;&gt;&lt;em&gt;Manifest&lt;/em&gt; Field Descriptions&lt;/h2&gt;

&lt;p&gt;Manifest provides the base accessible fields for working with V2 image format
 in the registry.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;name is the name of the image&amp;rsquo;s repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;tag is the tag of the image&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;architecture&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;architecture is the host architecture on which this image is intended to
   run.  This is for information purposes and not currently used by the engine&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;fsLayers&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fsLayers is a list of filesystem layer blob sums contained in this image.&lt;/p&gt;

&lt;p&gt;An fsLayer is a struct consisting of the following fields
      - &lt;strong&gt;&lt;code&gt;blobSum&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;digest.Digest&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  blobSum is the digest of the referenced filesystem image layer.  A 
  digest can be a tarsum or sha256 hash.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;history&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;history is a list of unstructured historical data for v1 compatibility. It
   contains ID of the image layer and ID of the layer&amp;rsquo;s parent layers.&lt;/p&gt;

&lt;p&gt;history is a struct consisting of the following fields
   - &lt;strong&gt;&lt;code&gt;v1Compatibility&lt;/code&gt;&lt;/strong&gt; string&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  V1Compatibility is the raw V1 compatibility information. This will 
  contain the JSON object describing the V1 of this image.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;schemaVersion&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;int&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SchemaVersion is the image manifest schema that this image follows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:the length of &lt;code&gt;history&lt;/code&gt; must be equal to the length of &lt;code&gt;fsLayers&lt;/code&gt; and
entries in each are correlated by index.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;signed-manifests&#34;&gt;Signed Manifests&lt;/h2&gt;

&lt;p&gt;Signed manifests provides an envelope for a signed image manifest.  A signed
manifest consists of an image manifest along with an additional field
containing the signature of the manifest.&lt;/p&gt;

&lt;p&gt;The docker client can verify signed manifests and displays a message to the user.&lt;/p&gt;

&lt;h3 id=&#34;signing-manifests&#34;&gt;Signing Manifests&lt;/h3&gt;

&lt;p&gt;Image manifests can be signed in two different ways: with a &lt;em&gt;libtrust&lt;/em&gt; private
 key or an x509 certificate chain.  When signing with an x509 certificate chain,
 the public key of the first element in the chain must be the public key
 corresponding with the sign key.&lt;/p&gt;

&lt;h3 id=&#34;signed-manifest-field-description&#34;&gt;Signed Manifest Field Description&lt;/h3&gt;

&lt;p&gt;Signed manifests include an image manifest and a list of signatures generated
by &lt;em&gt;libtrust&lt;/em&gt;.  A signature consists of the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;header&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href=&#34;http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-31#section-2&#34;&gt;JOSE&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;a href=&#34;http://self-issued.info/docs/draft-ietf-jose-json-web-signature.html&#34;&gt;JSON Web Signature&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;signature&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A signature for the image manifest, signed by a &lt;em&gt;libtrust&lt;/em&gt; private key&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;protected&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The signed protected header&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-manifest&#34;&gt;Example Manifest&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Example showing the official &amp;lsquo;hello-world&amp;rsquo; image manifest.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
   &amp;quot;name&amp;quot;: &amp;quot;hello-world&amp;quot;,
   &amp;quot;tag&amp;quot;: &amp;quot;latest&amp;quot;,
   &amp;quot;architecture&amp;quot;: &amp;quot;amd64&amp;quot;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&amp;quot;
      },
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&amp;quot;
      },
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:cc8567d70002e957612902a8e985ea129d831ebe04057d88fb644857caa45d11&amp;quot;
      },
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&amp;quot;
      }
   ],
   &amp;quot;history&amp;quot;: [
      {
         &amp;quot;v1Compatibility&amp;quot;: &amp;quot;{\&amp;quot;id\&amp;quot;:\&amp;quot;e45a5af57b00862e5ef5782a9925979a02ba2b12dff832fd0991335f4a11e5c5\&amp;quot;,\&amp;quot;parent\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;created\&amp;quot;:\&amp;quot;2014-12-31T22:57:59.178729048Z\&amp;quot;,\&amp;quot;container\&amp;quot;:\&amp;quot;27b45f8fb11795b52e9605b686159729b0d9ca92f76d40fb4f05a62e19c46b4f\&amp;quot;,\&amp;quot;container_config\&amp;quot;:{\&amp;quot;Hostname\&amp;quot;:\&amp;quot;8ce6509d66e2\&amp;quot;,\&amp;quot;Domainname\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;User\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Memory\&amp;quot;:0,\&amp;quot;MemorySwap\&amp;quot;:0,\&amp;quot;CpuShares\&amp;quot;:0,\&amp;quot;Cpuset\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;AttachStdin\&amp;quot;:false,\&amp;quot;AttachStdout\&amp;quot;:false,\&amp;quot;AttachStderr\&amp;quot;:false,\&amp;quot;PortSpecs\&amp;quot;:null,\&amp;quot;ExposedPorts\&amp;quot;:null,\&amp;quot;Tty\&amp;quot;:false,\&amp;quot;OpenStdin\&amp;quot;:false,\&amp;quot;StdinOnce\&amp;quot;:false,\&amp;quot;Env\&amp;quot;:[\&amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&amp;quot;],\&amp;quot;Cmd\&amp;quot;:[\&amp;quot;/bin/sh\&amp;quot;,\&amp;quot;-c\&amp;quot;,\&amp;quot;#(nop) CMD [/hello]\&amp;quot;],\&amp;quot;Image\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;Volumes\&amp;quot;:null,\&amp;quot;WorkingDir\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Entrypoint\&amp;quot;:null,\&amp;quot;NetworkDisabled\&amp;quot;:false,\&amp;quot;MacAddress\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;OnBuild\&amp;quot;:[],\&amp;quot;SecurityOpt\&amp;quot;:null,\&amp;quot;Labels\&amp;quot;:null},\&amp;quot;docker_version\&amp;quot;:\&amp;quot;1.4.1\&amp;quot;,\&amp;quot;config\&amp;quot;:{\&amp;quot;Hostname\&amp;quot;:\&amp;quot;8ce6509d66e2\&amp;quot;,\&amp;quot;Domainname\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;User\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Memory\&amp;quot;:0,\&amp;quot;MemorySwap\&amp;quot;:0,\&amp;quot;CpuShares\&amp;quot;:0,\&amp;quot;Cpuset\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;AttachStdin\&amp;quot;:false,\&amp;quot;AttachStdout\&amp;quot;:false,\&amp;quot;AttachStderr\&amp;quot;:false,\&amp;quot;PortSpecs\&amp;quot;:null,\&amp;quot;ExposedPorts\&amp;quot;:null,\&amp;quot;Tty\&amp;quot;:false,\&amp;quot;OpenStdin\&amp;quot;:false,\&amp;quot;StdinOnce\&amp;quot;:false,\&amp;quot;Env\&amp;quot;:[\&amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&amp;quot;],\&amp;quot;Cmd\&amp;quot;:[\&amp;quot;/hello\&amp;quot;],\&amp;quot;Image\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;Volumes\&amp;quot;:null,\&amp;quot;WorkingDir\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Entrypoint\&amp;quot;:null,\&amp;quot;NetworkDisabled\&amp;quot;:false,\&amp;quot;MacAddress\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;OnBuild\&amp;quot;:[],\&amp;quot;SecurityOpt\&amp;quot;:null,\&amp;quot;Labels\&amp;quot;:null},\&amp;quot;architecture\&amp;quot;:\&amp;quot;amd64\&amp;quot;,\&amp;quot;os\&amp;quot;:\&amp;quot;linux\&amp;quot;,\&amp;quot;Size\&amp;quot;:0}\n&amp;quot;
      },
      {
         &amp;quot;v1Compatibility&amp;quot;: &amp;quot;{\&amp;quot;id\&amp;quot;:\&amp;quot;e45a5af57b00862e5ef5782a9925979a02ba2b12dff832fd0991335f4a11e5c5\&amp;quot;,\&amp;quot;parent\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;created\&amp;quot;:\&amp;quot;2014-12-31T22:57:59.178729048Z\&amp;quot;,\&amp;quot;container\&amp;quot;:\&amp;quot;27b45f8fb11795b52e9605b686159729b0d9ca92f76d40fb4f05a62e19c46b4f\&amp;quot;,\&amp;quot;container_config\&amp;quot;:{\&amp;quot;Hostname\&amp;quot;:\&amp;quot;8ce6509d66e2\&amp;quot;,\&amp;quot;Domainname\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;User\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Memory\&amp;quot;:0,\&amp;quot;MemorySwap\&amp;quot;:0,\&amp;quot;CpuShares\&amp;quot;:0,\&amp;quot;Cpuset\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;AttachStdin\&amp;quot;:false,\&amp;quot;AttachStdout\&amp;quot;:false,\&amp;quot;AttachStderr\&amp;quot;:false,\&amp;quot;PortSpecs\&amp;quot;:null,\&amp;quot;ExposedPorts\&amp;quot;:null,\&amp;quot;Tty\&amp;quot;:false,\&amp;quot;OpenStdin\&amp;quot;:false,\&amp;quot;StdinOnce\&amp;quot;:false,\&amp;quot;Env\&amp;quot;:[\&amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&amp;quot;],\&amp;quot;Cmd\&amp;quot;:[\&amp;quot;/bin/sh\&amp;quot;,\&amp;quot;-c\&amp;quot;,\&amp;quot;#(nop) CMD [/hello]\&amp;quot;],\&amp;quot;Image\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;Volumes\&amp;quot;:null,\&amp;quot;WorkingDir\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Entrypoint\&amp;quot;:null,\&amp;quot;NetworkDisabled\&amp;quot;:false,\&amp;quot;MacAddress\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;OnBuild\&amp;quot;:[],\&amp;quot;SecurityOpt\&amp;quot;:null,\&amp;quot;Labels\&amp;quot;:null},\&amp;quot;docker_version\&amp;quot;:\&amp;quot;1.4.1\&amp;quot;,\&amp;quot;config\&amp;quot;:{\&amp;quot;Hostname\&amp;quot;:\&amp;quot;8ce6509d66e2\&amp;quot;,\&amp;quot;Domainname\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;User\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Memory\&amp;quot;:0,\&amp;quot;MemorySwap\&amp;quot;:0,\&amp;quot;CpuShares\&amp;quot;:0,\&amp;quot;Cpuset\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;AttachStdin\&amp;quot;:false,\&amp;quot;AttachStdout\&amp;quot;:false,\&amp;quot;AttachStderr\&amp;quot;:false,\&amp;quot;PortSpecs\&amp;quot;:null,\&amp;quot;ExposedPorts\&amp;quot;:null,\&amp;quot;Tty\&amp;quot;:false,\&amp;quot;OpenStdin\&amp;quot;:false,\&amp;quot;StdinOnce\&amp;quot;:false,\&amp;quot;Env\&amp;quot;:[\&amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&amp;quot;],\&amp;quot;Cmd\&amp;quot;:[\&amp;quot;/hello\&amp;quot;],\&amp;quot;Image\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;Volumes\&amp;quot;:null,\&amp;quot;WorkingDir\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Entrypoint\&amp;quot;:null,\&amp;quot;NetworkDisabled\&amp;quot;:false,\&amp;quot;MacAddress\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;OnBuild\&amp;quot;:[],\&amp;quot;SecurityOpt\&amp;quot;:null,\&amp;quot;Labels\&amp;quot;:null},\&amp;quot;architecture\&amp;quot;:\&amp;quot;amd64\&amp;quot;,\&amp;quot;os\&amp;quot;:\&amp;quot;linux\&amp;quot;,\&amp;quot;Size\&amp;quot;:0}\n&amp;quot;
      },
   ],
   &amp;quot;schemaVersion&amp;quot;: 1,
   &amp;quot;signatures&amp;quot;: [
      {
         &amp;quot;header&amp;quot;: {
            &amp;quot;jwk&amp;quot;: {
               &amp;quot;crv&amp;quot;: &amp;quot;P-256&amp;quot;,
               &amp;quot;kid&amp;quot;: &amp;quot;OD6I:6DRK:JXEJ:KBM4:255X:NSAA:MUSF:E4VM:ZI6W:CUN2:L4Z6:LSF4&amp;quot;,
               &amp;quot;kty&amp;quot;: &amp;quot;EC&amp;quot;,
               &amp;quot;x&amp;quot;: &amp;quot;3gAwX48IQ5oaYQAYSxor6rYYc_6yjuLCjtQ9LUakg4A&amp;quot;,
               &amp;quot;y&amp;quot;: &amp;quot;t72ge6kIA1XOjqjVoEOiPPAURltJFBMGDSQvEGVB010&amp;quot;
            },
            &amp;quot;alg&amp;quot;: &amp;quot;ES256&amp;quot;
         },
         &amp;quot;signature&amp;quot;: &amp;quot;XREm0L8WNn27Ga_iE_vRnTxVMhhYY0Zst_FfkKopg6gWSoTOZTuW4rK0fg_IqnKkEKlbD83tD46LKEGi5aIVFg&amp;quot;,
         &amp;quot;protected&amp;quot;: &amp;quot;eyJmb3JtYXRMZW5ndGgiOjY2MjgsImZvcm1hdFRhaWwiOiJDbjAiLCJ0aW1lIjoiMjAxNS0wNC0wOFQxODo1Mjo1OVoifQ&amp;quot;
      }
   ]
}
   
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Aliyun OSS storage driver</title>
      <link>http://docs.docker.com/registry/storage-drivers/oss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/storage-drivers/oss/</guid>
      <description>

&lt;h1 id=&#34;aliyun-oss-storage-driver&#34;&gt;Aliyun OSS storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses &lt;a href=&#34;http://www.aliyun.com/product/oss&#34;&gt;Aliyun OSS&lt;/a&gt; for object storage.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;accesskeyid&lt;/code&gt;: Your access key ID.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;accesskeysecret&lt;/code&gt;: Your access key secret.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;region&lt;/code&gt;: The name of the OSS region in which you would like to store objects (for example &lt;code&gt;oss-cn-beijing&lt;/code&gt;). For a list of regions, you can look at &lt;a href=&#34;http://docs.aliyun.com/#/oss/product-documentation/domain-region&#34;&gt;http://docs.aliyun.com/#/oss/product-documentation/domain-region&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;endpoint&lt;/code&gt;: (optional) By default, the endpoint shoulb be &lt;code&gt;&amp;lt;bucket&amp;gt;.&amp;lt;region&amp;gt;.aliyuncs.com&lt;/code&gt; or &lt;code&gt;&amp;lt;bucket&amp;gt;.&amp;lt;region&amp;gt;-internal.aliyuncs.com&lt;/code&gt; (when internal=true). You can change the default endpoint via changing this value.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;internal&lt;/code&gt;: (optional) Using internal endpoint or the public endpoint for OSS access. The default is false. For a list of regions, you can look at &lt;a href=&#34;http://docs.aliyun.com/#/oss/product-documentation/domain-region&#34;&gt;http://docs.aliyun.com/#/oss/product-documentation/domain-region&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;bucket&lt;/code&gt;: The name of your OSS bucket where you wish to store objects (needs to already be created prior to driver initialization).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;encrypt&lt;/code&gt;: (optional) Whether you would like your data encrypted on the server side (defaults to false if not specified).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;secure&lt;/code&gt;: (optional) Whether you would like to transfer data to the bucket over ssl or not. Defaults to false if not specified.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;chunksize&lt;/code&gt;: (optional) The default part size for multipart uploads (performed by WriteStream) to OSS. The default is 10 MB. Keep in mind that the minimum part size for OSS is 5MB. You might experience better performance for larger chunk sizes depending on the speed of your connection to OSS.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rootdirectory&lt;/code&gt;: (optional) The root directory tree in which all registry files will be stored. Defaults to the empty string (bucket root).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Authenticating proxy with apache</title>
      <link>http://docs.docker.com/registry/apache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/apache/</guid>
      <description>

&lt;h1 id=&#34;authenticating-proxy-with-apache&#34;&gt;Authenticating proxy with apache&lt;/h1&gt;

&lt;p&gt;## Use-case&lt;/p&gt;

&lt;p&gt;People already relying on an apache proxy to authenticate their users to other services might want to leverage it and have Registry communications tunneled through the same pipeline.&lt;/p&gt;

&lt;p&gt;Usually, that includes enterprise setups using LDAP/AD on the backend and a SSO mechanism fronting their internal http portal.&lt;/p&gt;

&lt;p&gt;### Alternatives&lt;/p&gt;

&lt;p&gt;If you just want authentication for your registry, and are happy maintaining users access separately, you should really consider sticking with the native &lt;a href=&#34;../registry/deploying/#native-basic-auth&#34;&gt;basic auth registry feature&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;### Solution&lt;/p&gt;

&lt;p&gt;With the method presented here, you implement basic authentication for docker engines in a reverse proxy that sits in front of your registry.&lt;/p&gt;

&lt;p&gt;While we use a simple htpasswd file as an example, any other apache authentication backend should be fairly easy to implement once you are done with the exemple.&lt;/p&gt;

&lt;p&gt;We also implement push restriction (to a limited user group) for the sake of the exemple. Again, you should modify this to fit your mileage.&lt;/p&gt;

&lt;h3 id=&#34;gotchas&#34;&gt;Gotchas&lt;/h3&gt;

&lt;p&gt;While this model gives you the ability to use whatever authentication backend you want through the secondary authentication mechanism implemented inside your proxy, it also requires that you move TLS termination from the Registry to the proxy itself.&lt;/p&gt;

&lt;p&gt;Furthermore, introducing an extra http layer in your communication pipeline will make it more complex to deploy, maintain, and debug, and will possibly create issues.&lt;/p&gt;

&lt;h2 id=&#34;setting-things-up&#34;&gt;Setting things up&lt;/h2&gt;

&lt;p&gt;Read again &lt;a href=&#34;../registry/recipes/#requirements&#34;&gt;the requirements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ready?&lt;/p&gt;

&lt;p&gt;Run the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p auth
mkdir -p data

# This is the main apache configuration you will use
cat &amp;lt;&amp;lt;EOF &amp;gt; auth/httpd.conf
LoadModule headers_module modules/mod_headers.so

LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_core_module modules/mod_authn_core.so
LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule access_compat_module modules/mod_access_compat.so

LoadModule log_config_module modules/mod_log_config.so

LoadModule ssl_module modules/mod_ssl.so

LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so

LoadModule unixd_module modules/mod_unixd.so

&amp;lt;IfModule ssl_module&amp;gt;
    SSLRandomSeed startup builtin
    SSLRandomSeed connect builtin
&amp;lt;/IfModule&amp;gt;

&amp;lt;IfModule unixd_module&amp;gt;
    User daemon
    Group daemon
&amp;lt;/IfModule&amp;gt;

ServerAdmin you@example.com

ErrorLog /proc/self/fd/2

LogLevel warn

&amp;lt;IfModule log_config_module&amp;gt;
    LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined
    LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b&amp;quot; common

    &amp;lt;IfModule logio_module&amp;gt;
      LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot; %I %O&amp;quot; combinedio
    &amp;lt;/IfModule&amp;gt;

    CustomLog /proc/self/fd/1 common
&amp;lt;/IfModule&amp;gt;

ServerRoot &amp;quot;/usr/local/apache2&amp;quot;

Listen 5043

&amp;lt;Directory /&amp;gt;
    AllowOverride none
    Require all denied
&amp;lt;/Directory&amp;gt;

&amp;lt;VirtualHost *:5043&amp;gt;

  ServerName myregistrydomain.com

  SSLEngine on
  SSLCertificateFile /usr/local/apache2/conf/domain.crt
  SSLCertificateKeyFile /usr/local/apache2/conf/domain.key

  ## SSL settings recommandation from: https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html
  # Anti CRIME
  SSLCompression off

  # POODLE and other stuff
  SSLProtocol all -SSLv2 -SSLv3 -TLSv1

  # Secure cypher suites
  SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
  SSLHonorCipherOrder on

  Header always set &amp;quot;Docker-Distribution-Api-Version&amp;quot; &amp;quot;registry/2.0&amp;quot;
  Header onsuccess set &amp;quot;Docker-Distribution-Api-Version&amp;quot; &amp;quot;registry/2.0&amp;quot;
  RequestHeader set X-Forwarded-Proto &amp;quot;https&amp;quot;

  ProxyRequests     off
  ProxyPreserveHost on

  # no proxy for /error/ (Apache HTTPd errors messages)
  ProxyPass /error/ !

  ProxyPass        /v2 http://registry:5000/v2
  ProxyPassReverse /v2 http://registry:5000/v2

  &amp;lt;Location /v2&amp;gt;
    Order deny,allow
    Allow from all
    AuthName &amp;quot;Registry Authentication&amp;quot;
    AuthType basic
    AuthUserFile &amp;quot;/usr/local/apache2/conf/httpd.htpasswd&amp;quot;
    AuthGroupFile &amp;quot;/usr/local/apache2/conf/httpd.groups&amp;quot;

    # Read access to authentified users
    &amp;lt;Limit GET HEAD&amp;gt;
      Require valid-user
    &amp;lt;/Limit&amp;gt;

    # Write access to docker-deployer only
    &amp;lt;Limit POST PUT DELETE PATCH&amp;gt;
      Require group pusher
    &amp;lt;/Limit&amp;gt;

  &amp;lt;/Location&amp;gt;

&amp;lt;/VirtualHost&amp;gt;
EOF

# Now, create a password file for &amp;quot;testuser&amp;quot; and &amp;quot;testpassword&amp;quot;
docker run --entrypoint htpasswd httpd:2.4 -Bbn testuser testpassword &amp;gt; auth/httpd.htpasswd
# Create another one for &amp;quot;testuserpush&amp;quot; and &amp;quot;testpasswordpush&amp;quot;
docker run --entrypoint htpasswd httpd:2.4 -Bbn testuserpush testpasswordpush &amp;gt;&amp;gt; auth/httpd.htpasswd

# Create your group file
echo &amp;quot;pusher: testuserpush&amp;quot; &amp;gt; auth/httpd.groups

# Copy over your certificate files
cp domain.crt auth
cp domain.key auth

# Now create your compose file

cat &amp;lt;&amp;lt;EOF &amp;gt; docker-compose.yml
apache:
  image: &amp;quot;httpd:2.4&amp;quot;
  hostname: myregistrydomain.com
  ports:
    - 5043:5043
  links:
    - registry:registry
  volumes:
    - `pwd`/auth:/usr/local/apache2/conf

registry:
  image: registry:2
  ports:
    - 127.0.0.1:5000:5000
  volumes:
    - `pwd`/data:/var/lib/registry

EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;starting-and-stopping&#34;&gt;Starting and stopping&lt;/h2&gt;

&lt;p&gt;Now, start your stack:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login with a &amp;ldquo;push&amp;rdquo; authorized user (using &lt;code&gt;testuserpush&lt;/code&gt; and &lt;code&gt;testpasswordpush&lt;/code&gt;), then tag and push your first image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker login myregistrydomain.com:5043
docker tag ubuntu myregistrydomain.com:5043/test
docker push myregistrydomain.com:5043/test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, login with a &amp;ldquo;pull-only&amp;rdquo; user (using &lt;code&gt;testuser&lt;/code&gt; and &lt;code&gt;testpassword&lt;/code&gt;), then pull back the image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker login myregistrydomain.com:5043
docker pull myregistrydomain.com:5043/test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify that the &amp;ldquo;pull-only&amp;rdquo; can NOT push:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker push myregistrydomain.com:5043/test
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Authenticating proxy with nginx</title>
      <link>http://docs.docker.com/registry/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/nginx/</guid>
      <description>

&lt;h1 id=&#34;authenticating-proxy-with-nginx&#34;&gt;Authenticating proxy with nginx&lt;/h1&gt;

&lt;p&gt;## Use-case&lt;/p&gt;

&lt;p&gt;People already relying on a nginx proxy to authenticate their users to other services might want to leverage it and have Registry communications tunneled through the same pipeline.&lt;/p&gt;

&lt;p&gt;Usually, that includes enterprise setups using LDAP/AD on the backend and a SSO mechanism fronting their internal http portal.&lt;/p&gt;

&lt;p&gt;### Alternatives&lt;/p&gt;

&lt;p&gt;If you just want authentication for your registry, and are happy maintaining users access separately, you should really consider sticking with the native &lt;a href=&#34;../registry/deploying/#native-basic-auth&#34;&gt;basic auth registry feature&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;### Solution&lt;/p&gt;

&lt;p&gt;With the method presented here, you implement basic authentication for docker engines in a reverse proxy that sits in front of your registry.&lt;/p&gt;

&lt;p&gt;While we use a simple htpasswd file as an example, any other nginx authentication backend should be fairly easy to implement once you are done with the example.&lt;/p&gt;

&lt;p&gt;We also implement push restriction (to a limited user group) for the sake of the example. Again, you should modify this to fit your mileage.&lt;/p&gt;

&lt;h3 id=&#34;gotchas&#34;&gt;Gotchas&lt;/h3&gt;

&lt;p&gt;While this model gives you the ability to use whatever authentication backend you want through the secondary authentication mechanism implemented inside your proxy, it also requires that you move TLS termination from the Registry to the proxy itself.&lt;/p&gt;

&lt;p&gt;Furthermore, introducing an extra http layer in your communication pipeline will make it more complex to deploy, maintain, and debug, and will possibly create issues. Make sure the extra complexity is required.&lt;/p&gt;

&lt;p&gt;For instance, Amazon&amp;rsquo;s Elastic Load Balancer (ELB) in HTTPS mode already sets the following client header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X-Real-IP
X-Forwarded-For
X-Forwarded-Proto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if you have an nginx sitting behind it, should remove these lines from the example config below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X-Real-IP         $remote_addr; # pass on real client&#39;s IP
X-Forwarded-For   $proxy_add_x_forwarded_for;
X-Forwarded-Proto $scheme;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise nginx will reset the ELB&amp;rsquo;s values, and the requests will not be routed properly. For more information, see &lt;a href=&#34;https://github.com/docker/distribution/issues/970&#34;&gt;#970&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-things-up&#34;&gt;Setting things up&lt;/h2&gt;

&lt;p&gt;Read again &lt;a href=&#34;../registry/recipes/#requirements&#34;&gt;the requirements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ready?&lt;/p&gt;

&lt;p&gt;Run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p auth
mkdir -p data

# This is the main nginx configuration you will use
cat &amp;lt;&amp;lt;EOF &amp;gt; auth/nginx.conf
upstream docker-registry {
  server registry:5000;
}

## Set a variable to help us decide if we need to add the
## &#39;Docker-Distribution-Api-Version&#39; header.
## The registry always sets this header.
## In the case of nginx performing auth, the header will be unset
## since nginx is auth-ing before proxying.
map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
  &#39;registry/2.0&#39; &#39;&#39;;
  default registry/2.0;
}

server {
  listen 443 ssl;
  server_name myregistrydomain.com;

  # SSL
  ssl_certificate /etc/nginx/conf.d/domain.crt;
  ssl_certificate_key /etc/nginx/conf.d/domain.key;

  # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
  ssl_protocols TLSv1.1 TLSv1.2;
  ssl_ciphers &#39;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&#39;;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;

  # disable any limits to avoid HTTP 413 for large image uploads
  client_max_body_size 0;

  # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
  chunked_transfer_encoding on;

  location /v2/ {
    # Do not allow connections from docker 1.5 and earlier
    # docker pre-1.6.0 did not properly set the user agent on ping, catch &amp;quot;Go *&amp;quot; user agents
    if (\$http_user_agent ~ &amp;quot;^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*\$&amp;quot; ) {
      return 404;
    }

    # To add basic authentication to v2 use auth_basic setting.
    auth_basic &amp;quot;Registry realm&amp;quot;;
    auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;

    ## If $docker_distribution_api_version is empty, the header will not be added.
    ## See the map directive above where this variable is defined.
    add_header &#39;Docker-Distribution-Api-Version&#39; $docker_distribution_api_version always;

    proxy_pass                          http://docker-registry;
    proxy_set_header  Host              \$http_host;   # required for docker client&#39;s sake
    proxy_set_header  X-Real-IP         \$remote_addr; # pass on real client&#39;s IP
    proxy_set_header  X-Forwarded-For   \$proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto \$scheme;
    proxy_read_timeout                  900;
  }
}
EOF

# Now, create a password file for &amp;quot;testuser&amp;quot; and &amp;quot;testpassword&amp;quot;
docker run --entrypoint htpasswd httpd:2.4 -bn testuser testpassword &amp;gt; auth/nginx.htpasswd

# Copy over your certificate files
cp domain.crt auth
cp domain.key auth

# Now create your compose file

cat &amp;lt;&amp;lt;EOF &amp;gt; docker-compose.yml
nginx:
  image: &amp;quot;nginx:1.9&amp;quot;
  ports:
    - 5043:443
  links:
    - registry:registry
  volumes:
    - `pwd`/auth/:/etc/nginx/conf.d

registry:
  image: registry:2
  ports:
    - 127.0.0.1:5000:5000
  volumes:
    - `pwd`/data:/var/lib/registry
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;starting-and-stopping&#34;&gt;Starting and stopping&lt;/h2&gt;

&lt;p&gt;Now, start your stack:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login with a &amp;ldquo;push&amp;rdquo; authorized user (using &lt;code&gt;testuserpush&lt;/code&gt; and &lt;code&gt;testpasswordpush&lt;/code&gt;), then tag and push your first image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker login myregistrydomain.com:5043
docker tag ubuntu myregistrydomain.com:5043/test
docker push myregistrydomain.com:5043/test
docker pull myregistrydomain.com:5043/test
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Build instructions</title>
      <link>http://docs.docker.com/registry/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/building/</guid>
      <description>

&lt;p&gt;# Building the registry source&lt;/p&gt;

&lt;h2 id=&#34;use-case&#34;&gt;Use-case&lt;/h2&gt;

&lt;p&gt;This is useful if you intend to actively work on the registry.&lt;/p&gt;

&lt;p&gt;### Alternatives&lt;/p&gt;

&lt;p&gt;Most people should use the &lt;a href=&#34;https://hub.docker.com/r/library/registry/&#34;&gt;official Registry docker image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;People looking for advanced operational use cases might consider rolling their own image with a custom Dockerfile inheriting &lt;code&gt;FROM registry:2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;OS X users who want to run natively can do so following &lt;a href=&#34;../registry/osx-setup-guide/&#34;&gt;the instructions here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;gotchas&#34;&gt;Gotchas&lt;/h3&gt;

&lt;p&gt;You are expected to know your way around with go &amp;amp; git.&lt;/p&gt;

&lt;p&gt;If you are a casual user with no development experience, and no preliminary knowledge of go, building from source is probably not a good solution for you.&lt;/p&gt;

&lt;h2 id=&#34;build-the-development-environment&#34;&gt;Build the development environment&lt;/h2&gt;

&lt;p&gt;The first prerequisite of properly building distribution targets is to have a Go
development environment setup. Please follow &lt;a href=&#34;https://golang.org/doc/code.html&#34;&gt;How to Write Go Code&lt;/a&gt;
for proper setup. If done correctly, you should have a GOROOT and GOPATH set in the
environment.&lt;/p&gt;

&lt;p&gt;If a Go development environment is setup, one can use &lt;code&gt;go get&lt;/code&gt; to install the
&lt;code&gt;registry&lt;/code&gt; command from the current latest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/docker/distribution/cmd/registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above will install the source repository into the &lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now create the directory for the registry data (this might require you to set permissions properly)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /var/lib/registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; or alternatively &lt;code&gt;export REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/somewhere&lt;/code&gt; if you want to store data into another location.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;registry&lt;/code&gt;
binary can then be run with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ $GOPATH/bin/registry --version
$GOPATH/bin/registry github.com/docker/distribution v2.0.0-alpha.1+unknown
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While you do not need to use &lt;code&gt;go get&lt;/code&gt; to checkout the distribution
project, for these build instructions to work, the project must be checked
out in the correct location in the &lt;code&gt;GOPATH&lt;/code&gt;. This should almost always be
&lt;code&gt;$GOPATH/src/github.com/docker/distribution&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The registry can be run with the default config using the following
incantation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ $GOPATH/bin/registry $GOPATH/src/github.com/docker/distribution/cmd/registry/config-example.yml
INFO[0000] endpoint local-5003 disabled, skipping        app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown
INFO[0000] endpoint local-8083 disabled, skipping        app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown
INFO[0000] listening on :5000                            app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown
INFO[0000] debug server listening localhost:5001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it is working, one should see the above log messages.&lt;/p&gt;

&lt;h3 id=&#34;repeatable-builds&#34;&gt;Repeatable Builds&lt;/h3&gt;

&lt;p&gt;For the full development experience, one should &lt;code&gt;cd&lt;/code&gt; into
&lt;code&gt;$GOPATH/src/github.com/docker/distribution&lt;/code&gt;. From there, the regular &lt;code&gt;go&lt;/code&gt;
commands, such as &lt;code&gt;go test&lt;/code&gt;, should work per package (please see
&lt;a href=&#34;#developing&#34;&gt;Developing&lt;/a&gt; if they don&amp;rsquo;t work).&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Makefile&lt;/code&gt; has been provided as a convenience to support repeatable builds.
Please install the following into &lt;code&gt;GOPATH&lt;/code&gt; for it to work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/tools/godep github.com/golang/lint/golint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;TODO(stevvooe):&lt;/strong&gt; Add a &lt;code&gt;make setup&lt;/code&gt; command to Makefile to run this. Have to think about how to interact with Godeps properly.&lt;/p&gt;

&lt;p&gt;Once these commands are available in the &lt;code&gt;GOPATH&lt;/code&gt;, run &lt;code&gt;make&lt;/code&gt; to get a full
build:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ GOPATH=`godep path`:$GOPATH make
+ clean
+ fmt
+ vet
+ lint
+ build
github.com/docker/docker/vendor/src/code.google.com/p/go/src/pkg/archive/tar
github.com/Sirupsen/logrus
github.com/docker/libtrust
...
github.com/yvasiyarov/gorelic
github.com/docker/distribution/registry/handlers
github.com/docker/distribution/cmd/registry
+ test
...
ok    github.com/docker/distribution/digest 7.875s
ok    github.com/docker/distribution/manifest 0.028s
ok    github.com/docker/distribution/notifications  17.322s
?     github.com/docker/distribution/registry [no test files]
ok    github.com/docker/distribution/registry/api/v2  0.101s
?     github.com/docker/distribution/registry/auth  [no test files]
ok    github.com/docker/distribution/registry/auth/silly  0.011s
...
+ /Users/sday/go/src/github.com/docker/distribution/bin/registry
+ /Users/sday/go/src/github.com/docker/distribution/bin/registry-api-descriptor-template
+ binaries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above provides a repeatable build using the contents of the vendored
Godeps directory. This includes formatting, vetting, linting, building,
testing and generating tagged binaries. We can verify this worked by running
the registry binary generated in the &amp;ldquo;./bin&amp;rdquo; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./bin/registry -version
./bin/registry github.com/docker/distribution v2.0.0-alpha.2-80-g16d8b2c.m
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;developing&#34;&gt;Developing&lt;/h3&gt;

&lt;p&gt;The above approaches are helpful for small experimentation. If more complex
tasks are at hand, it is recommended to employ the full power of &lt;code&gt;godep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Makefile is designed to have its &lt;code&gt;GOPATH&lt;/code&gt; defined externally. This allows
one to experiment with various development environment setups. This is
primarily useful when testing upstream bugfixes, by modifying local code. This
can be demonstrated using &lt;code&gt;godep&lt;/code&gt; to migrate the &lt;code&gt;GOPATH&lt;/code&gt; to use the specified
dependencies. The &lt;code&gt;GOPATH&lt;/code&gt; can be migrated to the current package versions
declared in &lt;code&gt;Godeps&lt;/code&gt; with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;godep restore
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This command will checkout versions of the code specified in
Godeps/Godeps.json, modifying the contents of &lt;code&gt;GOPATH&lt;/code&gt;. If this is
undesired, it is recommended to create a workspace devoted to work on the
&lt;em&gt;Distribution&lt;/em&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With a successful run of the above command, one can now use &lt;code&gt;make&lt;/code&gt; without
specifying the &lt;code&gt;GOPATH&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that is successful, standard &lt;code&gt;go&lt;/code&gt; commands, such as &lt;code&gt;go test&lt;/code&gt; should work,
per package, without issue.&lt;/p&gt;

&lt;h3 id=&#34;optional-build-tags&#34;&gt;Optional build tags&lt;/h3&gt;

&lt;p&gt;Optional &lt;a href=&#34;http://golang.org/pkg/go/build/&#34;&gt;build tags&lt;/a&gt; can be provided using
the environment variable &lt;code&gt;DOCKER_BUILDTAGS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To enable the &lt;a href=&#34;../registry/storage-drivers/rados/&#34;&gt;Ceph RADOS storage driver&lt;/a&gt;
(librados-dev and librbd-dev will be required to build the bindings):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_BUILDTAGS=&#39;include_rados&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ceph RADOS storage driver</title>
      <link>http://docs.docker.com/registry/storage-drivers/rados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/storage-drivers/rados/</guid>
      <description>

&lt;h1 id=&#34;ceph-rados-storage-driver&#34;&gt;Ceph RADOS storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses
&lt;a href=&#34;http://ceph.com/docs/master/rados/&#34;&gt;Ceph RADOS Object Storage&lt;/a&gt; for storage backend.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;The following parameters must be used to configure the storage driver
(case-sensitive):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;poolname&lt;/code&gt;: Name of the Ceph pool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; &lt;em&gt;optional&lt;/em&gt;: The user to connect as (i.e. admin, not client.admin)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunksize&lt;/code&gt; &lt;em&gt;optional&lt;/em&gt;: Size of the written RADOS objects. Default value is
4MB (4194304).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This drivers loads the &lt;a href=&#34;http://ceph.com/docs/master/rados/configuration/ceph-conf/&#34;&gt;Ceph client configuration&lt;/a&gt; from the
following regular paths (the first found is used):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$CEPH_CONF&lt;/code&gt; (environment variable)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ceph/ceph.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ceph/config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ceph.conf&lt;/code&gt; (in the current working directory)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;developing&#34;&gt;Developing&lt;/h2&gt;

&lt;p&gt;To include this driver when building Docker Distribution, use the build tag
&lt;code&gt;include_rados&lt;/code&gt;. Please see the &lt;a href=&#34;https://github.com/docker/distribution/blob/master/docs/building.md#optional-build-tags&#34;&gt;building documentation&lt;/a&gt; for details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring a registry</title>
      <link>http://docs.docker.com/registry/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/configuration/</guid>
      <description>

&lt;h1 id=&#34;registry-configuration-reference&#34;&gt;Registry Configuration Reference&lt;/h1&gt;

&lt;p&gt;The Registry configuration is based on a YAML file, detailed below. While it comes with sane default values out of the box, you are heavily encouraged to review it exhaustively before moving your systems to production.&lt;/p&gt;

&lt;h2 id=&#34;override-specific-configuration-options&#34;&gt;Override specific configuration options&lt;/h2&gt;

&lt;p&gt;In a typical setup where you run your Registry from the official image, you can specify a configuration variable from the environment by passing &lt;code&gt;-e&lt;/code&gt; arguments to your &lt;code&gt;docker run&lt;/code&gt; stanza, or from within a Dockerfile using the &lt;code&gt;ENV&lt;/code&gt; instruction.&lt;/p&gt;

&lt;p&gt;To override a configuration option, create an environment variable named
&lt;code&gt;REGISTRY_variable&lt;/code&gt; where *&lt;code&gt;variable&lt;/code&gt;* is the name of the configuration option
and the &lt;code&gt;_&lt;/code&gt; (underscore) represents indention levels. For example, you can
configure the &lt;code&gt;rootdirectory&lt;/code&gt; of the &lt;code&gt;filesystem&lt;/code&gt; storage backend:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;storage:
  filesystem:
    rootdirectory: /var/lib/registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To override this value, set an environment variable like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/somewhere
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This variable overrides the &lt;code&gt;/var/lib/registry&lt;/code&gt; value to the &lt;code&gt;/somewhere&lt;/code&gt;
directory.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: It is highly recommended to create a base configuration file with which environment variables can be used to tweak individual values.  Overriding configuration sections with environment variables is not recommended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;overriding-the-entire-configuration-file&#34;&gt;Overriding the entire configuration file&lt;/h2&gt;

&lt;p&gt;If the default configuration is not a sound basis for your usage, or if you are having issues overriding keys from the environment, you can specify an alternate YAML configuration file by mounting it as a volume in the container.&lt;/p&gt;

&lt;p&gt;Typically, create a new configuration file from scratch, and call it &lt;code&gt;config.yml&lt;/code&gt;, then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 5000:5000 --restart=always --name registry \
  -v `pwd`/config.yml:/etc/docker/registry/config.yml \
  registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can (and probably should) use &lt;a href=&#34;https://github.com/docker/distribution/blob/master/cmd/registry/config-example.yml&#34;&gt;this as a starting point&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;list-of-configuration-options&#34;&gt;List of configuration options&lt;/h2&gt;

&lt;p&gt;This section lists all the registry configuration options. Some options in
the list are mutually exclusive. So, make sure to read the detailed reference
information about each option that appears later in this page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: 0.1
log:
  level: debug
  formatter: text
  fields:
    service: registry
    environment: staging
  hooks:
    - type: mail
      disabled: true
      levels:
        - panic
      options:
        smtp:
          addr: mail.example.com:25
          username: mailuser
          password: password
          insecure: true
        from: sender@example.com
        to:
          - errors@example.com
loglevel: debug # deprecated: use &amp;quot;log&amp;quot;
storage:
  filesystem:
    rootdirectory: /var/lib/registry
  azure:
    accountname: accountname
    accountkey: base64encodedaccountkey
    container: containername
  gcs:
    bucket: bucketname
    keyfile: /path/to/keyfile
    rootdirectory: /gcs/object/name/prefix
  s3:
    accesskey: awsaccesskey
    secretkey: awssecretkey
    region: us-west-1
    bucket: bucketname
    encrypt: true
    secure: true
    v4auth: true
    chunksize: 5242880
    rootdirectory: /s3/object/name/prefix
  rados:
    poolname: radospool
    username: radosuser
    chunksize: 4194304
  swift:
    username: username
    password: password
    authurl: https://storage.myprovider.com/auth/v1.0 or https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth
    tenant: tenantname
    tenantid: tenantid
    domain: domain name for Openstack Identity v3 API
    domainid: domain id for Openstack Identity v3 API
    insecureskipverify: true
    region: fr
    container: containername
    rootdirectory: /swift/object/name/prefix
  delete:
    enabled: false
  redirect:
    disable: false
  cache:
    blobdescriptor: redis
  maintenance:
    uploadpurging:
      enabled: true
      age: 168h
      interval: 24h
      dryrun: false
    readonly:
      enabled: false
auth:
  silly:
    realm: silly-realm
    service: silly-service
  token:
    realm: token-realm
    service: token-service
    issuer: registry-token-issuer
    rootcertbundle: /root/certs/bundle
  htpasswd:
    realm: basic-realm
    path: /path/to/htpasswd
middleware:
  registry:
    - name: ARegistryMiddleware
      options:
        foo: bar
  repository:
    - name: ARepositoryMiddleware
      options:
        foo: bar
  storage:
    - name: cloudfront
      options:
        baseurl: https://my.cloudfronted.domain.com/
        privatekey: /path/to/pem
        keypairid: cloudfrontkeypairid
        duration: 3000
reporting:
  bugsnag:
    apikey: bugsnagapikey
    releasestage: bugsnagreleasestage
    endpoint: bugsnagendpoint
  newrelic:
    licensekey: newreliclicensekey
    name: newrelicname
    verbose: true
http:
  addr: localhost:5000
  prefix: /my/nested/registry/
  host: https://myregistryaddress.org:5000
  secret: asecretforlocaldevelopment
  tls:
    certificate: /path/to/x509/public
    key: /path/to/x509/private
    clientcas:
      - /path/to/ca.pem
      - /path/to/another/ca.pem
  debug:
    addr: localhost:5001
  headers:
    X-Content-Type-Options: [nosniff]
notifications:
  endpoints:
    - name: alistener
      disabled: false
      url: https://my.listener.com/event
      headers: &amp;lt;http.Header&amp;gt;
      timeout: 500
      threshold: 5
      backoff: 1000
redis:
  addr: localhost:6379
  password: asecret
  db: 0
  dialtimeout: 10ms
  readtimeout: 10ms
  writetimeout: 10ms
  pool:
    maxidle: 16
    maxactive: 64
    idletimeout: 300s
health:
  storagedriver:
    enabled: true
    interval: 10s
    threshold: 3
  file:
    - file: /path/to/checked/file
      interval: 10s
  http:
    - uri: http://server.to.check/must/return/200
      headers:
        Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]
      statuscode: 200
      timeout: 3s
      interval: 10s
      threshold: 3
  tcp:
    - addr: redis-server.domain.com:6379
      timeout: 3s
      interval: 10s
      threshold: 3
proxy:
  remoteurl: https://registry-1.docker.io
  username: [username]
  password: [password]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some instances a configuration option is &lt;strong&gt;optional&lt;/strong&gt; but it contains child
options marked as &lt;strong&gt;required&lt;/strong&gt;. This indicates that you can omit the parent with
all its children. However, if the parent is included, you must also include all
the children marked &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;version&#34;&gt;version&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;version: 0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;version&lt;/code&gt; option is &lt;strong&gt;required&lt;/strong&gt;. It specifies the configuration&amp;rsquo;s version.
It is expected to remain a top-level field, to allow for a consistent version
check before parsing the remainder of the configuration file.&lt;/p&gt;

&lt;h2 id=&#34;log&#34;&gt;log&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;log&lt;/code&gt; subsection configures the behavior of the logging system. The logging
system outputs everything to stdout. You can adjust the granularity and format
with this configuration section.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;log:
  level: debug
  formatter: text
  fields:
    service: registry
    environment: staging
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;level&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Sets the sensitivity of logging output. Permitted values are
      &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt; and
      &lt;code&gt;debug&lt;/code&gt;. The default is &lt;code&gt;info&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;formatter&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      This selects the format of logging output. The format primarily affects how keyed
      attributes for a log line are encoded. Options are &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt; or
      &lt;code&gt;logstash&lt;/code&gt;. The default is &lt;code&gt;text&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;fields&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      A map of field names to values. These are added to every log line for
      the context. This is useful for identifying log messages source after
      being mixed in other systems.
    &lt;/td&gt;
&lt;/table&gt;

&lt;h2 id=&#34;hooks&#34;&gt;hooks&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hooks:
  - type: mail
    levels:
      - panic
    options:
      smtp:
        addr: smtp.sendhost.com:25
        username: sendername
        password: password
        insecure: true
      from: name@sendhost.com
      to:
        - name@receivehost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;hooks&lt;/code&gt; subsection configures the logging hooks&amp;rsquo; behavior. This subsection
includes a sequence handler which you can use for sending mail, for example.
Refer to &lt;code&gt;loglevel&lt;/code&gt; to configure the level of messages printed.&lt;/p&gt;

&lt;h2 id=&#34;loglevel&#34;&gt;loglevel&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DEPRECATED:&lt;/strong&gt; Please use &lt;a href=&#34;#log&#34;&gt;log&lt;/a&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;loglevel: debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Permitted values are &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt; and &lt;code&gt;debug&lt;/code&gt;. The default is
&lt;code&gt;info&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;storage&#34;&gt;storage&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;storage:
  filesystem:
    rootdirectory: /var/lib/registry
  azure:
    accountname: accountname
    accountkey: base64encodedaccountkey
    container: containername
  gcs:
    bucket: bucketname
    keyfile: /path/to/keyfile
    rootdirectory: /gcs/object/name/prefix
  s3:
    accesskey: awsaccesskey
    secretkey: awssecretkey
    region: us-west-1
    bucket: bucketname
    encrypt: true
    secure: true
    v4auth: true
    chunksize: 5242880
    rootdirectory: /s3/object/name/prefix
  rados:
    poolname: radospool
    username: radosuser
    chunksize: 4194304
  swift:
    username: username
    password: password
    authurl: https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth
    tenant: tenantname
    tenantid: tenantid
    domain: domain name for Openstack Identity v3 API
    domainid: domain id for Openstack Identity v3 API
    insecureskipverify: true
    region: fr
    container: containername
    rootdirectory: /swift/object/name/prefix
  delete:
    enabled: false
  cache:
    blobdescriptor: inmemory
  maintenance:
    uploadpurging:
      enabled: true
      age: 168h
      interval: 24h
      dryrun: false
  redirect:
    disable: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The storage option is &lt;strong&gt;required&lt;/strong&gt; and defines which storage backend is in use.
You must configure one backend; if you configure more, the registry returns an error.&lt;/p&gt;

&lt;p&gt;If you are deploying a registry on Windows, be aware that a Windows volume mounted from the host is not recommended. Instead, you can use a S3, or Azure, backing data-store. If you do use a Windows volume, you must ensure that the &lt;code&gt;PATH&lt;/code&gt; to the mount point is within Windows&amp;rsquo; &lt;code&gt;MAX_PATH&lt;/code&gt; limits (typically 255 characters). Failure to do so can result in the following error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /XXX protocol error and your registry will not function properly.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete&#34;&gt;delete&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;delete&lt;/code&gt; subsection to enable the deletion of image blobs and manifests
by digest. It defaults to false, but it can be enabled by writing the following
on the configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete:
  enabled: true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cache&#34;&gt;cache&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;cache&lt;/code&gt; subsection to enable caching of data accessed in the storage
backend. Currently, the only available cache provides fast access to layer
metadata. This, if configured, uses the &lt;code&gt;blobdescriptor&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;You can set &lt;code&gt;blobdescriptor&lt;/code&gt; field to &lt;code&gt;redis&lt;/code&gt; or &lt;code&gt;inmemory&lt;/code&gt;.  The &lt;code&gt;redis&lt;/code&gt; value uses
a Redis pool to cache layer metadata.  The &lt;code&gt;inmemory&lt;/code&gt; value uses an in memory
map.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Formerly, &lt;code&gt;blobdescriptor&lt;/code&gt; was known as &lt;code&gt;layerinfo&lt;/code&gt;. While these
are equivalent, &lt;code&gt;layerinfo&lt;/code&gt; has been deprecated, in favor or
&lt;code&gt;blobdescriptor&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;redirect&#34;&gt;redirect&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;redirect&lt;/code&gt; subsection provides configuration for managing redirects from
content backends. For backends that support it, redirecting is enabled by
default. Certain deployment scenarios may prefer to route all data through the
Registry, rather than redirecting to the backend. This may be more efficient
when using a backend that is not colocated or when a registry instance is
doing aggressive caching.&lt;/p&gt;

&lt;p&gt;Redirects can be disabled by adding a single flag &lt;code&gt;disable&lt;/code&gt;, set to &lt;code&gt;true&lt;/code&gt;
under the &lt;code&gt;redirect&lt;/code&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redirect:
  disable: true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;filesystem&#34;&gt;filesystem&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;filesystem&lt;/code&gt; storage backend uses the local disk to store registry files. It
is ideal for development and may be appropriate for some small-scale production
applications.&lt;/p&gt;

&lt;p&gt;This backend has a single, required &lt;code&gt;rootdirectory&lt;/code&gt; parameter. The parameter
specifies the absolute path to a directory. The registry stores all its data
here so make sure there is adequate space available.&lt;/p&gt;

&lt;h3 id=&#34;azure&#34;&gt;azure&lt;/h3&gt;

&lt;p&gt;This storage backend uses Microsoft&amp;rsquo;s Azure Blob Storage.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;accountname&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Azure account name.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;accountkey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Azure account key.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;container&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Name of the Azure container into which to store data.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;realm&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Domain name suffix for the Storage Service API endpoint. By default, this
      is &lt;code&gt;core.windows.net&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/table&gt;

&lt;h1 id=&#34;gcs&#34;&gt;gcs&lt;/h1&gt;

&lt;p&gt;This storage backend uses Google Cloud Storage.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;bucket&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Storage bucket name.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;keyfile&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      A private service account key file in JSON format. Instead of a key file &lt;a href=&#34;https://developers.google.com/identity/protocols/application-default-credentials&#34;&gt;Google Application Default Credentials&lt;/a&gt; can be used.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;rootdirectory&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      This is a prefix that will be applied to all Google Cloud Storage keys to allow you to segment data in your bucket if necessary.
  &lt;/tr&gt;

&lt;/table&gt;

&lt;h3 id=&#34;rados&#34;&gt;rados&lt;/h3&gt;

&lt;p&gt;This storage backend uses &lt;a href=&#34;http://ceph.com/docs/master/rados/&#34;&gt;Ceph Object Storage&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;poolname&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Ceph pool name.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;username&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Ceph cluster user to connect as (i.e. admin, not client.admin).
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;chunksize&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Size of the written RADOS objects. Default value is 4MB (4194304).
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;s3&#34;&gt;S3&lt;/h3&gt;

&lt;p&gt;This storage backend uses Amazon&amp;rsquo;s Simple Storage Service (S3).&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;accesskey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Your AWS Access Key.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;secretkey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Your AWS Secret Key.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;region&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The AWS region in which your bucket exists. For the moment, the Go AWS
      library in use does not use the newer DNS based bucket routing.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;bucket&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The bucket name in which you want to store the registry&#39;s data.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;encrypt&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
       Specifies whether the registry stores the image in encrypted format or
       not. A boolean value. The default is false.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;secure&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Indicates whether to use HTTPS instead of HTTP. A boolean value. The
      default is &lt;code&gt;true&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;v4auth&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Indicates whether the registry uses Version 4 of AWS&#39;s authentication.
      Generally, you should set this to &lt;code&gt;true&lt;/code&gt;. By default, this is
      &lt;code&gt;false&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;chunksize&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The S3 API requires multipart upload chunks to be at least 5MB. This value
      should be a number that is larger than 5*1024*1024.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;rootdirectory&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      This is a prefix that will be applied to all S3 keys to allow you to segment data in your bucket if necessary.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;maintenance&#34;&gt;Maintenance&lt;/h3&gt;

&lt;p&gt;Currently upload purging and read-only mode are the only maintenance functions available.
These and future maintenance functions which are related to storage can be configured under
the maintenance section.&lt;/p&gt;

&lt;h3 id=&#34;upload-purging&#34;&gt;Upload Purging&lt;/h3&gt;

&lt;p&gt;Upload purging is a background process that periodically removes orphaned files from the upload
directories of the registry.  Upload purging is enabled by default.  To
configure upload directory purging, the following parameters
must be set.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;Set to true to enable upload purging.  Default=true.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;age&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;Upload directories which are older than this age will be deleted.  Default=168h (1 week)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;The interval between upload directory purging.  Default=24h.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dryrun&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;dryrun can be set to true to obtain a summary of what directories will be deleted.  Default=false.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note: &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;interval&lt;/code&gt; are strings containing a number with optional fraction and a unit suffix: e.g. 45m, 2h10m, 168h (1 week).&lt;/p&gt;

&lt;h3 id=&#34;read-only-mode&#34;&gt;Read-only mode&lt;/h3&gt;

&lt;p&gt;If the &lt;code&gt;readonly&lt;/code&gt; section under &lt;code&gt;maintenance&lt;/code&gt; has &lt;code&gt;enabled&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;,
clients will not be allowed to write to the registry. This mode is useful to
temporarily prevent writes to the backend storage so a garbage collection pass
can be run.  Before running garbage collection, the registry should be
restarted with readonly&amp;rsquo;s &lt;code&gt;enabled&lt;/code&gt; set to true. After the garbage collection
pass finishes, the registry may be restarted again, this time with &lt;code&gt;readonly&lt;/code&gt;
removed from the configuration (or set to false).&lt;/p&gt;

&lt;h3 id=&#34;openstack-swift&#34;&gt;Openstack Swift&lt;/h3&gt;

&lt;p&gt;This storage backend uses Openstack Swift object storage.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;authurl&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      URL for obtaining an auth token. https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;username&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Your Openstack user name.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;password&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Your Openstack password.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;region&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The Openstack region in which your container exists.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;container&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The container name in which you want to store the registry&#39;s data.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;tenant&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Your Openstack tenant name.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;tenantid&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Your Openstack tenant id.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;domain&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Your Openstack domain name for Identity v3 API.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;domainid&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Your Openstack domain id for Identity v3 API.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;trustid&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Your Openstack trust id for Identity v3 API.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;insecureskipverify&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      true to skip TLS verification, false by default.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;chunksize&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Size of the data segments for the Swift Dynamic Large Objects. This value should be a number (defaults to 5M).
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;rootdirectory&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      This is a prefix that will be applied to all Swift keys to allow you to segment data in your container if necessary.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;auth&#34;&gt;auth&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;auth:
  silly:
    realm: silly-realm
    service: silly-service
  token:
    realm: token-realm
    service: token-service
    issuer: registry-token-issuer
    rootcertbundle: /root/certs/bundle
  htpasswd:
    realm: basic-realm
    path: /path/to/htpasswd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;auth&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt;. There are
currently 3 possible auth providers, &lt;code&gt;silly&lt;/code&gt;, &lt;code&gt;token&lt;/code&gt; and &lt;code&gt;htpasswd&lt;/code&gt;. You can configure only
one &lt;code&gt;auth&lt;/code&gt; provider.&lt;/p&gt;

&lt;h3 id=&#34;silly&#34;&gt;silly&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;silly&lt;/code&gt; auth is only for development purposes. It simply checks for the
existence of the &lt;code&gt;Authorization&lt;/code&gt; header in the HTTP request. It has no regard for
the header&amp;rsquo;s value. If the header does not exist, the &lt;code&gt;silly&lt;/code&gt; auth responds with a
challenge response, echoing back the realm, service, and scope that access was
denied for.&lt;/p&gt;

&lt;p&gt;The following values are used to configure the response:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;realm&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The realm in which the registry server authenticates.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;service&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The service being authenticated.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;token&#34;&gt;token&lt;/h3&gt;

&lt;p&gt;Token based authentication allows the authentication system to be decoupled from
the registry. It is a well established authentication paradigm with a high
degree of security.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;realm&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The realm in which the registry server authenticates.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;service&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The service being authenticated.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;issuer&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
The name of the token issuer. The issuer inserts this into
the token so it must match the value configured for the issuer.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;rootcertbundle&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
     &lt;/td&gt;
    &lt;td&gt;
The absolute path to the root certificate bundle. This bundle contains the
public part of the certificates that is used to sign authentication tokens.
     &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;For more information about Token based authentication configuration, see the &lt;a href=&#34;../registry/spec/auth/token/&#34;&gt;specification&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;htpasswd&#34;&gt;htpasswd&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;htpasswd&lt;/em&gt; authentication backed allows one to configure basic auth using an
&lt;a href=&#34;https://httpd.apache.org/docs/2.4/programs/htpasswd.html&#34;&gt;Apache HTPasswd File&lt;/a&gt;.
Only &lt;a href=&#34;http://en.wikipedia.org/wiki/Bcrypt&#34;&gt;&lt;code&gt;bcrypt&lt;/code&gt;&lt;/a&gt; format passwords are
supported. Entries with other hash types will be ignored. The htpasswd file is
loaded once, at startup. If the file is invalid, the registry will display and
error and will not start.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This authentication scheme should only be used with TLS
configured, since basic authentication sends passwords as part of the http
header.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;realm&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The realm in which the registry server authenticates.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;path&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Path to htpasswd file to load at startup.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;middleware&#34;&gt;middleware&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;middleware&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt;. Use this option to inject middleware at
named hook points. All middlewares must implement the same interface as the
object they&amp;rsquo;re wrapping. This means a registry middleware must implement the
&lt;code&gt;distribution.Namespace&lt;/code&gt; interface, repository middleware must implement
&lt;code&gt;distribution.Repository&lt;/code&gt;, and storage middleware must implement
&lt;code&gt;driver.StorageDriver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Currently only one middleware, &lt;code&gt;cloudfront&lt;/code&gt;, a storage middleware, is supported
in the registry implementation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;middleware:
  registry:
    - name: ARegistryMiddleware
      options:
        foo: bar
  repository:
    - name: ARepositoryMiddleware
      options:
        foo: bar
  storage:
    - name: cloudfront
      options:
        baseurl: https://my.cloudfronted.domain.com/
        privatekey: /path/to/pem
        keypairid: cloudfrontkeypairid
        duration: 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each middleware entry has &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; entries. The &lt;code&gt;name&lt;/code&gt; must
correspond to the name under which the middleware registers itself. The
&lt;code&gt;options&lt;/code&gt; field is a map that details custom configuration required to
initialize the middleware. It is treated as a &lt;code&gt;map[string]interface{}&lt;/code&gt;. As such,
it supports any interesting structures desired, leaving it up to the middleware
initialization function to best determine how to handle the specific
interpretation of the options.&lt;/p&gt;

&lt;h3 id=&#34;cloudfront&#34;&gt;cloudfront&lt;/h3&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;baseurl&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      &lt;code&gt;SCHEME://HOST[/PATH]&lt;/code&gt; at which Cloudfront is served.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;privatekey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Private Key for Cloudfront provided by AWS.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;keypairid&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Key pair ID provided by AWS.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;duration&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Duration for which a signed URL should be valid.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;reporting&#34;&gt;reporting&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;reporting:
  bugsnag:
    apikey: bugsnagapikey
    releasestage: bugsnagreleasestage
    endpoint: bugsnagendpoint
  newrelic:
    licensekey: newreliclicensekey
    name: newrelicname
    verbose: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;reporting&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt; and configures error and metrics
reporting tools. At the moment only two services are supported, &lt;a href=&#34;http://newrelic.com/&#34;&gt;New
Relic&lt;/a&gt; and &lt;a href=&#34;http://bugsnag.com&#34;&gt;Bugsnag&lt;/a&gt;, a valid
configuration may contain both.&lt;/p&gt;

&lt;h3 id=&#34;bugsnag&#34;&gt;bugsnag&lt;/h3&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;apikey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      API Key provided by Bugsnag
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;releasestage&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Tracks where the registry is deployed, for example,
      &lt;code&gt;production&lt;/code&gt;,&lt;code&gt;staging&lt;/code&gt;, or
      &lt;code&gt;development&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;endpoint&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Specify the enterprise Bugsnag endpoint.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;newrelic&#34;&gt;newrelic&lt;/h3&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;licensekey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      License key provided by New Relic.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;name&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      New Relic application name.
    &lt;/td&gt;
  &lt;/tr&gt;
     &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;verbose&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Enable New Relic debugging output on stdout.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;http&#34;&gt;http&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;http:
  addr: localhost:5000
  net: tcp
  prefix: /my/nested/registry/
  host: https://myregistryaddress.org:5000
  secret: asecretforlocaldevelopment
  tls:
    certificate: /path/to/x509/public
    key: /path/to/x509/private
    clientcas:
      - /path/to/ca.pem
      - /path/to/another/ca.pem
  debug:
    addr: localhost:5001
  headers:
    X-Content-Type-Options: [nosniff]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;http&lt;/code&gt; option details the configuration for the HTTP server that hosts the registry.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;addr&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
     The address for which the server should accept connections. The form depends on a network type (see &lt;code&gt;net&lt;/code&gt; option):
     &lt;code&gt;HOST:PORT&lt;/code&gt; for tcp and &lt;code&gt;FILE&lt;/code&gt; for a unix socket.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;net&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
     The network which is used to create a listening socket. Known networks are &lt;code&gt;unix&lt;/code&gt; and &lt;code&gt;tcp&lt;/code&gt;.
     The default empty value means tcp.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;prefix&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
If the server does not run at the root path use this value to specify the
prefix. The root path is the section before &lt;code&gt;v2&lt;/code&gt;. It
should have both preceding and trailing slashes, for example &lt;code&gt;/path/&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;host&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
This parameter specifies an externally-reachable address for the registry, as a
fully qualified URL. If present, it is used when creating generated URLs.
Otherwise, these URLs are derived from client requests.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;secret&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
A random piece of data. This is used to sign state that may be stored with the
client to protect against tampering. For production environments you should generate a
random piece of data using a cryptographically secure random generator. This
configuration parameter may be omitted, in which case the registry will automatically
generate a secret at launch.
&lt;p /&gt;
&lt;b&gt;WARNING: If you are building a cluster of registries behind a load balancer, you MUST
ensure the secret is the same for all registries.&lt;/b&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;tls&#34;&gt;tls&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;tls&lt;/code&gt; struct within &lt;code&gt;http&lt;/code&gt; is &lt;strong&gt;optional&lt;/strong&gt;. Use this to configure TLS
for the server. If you already have a server such as Nginx or Apache running on
the same host as the registry, you may prefer to configure TLS termination there
and proxy connections to the registry server.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;certificate&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
       Absolute path to x509 cert file
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;key&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Absolute path to x509 private key file.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;clientcas&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      An array of absolute paths to a x509 CA file
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;debug&#34;&gt;debug&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt; . Use it to configure a debug server that
can be helpful in diagnosing problems. The debug endpoint can be used for
monitoring registry metrics and health, as well as profiling. Sensitive
information may be available via the debug endpoint. Please be certain that
access to the debug endpoint is locked down in a production environment.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; section takes a single, required &lt;code&gt;addr&lt;/code&gt; parameter. This parameter
specifies the &lt;code&gt;HOST:PORT&lt;/code&gt; on which the debug server should accept connections.&lt;/p&gt;

&lt;h3 id=&#34;headers&#34;&gt;headers&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;headers&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt; . Use it to specify headers that the HTTP
server should include in responses. This can be used for security headers such
as &lt;code&gt;Strict-Transport-Security&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;headers&lt;/code&gt; option should contain an option for each header to include, where
the parameter name is the header&amp;rsquo;s name, and the parameter value a list of the
header&amp;rsquo;s payload values.&lt;/p&gt;

&lt;p&gt;Including &lt;code&gt;X-Content-Type-Options: [nosniff]&lt;/code&gt; is recommended, so that browsers
will not interpret content as HTML if they are directed to load a page from the
registry. This header is included in the example configuration files.&lt;/p&gt;

&lt;h2 id=&#34;notifications&#34;&gt;notifications&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;notifications:
  endpoints:
    - name: alistener
      disabled: false
      url: https://my.listener.com/event
      headers: &amp;lt;http.Header&amp;gt;
      timeout: 500
      threshold: 5
      backoff: 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The notifications option is &lt;strong&gt;optional&lt;/strong&gt; and currently may contain a single
option, &lt;code&gt;endpoints&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;endpoints&#34;&gt;endpoints&lt;/h3&gt;

&lt;p&gt;Endpoints is a list of named services (URLs) that can accept event notifications.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;name&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
A human readable name for the service.
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;disabled&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
A boolean to enable/disable notifications for a service.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;url&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
    yes
    &lt;/td&gt;
    &lt;td&gt;
The URL to which events should be published.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;headers&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Static headers to add to each request. Each header&#39;s name should be a key
      underneath headers, and each value is a list of payloads for that
      header name. Note that values must always be lists.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;timeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      An HTTP timeout value. This field takes a positive integer and an optional
      suffix indicating the unit of time. Possible units are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;threshold&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      An integer specifying how long to wait before backing off a failure.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;backoff&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      How long the system backs off before retrying. This field takes a positive
      integer and an optional suffix indicating the unit of time. Possible units
      are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;redis&#34;&gt;redis&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;redis:
  addr: localhost:6379
  password: asecret
  db: 0
  dialtimeout: 10ms
  readtimeout: 10ms
  writetimeout: 10ms
  pool:
    maxidle: 16
    maxactive: 64
    idletimeout: 300s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Declare parameters for constructing the redis connections. Registry instances
may use the Redis instance for several applications. The current purpose is
caching information about immutable blobs. Most of the options below control
how the registry connects to redis. You can control the pool&amp;rsquo;s behavior
with the &lt;a href=&#34;#pool&#34;&gt;pool&lt;/a&gt; subsection.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s advisable to configure Redis itself with the &lt;strong&gt;allkeys-lru&lt;/strong&gt; eviction policy
as the registry does not set an expire value on keys.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;addr&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Address (host and port) of redis instance.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;password&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      A password used to authenticate to the redis instance.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;db&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Selects the db for each connection.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;dialtimeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Timeout for connecting to a redis instance.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;readtimeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Timeout for reading from redis connections.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;writetimeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Timeout for writing to redis connections.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;pool&#34;&gt;pool&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pool:
  maxidle: 16
  maxactive: 64
  idletimeout: 300s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure the behavior of the Redis connection pool.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;maxidle&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Sets the maximum number of idle connections.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;maxactive&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      sets the maximum number of connections that should
  be opened before blocking a connection request.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;idletimeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      sets the amount time to wait before closing
  inactive connections.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;health&#34;&gt;health&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;health:
  storagedriver:
    enabled: true
    interval: 10s
    threshold: 3
  file:
    - file: /path/to/checked/file
      interval: 10s
  http:
    - uri: http://server.to.check/must/return/200
      headers:
        Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]
      statuscode: 200
      timeout: 3s
      interval: 10s
      threshold: 3
  tcp:
    - addr: redis-server.domain.com:6379
      timeout: 3s
      interval: 10s
      threshold: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The health option is &lt;strong&gt;optional&lt;/strong&gt;. It may contain preferences for a periodic
health check on the storage driver&amp;rsquo;s backend storage, and optional periodic
checks on local files, HTTP URIs, and/or TCP servers. The results of the health
checks are available at /debug/health on the debug HTTP server if the debug
HTTP server is enabled (see http section).&lt;/p&gt;

&lt;h3 id=&#34;storagedriver&#34;&gt;storagedriver&lt;/h3&gt;

&lt;p&gt;storagedriver contains options for a health check on the configured storage
driver&amp;rsquo;s backend storage. enabled must be set to true for this health check to
be active.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;enabled&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
&#34;true&#34; to enable the storage driver health check or &#34;false&#34; to disable it.
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;interval&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The length of time to wait between repetitions of the check. This field
      takes a positive integer and an optional suffix indicating the unit of
      time. Possible units are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    The default value is 10 seconds if this field is omitted.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;threshold&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      An integer specifying the number of times the check must fail before the
      check triggers an unhealthy state. If this filed is not specified, a
      single failure will trigger an unhealthy state.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;file&#34;&gt;file&lt;/h3&gt;

&lt;p&gt;file is a list of paths to be periodically checked for the existence of a file.
If a file exists at the given path, the health check will fail. This can be
used as a way of bringing a registry out of rotation by creating a file.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;file&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
The path to check for the existence of a file.
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;interval&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The length of time to wait between repetitions of the check. This field
      takes a positive integer and an optional suffix indicating the unit of
      time. Possible units are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    The default value is 10 seconds if this field is omitted.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;http-1&#34;&gt;http&lt;/h3&gt;

&lt;p&gt;http is a list of HTTP URIs to be periodically checked with HEAD requests. If
a HEAD request doesn&amp;rsquo;t complete or returns an unexpected status code, the
health check will fail.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;uri&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
The URI to check.
&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;headers&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Static headers to add to each request. Each header&#39;s name should be a key
      underneath headers, and each value is a list of payloads for that
      header name. Note that values must always be lists.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;statuscode&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
Expected status code from the HTTP URI. Defaults to 200.
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;timeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The length of time to wait before timing out the HTTP request. This field
      takes a positive integer and an optional suffix indicating the unit of
      time. Possible units are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;interval&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The length of time to wait between repetitions of the check. This field
      takes a positive integer and an optional suffix indicating the unit of
      time. Possible units are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    The default value is 10 seconds if this field is omitted.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;threshold&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      An integer specifying the number of times the check must fail before the
      check triggers an unhealthy state. If this filed is not specified, a
      single failure will trigger an unhealthy state.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;tcp&#34;&gt;tcp&lt;/h3&gt;

&lt;p&gt;tcp is a list of TCP addresses to be periodically checked with connection
attempts. The addresses must include port numbers. If a connection attempt
fails, the health check will fail.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;addr&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
The TCP address to connect to, including a port number.
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;timeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The length of time to wait before timing out the TCP connection. This
      field takes a positive integer and an optional suffix indicating the unit
      of time. Possible units are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;interval&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The length of time to wait between repetitions of the check. This field
      takes a positive integer and an optional suffix indicating the unit of
      time. Possible units are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    The default value is 10 seconds if this field is omitted.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;threshold&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      An integer specifying the number of times the check must fail before the
      check triggers an unhealthy state. If this filed is not specified, a
      single failure will trigger an unhealthy state.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;proxy&#34;&gt;Proxy&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;proxy:
  remoteurl: https://registry-1.docker.io
  username: [username]
  password: [password]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Proxy enables a registry to be configured as a pull through cache to the official Docker Hub.  See &lt;a href=&#34;../registry/mirror/&#34;&gt;mirror&lt;/a&gt; for more information. Pushing to a registry configured as a pull through cache is currently unsupported.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;remoteurl&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
     The URL of the official Docker Hub
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;username&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
     The username of the Docker Hub account
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;password&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
     The password for the official Docker Hub account
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;To enable pulling private repositories (e.g. &lt;code&gt;batman/robin&lt;/code&gt;) a username and password for user &lt;code&gt;batman&lt;/code&gt; must be specified.  Note: These private repositories will be stored in the proxy cache&amp;rsquo;s storage and relevant measures should be taken to protect access to this.&lt;/p&gt;

&lt;h2 id=&#34;example-development-configuration&#34;&gt;Example: Development configuration&lt;/h2&gt;

&lt;p&gt;The following is a simple example you can use for local development:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: 0.1
log:
  level: debug
storage:
    filesystem:
        rootdirectory: /var/lib/registry
http:
    addr: localhost:5000
    secret: asecretforlocaldevelopment
    debug:
        addr: localhost:5001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above configures the registry instance to run on port &lt;code&gt;5000&lt;/code&gt;, binding to
&lt;code&gt;localhost&lt;/code&gt;, with the &lt;code&gt;debug&lt;/code&gt; server enabled. Registry data storage is in the
&lt;code&gt;/var/lib/registry&lt;/code&gt; directory. Logging is in &lt;code&gt;debug&lt;/code&gt; mode, which is the most
verbose.&lt;/p&gt;

&lt;p&gt;A similar simple configuration is available at
&lt;a href=&#34;https://github.com/docker/distribution/blob/master/cmd/registry/config-example.yml&#34;&gt;config-example.yml&lt;/a&gt;.
Both are generally useful for local development.&lt;/p&gt;

&lt;h2 id=&#34;example-middleware-configuration&#34;&gt;Example: Middleware configuration&lt;/h2&gt;

&lt;p&gt;This example illustrates how to configure storage middleware in a registry.
Middleware allows the registry to serve layers via a content delivery network
(CDN). This is useful for reducing requests to the storage layer.&lt;/p&gt;

&lt;p&gt;Currently, the registry supports &lt;a href=&#34;http://aws.amazon.com/cloudfront/&#34;&gt;Amazon
Cloudfront&lt;/a&gt;. You can only use Cloudfront in
conjunction with the S3 storage driver.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The storage middleware name. Currently &lt;code&gt;cloudfront&lt;/code&gt; is an accepted value.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;disabled&lt;code&gt;&lt;/td&gt;
    &lt;td&gt;Set to &lt;code&gt;false&lt;/code&gt; to easily disable the middleware.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;options:&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;
    A set of key/value options to configure the middleware.
    &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;baseurl:&lt;/code&gt; The Cloudfront base URL.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;privatekey:&lt;/code&gt; The location of your AWS private key on the filesystem. &lt;/li&gt;
    &lt;li&gt;&lt;code&gt;keypairid:&lt;/code&gt; The ID of your Cloudfront keypair. &lt;/li&gt;
    &lt;li&gt;&lt;code&gt;duration:&lt;/code&gt; The duration in minutes for which the URL is valid. Default is 20. &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The following example illustrates these values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;middleware:
    storage:
        - name: cloudfront
          disabled: false
          options:
             baseurl: http://d111111abcdef8.cloudfront.net
             privatekey: /path/to/asecret.pem
             keypairid: asecret
             duration: 60
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Cloudfront keys exist separately to other AWS keys.  See
&lt;a href=&#34;http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html&#34;&gt;the documentation on AWS credentials&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Deploying a registry server</title>
      <link>http://docs.docker.com/registry/deploying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/deploying/</guid>
      <description>

&lt;h1 id=&#34;deploying-a-registry-server&#34;&gt;Deploying a registry server&lt;/h1&gt;

&lt;p&gt;You need to &lt;a href=&#34;https://docs.docker.com/installation/&#34;&gt;install Docker version 1.6.0 or newer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;running-on-localhost&#34;&gt;Running on localhost&lt;/h2&gt;

&lt;p&gt;Start your registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 5000:5000 --restart=always --name registry registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now use it with docker.&lt;/p&gt;

&lt;p&gt;Get any image from the hub and tag it to point to your registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull ubuntu &amp;amp;&amp;amp; docker tag ubuntu localhost:5000/ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; then push it to your registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker push localhost:5000/ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; then pull it back from your registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull localhost:5000/ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To stop your registry, you would:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stop registry &amp;amp;&amp;amp; docker rm -v registry
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;storage&#34;&gt;Storage&lt;/h2&gt;

&lt;p&gt;By default, your registry data is persisted as a &lt;a href=&#34;https://docs.docker.com/userguide/dockervolumes/&#34;&gt;docker volume&lt;/a&gt; on the host filesystem. Properly understanding volumes is essential if you want to stick with a local filesystem storage.&lt;/p&gt;

&lt;p&gt;Specifically, you might want to point your volume location to a specific place in order to more easily access your registry data. To do so you can:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 5000:5000 --restart=always --name registry \
  -v `pwd`/data:/var/lib/registry \
  registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;You should usually consider using &lt;a href=&#34;https://github.com/docker/distribution/blob/master/docs/storagedrivers.md&#34;&gt;another storage backend&lt;/a&gt; instead of the local filesystem. Use the &lt;a href=&#34;https://github.com/docker/distribution/blob/master/docs/configuration.md#storage&#34;&gt;storage configuration options&lt;/a&gt; to configure an alternate storage backend.&lt;/p&gt;

&lt;p&gt;Using one of these will allow you to more easily scale your registry, and leverage your storage redundancy and availability features.&lt;/p&gt;

&lt;h2 id=&#34;running-a-domain-registry&#34;&gt;Running a domain registry&lt;/h2&gt;

&lt;p&gt;While running on &lt;code&gt;localhost&lt;/code&gt; has its uses, most people want their registry to be more widely available. To do so, the Docker engine requires you to secure it using TLS, which is conceptually very similar to configuring your web server with SSL.&lt;/p&gt;

&lt;h3 id=&#34;get-a-certificate&#34;&gt;Get a certificate&lt;/h3&gt;

&lt;p&gt;Assuming that you own the domain &lt;code&gt;myregistrydomain.com&lt;/code&gt;, and that its DNS record points to the host where you are running your registry, you first need to get a certificate from a CA.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;certs&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p certs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then move and/or rename your crt file to: &lt;code&gt;certs/domain.crt&lt;/code&gt;, and your key file to: &lt;code&gt;certs/domain.key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure you stopped your registry from the previous steps, then start your registry again with TLS enabled:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 5000:5000 --restart=always --name registry \
  -v `pwd`/certs:/certs \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now be able to access your registry from another docker host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull ubuntu
docker tag ubuntu myregistrydomain.com:5000/ubuntu
docker push myregistrydomain.com:5000/ubuntu
docker pull myregistrydomain.com:5000/ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;gotcha&#34;&gt;Gotcha&lt;/h4&gt;

&lt;p&gt;A certificate issuer may supply you with an &lt;em&gt;intermediate&lt;/em&gt; certificate. In this case, you must combine your certificate with the intermediate&amp;rsquo;s to form a &lt;em&gt;certificate bundle&lt;/em&gt;. You can do this using the &lt;code&gt;cat&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat domain.crt intermediate-certificates.pem &amp;gt; certs/domain.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;alternatives-1&#34;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;While rarely advisable, you may want to use self-signed certificates instead, or use your registry in an insecure fashion. You will find instructions &lt;a href=&#34;../registry/insecure/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;load-balancing-considerations&#34;&gt;Load Balancing Considerations&lt;/h2&gt;

&lt;p&gt;One may want to use a load balancer to distribute load, terminate TLS or
provide high availability. While a full load balancing setup is outside the
scope of this document, there are a few considerations that can make the process
smoother.&lt;/p&gt;

&lt;p&gt;The most important aspect is that a load balanced cluster of registries must
share the same resources. For the current version of the registry, this means
the following must be the same:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage Driver&lt;/li&gt;
&lt;li&gt;HTTP Secret&lt;/li&gt;
&lt;li&gt;Redis Cache (if configured)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any of these are different, the registry will have trouble serving requests.
As an example, if you&amp;rsquo;re using the filesystem driver, all registry instances
must have access to the same filesystem root, which means they should be in
the same machine. For other drivers, such as s3 or azure, they should be
accessing the same resource, and will likely share an identical configuration.
The &lt;em&gt;HTTP Secret&lt;/em&gt; coordinates uploads, so also must be the same across
instances. Configuring different redis instances will work (at the time
of writing), but will not be optimal if the instances are not shared, causing
more requests to be directed to the backend.&lt;/p&gt;

&lt;p&gt;Getting the headers correct is very important. For all responses to any
request under the &amp;ldquo;/v2/&amp;rdquo; url space, the &lt;code&gt;Docker-Distribution-API-Version&lt;/code&gt;
header should be set to the value &amp;ldquo;registry/2.0&amp;rdquo;, even for a 4xx response.
This header allows the docker engine to quickly resolve authentication realms
and fallback to version 1 registries, if necessary. Confirming this is setup
correctly can help avoid problems with fallback.&lt;/p&gt;

&lt;p&gt;In the same train of thought, you must make sure you are properly sending the
&lt;code&gt;X-Forwarded-Proto&lt;/code&gt;, &lt;code&gt;X-Forwarded-For&lt;/code&gt; and &lt;code&gt;Host&lt;/code&gt; headers to their &amp;ldquo;client-side&amp;rdquo;
values. Failure to do so usually makes the registry issue redirects to internal
hostnames or downgrading from https to http.&lt;/p&gt;

&lt;p&gt;A properly secured registry should return 401 when the &amp;ldquo;/v2/&amp;rdquo; endpoint is hit
without credentials. The response should include a &lt;code&gt;WWW-Authenticate&lt;/code&gt;
challenge, providing guidance on how to authenticate, such as with basic auth
or a token service. If the load balancer has health checks, it is recommended
to configure it to consider a 401 response as healthy and any other as down.
This will secure your registry by ensuring that configuration problems with
authentication don&amp;rsquo;t accidentally expose an unprotected registry. If you&amp;rsquo;re
using a less sophisticated load balancer, such as Amazon&amp;rsquo;s Elastic Load
Balancer, that doesn&amp;rsquo;t allow one to change the healthy response code, health
checks can be directed at &amp;ldquo;/&amp;rdquo;, which will always return a &lt;code&gt;200 OK&lt;/code&gt; response.&lt;/p&gt;

&lt;h2 id=&#34;restricting-access&#34;&gt;Restricting access&lt;/h2&gt;

&lt;p&gt;Except for registries running on secure local networks, registries should always implement access restrictions.&lt;/p&gt;

&lt;h3 id=&#34;native-basic-auth&#34;&gt;Native basic auth&lt;/h3&gt;

&lt;p&gt;The simplest way to achieve access restriction is through basic authentication (this is very similar to other web servers&amp;rsquo; basic authentication mechanism).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: You &lt;strong&gt;cannot&lt;/strong&gt; use authentication with an insecure registry. You have to &lt;a href=&#34;#running-a-domain-registry&#34;&gt;configure TLS first&lt;/a&gt; for this to work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First create a password file with one entry for the user &amp;ldquo;testuser&amp;rdquo;, with password &amp;ldquo;testpassword&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir auth
docker run --entrypoint htpasswd registry:2 -Bbn testuser testpassword &amp;gt; auth/htpasswd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you stopped your registry from the previous step, then start it again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 5000:5000 --restart=always --name registry \
  -v `pwd`/auth:/auth \
  -e &amp;quot;REGISTRY_AUTH=htpasswd&amp;quot; \
  -e &amp;quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;quot; \
  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
  -v `pwd`/certs:/certs \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now be able to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker login myregistrydomain.com:5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then push and pull images as an authenticated user.&lt;/p&gt;

&lt;h4 id=&#34;gotcha-1&#34;&gt;Gotcha&lt;/h4&gt;

&lt;p&gt;Seeing X509 errors is usually a sign you are trying to use self-signed certificates, and failed to &lt;a href=&#34;../registry/insecure/&#34;&gt;configure your docker daemon properly&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;alternatives-2&#34;&gt;Alternatives&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You may want to leverage more advanced basic auth implementations through a proxy design, in front of the registry. You will find examples of such patterns in the &lt;a href=&#34;../registry/recipes/&#34;&gt;recipes list&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Alternatively, the Registry also supports delegated authentication, redirecting users to a specific, trusted token server. That approach requires significantly more investment, and only makes sense if you want to fully configure ACLs and more control over the Registry integration into your global authorization and authentication systems.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will find &lt;a href=&#34;../registry/spec/auth/token/&#34;&gt;background information here&lt;/a&gt;, and &lt;a href=&#34;../registry/configuration/#auth&#34;&gt;configuration information here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Beware that you will have to implement your own authentication service for this to work, or leverage a third-party implementation.&lt;/p&gt;

&lt;h2 id=&#34;managing-with-compose&#34;&gt;Managing with Compose&lt;/h2&gt;

&lt;p&gt;As your registry configuration grows more complex, dealing with it can quickly become tedious.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s highly recommended to use &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; to facilitate operating your registry.&lt;/p&gt;

&lt;p&gt;Here is a simple &lt;code&gt;docker-compose.yml&lt;/code&gt; example that condenses everything explained so far:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;registry:
  restart: always
  image: registry:2
  ports:
    - 5000:5000
  environment:
    REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
    REGISTRY_HTTP_TLS_KEY: /certs/domain.key
    REGISTRY_AUTH: htpasswd
    REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
    REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
  volumes:
    - /path/data:/var/lib/registry
    - /path/certs:/certs
    - /path/auth:/auth
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: replace &lt;code&gt;/path&lt;/code&gt; by whatever directory that holds your &lt;code&gt;certs&lt;/code&gt; and &lt;code&gt;auth&lt;/code&gt; folder from above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can then start your registry with a simple&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;

&lt;p&gt;You will find more specific and advanced informations in the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../registry/configuration/&#34;&gt;Configuration reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../registry/notifications/&#34;&gt;Working with notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../registry/recipes/&#34;&gt;Advanced &amp;ldquo;recipes&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../registry/spec/api/&#34;&gt;Registry API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../registry/storagedrivers/&#34;&gt;Storage driver model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../registry/spec/auth/token/&#34;&gt;Token authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker Registry</title>
      <link>http://docs.docker.com/registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/</guid>
      <description>

&lt;h1 id=&#34;docker-registry&#34;&gt;Docker Registry&lt;/h1&gt;

&lt;h2 id=&#34;what-it-is&#34;&gt;What it is&lt;/h2&gt;

&lt;p&gt;The Registry is a stateless, highly scalable server side application that stores and lets you distribute Docker images.
The Registry is open-source, under the permissive &lt;a href=&#34;http://en.wikipedia.org/wiki/Apache_License&#34;&gt;Apache license&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;why-use-it&#34;&gt;Why use it&lt;/h2&gt;

&lt;p&gt;You should use the Registry if you want to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tightly control where your images are being stored&lt;/li&gt;
&lt;li&gt;fully own your images distribution pipeline&lt;/li&gt;
&lt;li&gt;integrate image storage and distribution tightly into your in-house development workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;Users looking for a zero maintenance, ready-to-go solution are encouraged to head-over to the &lt;a href=&#34;https://hub.docker.com&#34;&gt;Docker Hub&lt;/a&gt;, which provides a free-to-use, hosted Registry, plus additional features (organization accounts, automated builds, and more).&lt;/p&gt;

&lt;p&gt;Users looking for a commercially supported version of the Registry should look into &lt;a href=&#34;https://docs.docker.com/docker-trusted-registry/&#34;&gt;Docker Trusted Registry&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;The Registry is compatible with Docker engine &lt;strong&gt;version 1.6.0 or higher&lt;/strong&gt;.
If you really need to work with older Docker versions, you should look into the &lt;a href=&#34;https://github.com/docker/docker-registry&#34;&gt;old python registry&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Start your registry&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 5000:5000 --name registry registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pull (or build) some image from the hub&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag the image so that it points to your registry&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker tag ubuntu localhost:5000/myfirstimage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Push it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker push localhost:5000/myfirstimage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pull it back&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull localhost:5000/myfirstimage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now stop your registry and remove all data&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stop registry &amp;amp;&amp;amp; docker rm -v registry
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;

&lt;p&gt;You should now read the &lt;a href=&#34;../registry/introduction/&#34;&gt;detailed introduction about the registry&lt;/a&gt;, or jump directly to &lt;a href=&#34;../registry/deploying/&#34;&gt;deployment instructions&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Filesystem storage driver</title>
      <link>http://docs.docker.com/registry/storage-drivers/filesystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/storage-drivers/filesystem/</guid>
      <description>

&lt;h1 id=&#34;filesystem-storage-driver&#34;&gt;Filesystem storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses the local filesystem.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rootdirectory&lt;/code&gt;: (optional) The root directory tree in which all registry files will be stored. Defaults to &lt;code&gt;/var/lib/registry&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GCS storage driver</title>
      <link>http://docs.docker.com/registry/storage-drivers/gcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/storage-drivers/gcs/</guid>
      <description>

&lt;h1 id=&#34;google-cloud-storage-driver&#34;&gt;Google Cloud Storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses Google Cloud for object storage.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;bucket&lt;/code&gt;: The name of your Google Cloud Storage bucket where you wish to store objects (needs to already be created prior to driver initialization).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;keyfile&lt;/code&gt;: (optional) A private key file in JSON format, used for &lt;a href=&#34;https://cloud.google.com/storage/docs/authentication#service_accounts&#34;&gt;Service Account Authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Instead of a key file you can use &lt;a href=&#34;https://developers.google.com/identity/protocols/application-default-credentials&#34;&gt;Google Application Default Credentials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rootdirectory&lt;/code&gt;: (optional) The root directory tree in which all registry files will be stored. Defaults to the empty string (bucket root).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting help</title>
      <link>http://docs.docker.com/registry/help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/help/</guid>
      <description>

&lt;h1 id=&#34;getting-help&#34;&gt;Getting help&lt;/h1&gt;

&lt;p&gt;If you need help, or just want to chat, you can reach us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on irc: &lt;code&gt;#docker-distribution&lt;/code&gt; on freenode&lt;/li&gt;
&lt;li&gt;on the &lt;a href=&#34;https://groups.google.com/a/dockerproject.org/forum/#!forum/distribution&#34;&gt;mailing list&lt;/a&gt; (mail at &lt;a href=&#34;mailto:distribution@dockerproject.org&#34;&gt;distribution@dockerproject.org&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to report a bug:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be sure to first read about &lt;a href=&#34;https://github.com/docker/distribution/blob/master/CONTRIBUTING.md&#34;&gt;how to contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you can then do so on the &lt;a href=&#34;https://github.com/docker/distribution/issues&#34;&gt;GitHub project bugtracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also find out more about the Docker&amp;rsquo;s project &lt;a href=&#34;https://docs.docker.com/project/get-help&#34;&gt;Getting Help resources&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTTP API V2</title>
      <link>http://docs.docker.com/registry/spec/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/spec/api/</guid>
      <description>

&lt;h1 id=&#34;docker-registry-http-api-v2&#34;&gt;Docker Registry HTTP API V2&lt;/h1&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Docker Registry HTTP API&lt;/em&gt; is the protocol to facilitate distribution of
images to the docker engine. It interacts with instances of the docker
registry, which is a service to manage information about docker images and
enable their distribution. The specification covers the operation of version 2
of this API, known as &lt;em&gt;Docker Registry HTTP API V2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While the V1 registry protocol is usable, there are several problems with the
architecture that have led to this new version. The main driver of this
specification these changes to the docker the image format, covered in
&lt;a href=&#34;https://github.com/docker/docker/issues/8093&#34;&gt;docker/docker#8093&lt;/a&gt;. The new, self-contained image manifest simplifies image
definition and improves security. This specification will build on that work,
leveraging new properties of the manifest format to improve performance,
reduce bandwidth usage and decrease the likelihood of backend corruption.&lt;/p&gt;

&lt;p&gt;For relevant details and history leading up to this specification, please see
the following issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/8093&#34;&gt;docker/docker#8093&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/9015&#34;&gt;docker/docker#9015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker-registry/issues/612&#34;&gt;docker/docker-registry#612&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;scope&#34;&gt;Scope&lt;/h3&gt;

&lt;p&gt;This specification covers the URL layout and protocols of the interaction
between docker registry and docker core. This will affect the docker core
registry API and the rewrite of docker-registry. Docker registry
implementations may implement other API endpoints, but they are not covered by
this specification.&lt;/p&gt;

&lt;p&gt;This includes the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Namespace-oriented URI Layout&lt;/li&gt;
&lt;li&gt;PUSH/PULL registry server for V2 image manifest format&lt;/li&gt;
&lt;li&gt;Resumable layer PUSH support&lt;/li&gt;
&lt;li&gt;V2 Client library implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While authentication and authorization support will influence this
specification, details of the protocol will be left to a future specification.
Relevant header definitions and error codes are present to provide an
indication of what a client may encounter.&lt;/p&gt;

&lt;h4 id=&#34;future&#34;&gt;Future&lt;/h4&gt;

&lt;p&gt;There are features that have been discussed during the process of cutting this
specification. The following is an incomplete list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Immutable image references&lt;/li&gt;
&lt;li&gt;Multiple architecture support&lt;/li&gt;
&lt;li&gt;Migration from v2compatibility representation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These may represent features that are either out of the scope of this
specification, the purview of another specification or have been deferred to a
future version.&lt;/p&gt;

&lt;h3 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;For the most part, the use cases of the former registry API apply to the new
version. Differentiating use cases are covered below.&lt;/p&gt;

&lt;h4 id=&#34;image-verification&#34;&gt;Image Verification&lt;/h4&gt;

&lt;p&gt;A docker engine instance would like to run verified image named
&amp;ldquo;library/ubuntu&amp;rdquo;, with the tag &amp;ldquo;latest&amp;rdquo;. The engine contacts the registry,
requesting the manifest for &amp;ldquo;library/ubuntu:latest&amp;rdquo;. An untrusted registry
returns a manifest. Before proceeding to download the individual layers, the
engine verifies the manifest&amp;rsquo;s signature, ensuring that the content was
produced from a trusted source and no tampering has occured. After each layer
is downloaded, the engine verifies the digest of the layer, ensuring that the
content matches that specified by the manifest.&lt;/p&gt;

&lt;h4 id=&#34;resumable-push&#34;&gt;Resumable Push&lt;/h4&gt;

&lt;p&gt;Company X&amp;rsquo;s build servers lose connectivity to docker registry before
completing an image layer transfer. After connectivity returns, the build
server attempts to re-upload the image. The registry notifies the build server
that the upload has already been partially attempted. The build server
responds by only sending the remaining data to complete the image file.&lt;/p&gt;

&lt;h4 id=&#34;resumable-pull&#34;&gt;Resumable Pull&lt;/h4&gt;

&lt;p&gt;Company X is having more connectivity problems but this time in their
deployment datacenter. When downloading an image, the connection is
interrupted before completion. The client keeps the partial data and uses http
&lt;code&gt;Range&lt;/code&gt; requests to avoid downloading repeated data.&lt;/p&gt;

&lt;h4 id=&#34;layer-upload-de-duplication&#34;&gt;Layer Upload De-duplication&lt;/h4&gt;

&lt;p&gt;Company Y&amp;rsquo;s build system creates two identical docker layers from build
processes A and B. Build process A completes uploading the layer before B.
When process B attempts to upload the layer, the registry indicates that its
not necessary because the layer is already known.&lt;/p&gt;

&lt;p&gt;If process A and B upload the same layer at the same time, both operations
will proceed and the first to complete will be stored in the registry (Note:
we may modify this to prevent dogpile with some locking mechanism).&lt;/p&gt;

&lt;h3 id=&#34;changes&#34;&gt;Changes&lt;/h3&gt;

&lt;p&gt;The V2 specification has been written to work as a living document, specifying
only what is certain and leaving what is not specified open or to future
changes. Only non-conflicting additions should be made to the API and accepted
changes should avoid preventing future changes from happening.&lt;/p&gt;

&lt;p&gt;This section should be updated when changes are made to the specification,
indicating what is different. Optionally, we may start marking parts of the
specification to correspond with the versions enumerated here.&lt;/p&gt;

&lt;p&gt;Each set of changes is given a letter corresponding to a set of modifications
that were applied to the baseline specification. These are merely for
reference and shouldn&amp;rsquo;t be used outside the specification other than to
identify a set of modifications.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;f&lt;/dt&gt;
  &lt;dd&gt;
    &lt;ul&gt;
      &lt;li&gt;Specify the delete API for layers and manifests.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;

  &lt;dt&gt;e&lt;/dt&gt;
  &lt;dd&gt;
    &lt;ul&gt;
      &lt;li&gt;Added support for listing registry contents.&lt;/li&gt;
      &lt;li&gt;Added pagination to tags API.&lt;/li&gt;
      &lt;li&gt;Added common approach to support pagination.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;

  &lt;dt&gt;d&lt;/dt&gt;
  &lt;dd&gt;
    &lt;ul&gt;
      &lt;li&gt;Allow repository name components to be one character.&lt;/li&gt;
      &lt;li&gt;Clarified that single component names are allowed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;

  &lt;dt&gt;c&lt;/dt&gt;
  &lt;dd&gt;
    &lt;ul&gt;
      &lt;li&gt;Added section covering digest format.&lt;/li&gt;
      &lt;li&gt;Added more clarification that manifest cannot be deleted by tag.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;

  &lt;dt&gt;b&lt;/dt&gt;
  &lt;dd&gt;
    &lt;ul&gt;
      &lt;li&gt;Added capability of doing streaming upload to PATCH blob upload.&lt;/li&gt;
      &lt;li&gt;Updated PUT blob upload to no longer take final chunk, now requires entire data or no data.&lt;/li&gt;
      &lt;li&gt;Removed `416 Requested Range Not Satisfiable` response status from PUT blob upload.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;

  &lt;dt&gt;a&lt;/dt&gt;
  &lt;dd&gt;
    &lt;ul&gt;
      &lt;li&gt;Added support for immutable manifest references in manifest endpoints.&lt;/li&gt;
      &lt;li&gt;Deleting a manifest by tag has been deprecated.&lt;/li&gt;
      &lt;li&gt;Specified `Docker-Content-Digest` header for appropriate entities.&lt;/li&gt;
      &lt;li&gt;Added error code for unsupported operations.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This section covers client flows and details of the API endpoints. The URI
layout of the new API is structured to support a rich authentication and
authorization model by leveraging namespaces. All endpoints will be prefixed
by the API version and the repository name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, an API endpoint that will work with the &lt;code&gt;library/ubuntu&lt;/code&gt;
repository, the URI prefix will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/v2/library/ubuntu/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This scheme provides rich access control over various operations and methods
using the URI prefix and http methods that can be controlled in variety of
ways.&lt;/p&gt;

&lt;p&gt;Classically, repository names have always been two path components where each
path component is less than 30 characters. The V2 registry API does not
enforce this. The rules for a repository name are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A repository name is broken up into &lt;em&gt;path components&lt;/em&gt;. A component of a
repository name must be at least one lowercase, alpha-numeric characters,
optionally separated by periods, dashes or underscores. More strictly, it
must match the regular expression &lt;code&gt;[a-z0-9]+(?:[._-][a-z0-9]+)*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If a repository  name has two or more path components, they must be
separated by a forward slash (&amp;ldquo;/&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;The total length of a repository name, including slashes, must be less the
256 characters.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These name requirements &lt;em&gt;only&lt;/em&gt; apply to the registry API and should accept a
superset of what is supported by other docker ecosystem components.&lt;/p&gt;

&lt;p&gt;All endpoints should support aggressive http caching, compression and range
headers, where appropriate. The new API attempts to leverage HTTP semantics
where possible but may break from standards to implement targeted features.&lt;/p&gt;

&lt;p&gt;For detail on individual endpoints, please see the &lt;a href=&#34;#detail&#34;&gt;&lt;em&gt;Detail&lt;/em&gt;&lt;/a&gt;
section.&lt;/p&gt;

&lt;h3 id=&#34;errors&#34;&gt;Errors&lt;/h3&gt;

&lt;p&gt;Actionable failure conditions, covered in detail in their relevant sections,
are reported as part of 4xx responses, in a json response body. One or more
errors will be returned in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;errors:&amp;quot; [{
            &amp;quot;code&amp;quot;: &amp;lt;error identifier&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;lt;message describing condition&amp;gt;,
            &amp;quot;detail&amp;quot;: &amp;lt;unstructured&amp;gt;
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;code&lt;/code&gt; field will be a unique identifier, all caps with underscores by
convention. The &lt;code&gt;message&lt;/code&gt; field will be a human readable string. The optional
&lt;code&gt;detail&lt;/code&gt; field may contain arbitrary json data providing information the
client can use to resolve the issue.&lt;/p&gt;

&lt;p&gt;While the client can take action on certain error codes, the registry may add
new error codes over time. All client implementations should treat unknown
error codes as &lt;code&gt;UNKNOWN&lt;/code&gt;, allowing future error codes to be added without
breaking API compatibility. For the purposes of the specification error codes
will only be added and never removed.&lt;/p&gt;

&lt;p&gt;For a complete account of all error codes, please see the &lt;em&gt;Detail&lt;/em&gt; section.&lt;/p&gt;

&lt;h3 id=&#34;api-version-check&#34;&gt;API Version Check&lt;/h3&gt;

&lt;p&gt;A minimal endpoint, mounted at &lt;code&gt;/v2/&lt;/code&gt; will provide version support information
based on its response statuses. The request format is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a &lt;code&gt;200 OK&lt;/code&gt; response is returned, the registry implements the V2(.1)
registry API and the client may proceed safely with other V2 operations.
Optionally, the response may contain information about the supported paths in
the response body. The client should be prepared to ignore this data.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;401 Unauthorized&lt;/code&gt; response is returned, the client should take action
based on the contents of the &amp;ldquo;WWW-Authenticate&amp;rdquo; header and try the endpoint
again. Depending on access control setup, the client may still have to
authenticate against different resources, even if this check succeeds.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;404 Not Found&lt;/code&gt; response status, or other unexpected status, is returned,
the client should proceed with the assumption that the registry does not
implement V2 of the API.&lt;/p&gt;

&lt;p&gt;When a &lt;code&gt;200 OK&lt;/code&gt; or &lt;code&gt;401 Unauthorized&lt;/code&gt; response is returned, the
&amp;ldquo;Docker-Distribution-API-Version&amp;rdquo; header should be set to &amp;ldquo;registry/2.0&amp;rdquo;.
Clients may require this header value to determine if the endpoint serves this
API. When this header is omitted, clients may fallback to an older API version.&lt;/p&gt;

&lt;h3 id=&#34;content-digests&#34;&gt;Content Digests&lt;/h3&gt;

&lt;p&gt;This API design is driven heavily by &lt;a href=&#34;http://en.wikipedia.org/wiki/Content-addressable_storage&#34;&gt;content addressability&lt;/a&gt;.
The core of this design is the concept of a content addressable identifier. It
uniquely identifies content by taking a collision-resistant hash of the bytes.
Such an identifier can be independently calculated and verified by selection
of a common &lt;em&gt;algorithm&lt;/em&gt;. If such an identifier can be communicated in a secure
manner, one can retrieve the content from an insecure source, calculate it
independently and be certain that the correct content was obtained. Put simply,
the identifier is a property of the content.&lt;/p&gt;

&lt;p&gt;To disambiguate from other concepts, we call this identifier a &lt;em&gt;digest&lt;/em&gt;. A
&lt;em&gt;digest&lt;/em&gt; is a serialized hash result, consisting of a &lt;em&gt;algorithm&lt;/em&gt; and &lt;em&gt;hex&lt;/em&gt;
portion. The &lt;em&gt;algorithm&lt;/em&gt; identifies the methodology used to calculate the
digest. The &lt;em&gt;hex&lt;/em&gt; portion is the hex-encoded result of the hash.&lt;/p&gt;

&lt;p&gt;We define a &lt;em&gt;digest&lt;/em&gt; string to match the following grammar:&lt;/p&gt;

&lt;p&gt;digest      := algorithm &amp;ldquo;:&amp;rdquo; hex
  algorithm   := /[A-Fa-f0-9_+.-]+/
  hex         := /[A-Fa-f0-9]+/&lt;/p&gt;

&lt;p&gt;Some examples of &lt;em&gt;digests&lt;/em&gt; include the following:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;digest&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b&lt;/td&gt;
&lt;td&gt;Common sha256 based digest&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tarsum.v1+sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b&lt;/td&gt;
&lt;td&gt;Tarsum digest, used for legacy layer digests.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While we show an example of using a &lt;code&gt;tarsum&lt;/code&gt; digest, the security
of tarsum has not been verified. It is recommended that most implementations
use sha256 for interoperability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the &lt;em&gt;algorithm&lt;/em&gt; does allow one to implement a wide variety of
algorithms, compliant implementations should use sha256. Heavy processing of
input before calculating a hash is discouraged to avoid degrading the
uniqueness of the &lt;em&gt;digest&lt;/em&gt; but some canonicalization may be performed to
ensure consistent identifiers.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use a simple example in pseudo-code to demonstrate a digest calculation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let C = &#39;a small string&#39;
let B = sha256(C)
let D = &#39;sha256:&#39; + EncodeHex(B)
let ID(C) = D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, we have bytestring &lt;em&gt;C&lt;/em&gt; passed into a function, &lt;em&gt;SHA256&lt;/em&gt;, that returns a
bytestring B, which is the hash of &lt;em&gt;C&lt;/em&gt;. &lt;em&gt;D&lt;/em&gt; gets the algorithm concatenated
with the hex encoding of &lt;em&gt;B&lt;/em&gt;. We then define the identifier of &lt;em&gt;C&lt;/em&gt; to &lt;em&gt;ID&amp;copy;&lt;/em&gt;
as equal to &lt;em&gt;D&lt;/em&gt;. A digest can be verified by independently calculating &lt;em&gt;D&lt;/em&gt; and
comparing it with identifier &lt;em&gt;ID&amp;copy;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;digest-header&#34;&gt;Digest Header&lt;/h4&gt;

&lt;p&gt;To provide verification of http content, any response may include a &lt;code&gt;Docker-
Content-Digest&lt;/code&gt; header. This will include the digest of the target entity
returned in the response. For blobs, this is the entire blob content. For
manifests, this is the manifest body without the signature content, also known
as the JWS payload. Note that the commonly used canonicalization for digest
calculation may be dependent on the mediatype of the content, such as with
manifests.&lt;/p&gt;

&lt;p&gt;The client may choose to ignore the header or may verify it to ensure content
integrity and transport security. This is most important when fetching by a
digest. To ensure security, the content should be verified against the digest
used to fetch the content. At times, the returned digest may differ from that
used to initiate a request. Such digests are considered to be from different
&lt;em&gt;domains&lt;/em&gt;, meaning they have different values for &lt;em&gt;algorithm&lt;/em&gt;. In such a case,
the client may choose to verify the digests in both domains or ignore the
server&amp;rsquo;s digest. To maintain security, the client &lt;em&gt;must&lt;/em&gt; always verify the
content against the &lt;em&gt;digest&lt;/em&gt; used to fetch the content.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; If a &lt;em&gt;digest&lt;/em&gt; is used to fetch content, the client should use
the same digest used to fetch the content to verify it. The header &lt;code&gt;Docker-
Content-Digest&lt;/code&gt; should not be trusted over the &amp;ldquo;local&amp;rdquo; digest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;pulling-an-image&#34;&gt;Pulling An Image&lt;/h3&gt;

&lt;p&gt;An &amp;ldquo;image&amp;rdquo; is a combination of a JSON manifest and individual layer files. The
process of pulling an image centers around retrieving these two components.&lt;/p&gt;

&lt;p&gt;The first step in pulling an image is to retrieve the manifest. For reference,
the relevant manifest fields for the registry are the following:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;The name of the image.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tag&lt;/td&gt;
&lt;td&gt;The tag for this version of the image.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fsLayers&lt;/td&gt;
&lt;td&gt;A list of layer descriptors (including tarsum)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;signature&lt;/td&gt;
&lt;td&gt;A JWS used to verify the manifest content&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more information about the manifest format, please see
&lt;a href=&#34;https://github.com/docker/docker/issues/8093&#34;&gt;docker/docker#8093&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the manifest is in hand, the client must verify the signature to ensure
the names and layers are valid. Once confirmed, the client will then use the
tarsums to download the individual layers. Layers are stored in as blobs in
the V2 registry API, keyed by their tarsum digest.&lt;/p&gt;

&lt;h4 id=&#34;pulling-an-image-manifest&#34;&gt;Pulling an Image Manifest&lt;/h4&gt;

&lt;p&gt;The image manifest can be fetched with the following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; parameter identify the image and are required. The
reference may include a tag or digest.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;404 Not Found&lt;/code&gt; response will be returned if the image is unknown to the
registry. If the image exists and the response is successful, the image
manifest will be returned, with the following format (see docker/docker#8093
for details):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
   &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
   &amp;quot;tag&amp;quot;: &amp;lt;tag&amp;gt;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;lt;tarsum&amp;gt;
      },
      ...
    ]
   ],
   &amp;quot;history&amp;quot;: &amp;lt;v1 images&amp;gt;,
   &amp;quot;signature&amp;quot;: &amp;lt;JWS&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client should verify the returned manifest signature for authenticity
before fetching layers.&lt;/p&gt;

&lt;h4 id=&#34;pulling-a-layer&#34;&gt;Pulling a Layer&lt;/h4&gt;

&lt;p&gt;Layers are stored in the blob portion of the registry, keyed by tarsum digest.
Pulling a layer is carried out by a standard http request. The URL is as
follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;tarsum&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access to a layer will be gated by the &lt;code&gt;name&lt;/code&gt; of the repository but is
identified uniquely in the registry by &lt;code&gt;tarsum&lt;/code&gt;. The &lt;code&gt;tarsum&lt;/code&gt; parameter is an
opaque field, to be interpreted by the tarsum library.&lt;/p&gt;

&lt;p&gt;This endpoint may issue a 307 (302 for &amp;lt;HTTP 1.1) redirect to another service
for downloading the layer and clients should be prepared to handle redirects.&lt;/p&gt;

&lt;p&gt;This endpoint should support aggressive HTTP caching for image layers. Support
for Etags, modification dates and other cache control headers should be
included. To allow for incremental downloads, &lt;code&gt;Range&lt;/code&gt; requests should be
supported, as well.&lt;/p&gt;

&lt;h3 id=&#34;pushing-an-image&#34;&gt;Pushing An Image&lt;/h3&gt;

&lt;p&gt;Pushing an image works in the opposite order as a pull. After assembling the
image manifest, the client must first push the individual layers. When the
layers are fully pushed into the registry, the client should upload the signed
manifest.&lt;/p&gt;

&lt;p&gt;The details of each step of the process are covered in the following sections.&lt;/p&gt;

&lt;h4 id=&#34;pushing-a-layer&#34;&gt;Pushing a Layer&lt;/h4&gt;

&lt;p&gt;All layer uploads use two steps to manage the upload process. The first step
starts the upload in the registry service, returning a url to carry out the
second step. The second step uses the upload url to transfer the actual data.
Uploads are started with a POST request which returns a url that can be used
to push data and check upload status.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Location&lt;/code&gt; header will be used to communicate the upload location after
each request. While it won&amp;rsquo;t change in the this specification, clients should
use the most recent value returned by the API.&lt;/p&gt;

&lt;h5 id=&#34;starting-an-upload&#34;&gt;Starting An Upload&lt;/h5&gt;

&lt;p&gt;To begin the process, a POST request should be issued in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /v2/&amp;lt;name&amp;gt;/blobs/uploads/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters of this request are the image namespace under which the layer
will be linked. Responses to this request are covered below.&lt;/p&gt;

&lt;h5 id=&#34;existing-layers&#34;&gt;Existing Layers&lt;/h5&gt;

&lt;p&gt;The existence of a layer can be checked via a &lt;code&gt;HEAD&lt;/code&gt; request to the blob store
API. The request should be formatted as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HEAD /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the layer with the tarsum specified in &lt;code&gt;digest&lt;/code&gt; is available, a 200 OK
response will be received, with no actual body content (this is according to
http specification). The response will look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length of blob&amp;gt;
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this response is received, the client can assume that the layer is
already available in the registry under the given name and should take no
further action to upload the layer. Note that the binary digests may differ
for the existing registry layer, but the tarsums will be guaranteed to match.&lt;/p&gt;

&lt;h5 id=&#34;uploading-the-layer&#34;&gt;Uploading the Layer&lt;/h5&gt;

&lt;p&gt;If the POST request is successful, a &lt;code&gt;202 Accepted&lt;/code&gt; response will be returned
with the upload URL in the &lt;code&gt;Location&lt;/code&gt; header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: bytes=0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of the upload process can be carried out with the returned url,
called the &amp;ldquo;Upload URL&amp;rdquo; from the &lt;code&gt;Location&lt;/code&gt; header. All responses to the
upload url, whether sending data or getting status, will be in this format.
Though the URI format (&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;) for the &lt;code&gt;Location&lt;/code&gt;
header is specified, clients should treat it as an opaque url and should never
try to assemble the it. While the &lt;code&gt;uuid&lt;/code&gt; parameter may be an actual UUID, this
proposal imposes no constraints on the format and clients should never impose
any.&lt;/p&gt;

&lt;p&gt;If clients need to correlate local upload state with remote upload state, the
contents of the &lt;code&gt;Docker-Upload-UUID&lt;/code&gt; header should be used. Such an id can be
used to key the last used location header when implementing resumable uploads.&lt;/p&gt;

&lt;h5 id=&#34;upload-progress&#34;&gt;Upload Progress&lt;/h5&gt;

&lt;p&gt;The progress and chunk coordination of the upload process will be coordinated
through the &lt;code&gt;Range&lt;/code&gt; header. While this is a non-standard use of the &lt;code&gt;Range&lt;/code&gt;
header, there are examples of &lt;a href=&#34;https://developers.google.com/youtube/v3/guides/using_resumable_upload_protocol&#34;&gt;similar approaches&lt;/a&gt; in APIs with heavy use.
For an upload that just started, for an example with a 1000 byte layer file,
the &lt;code&gt;Range&lt;/code&gt; header would be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Range: bytes=0-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the status of an upload, issue a GET request to the upload URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response will be similar to the above, except will return 204 status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: bytes=0-&amp;lt;offset&amp;gt;
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the HTTP &lt;code&gt;Range&lt;/code&gt; header byte ranges are inclusive and that will be
honored, even in non-standard use cases.&lt;/p&gt;

&lt;h5 id=&#34;monolithic-upload&#34;&gt;Monolithic Upload&lt;/h5&gt;

&lt;p&gt;A monolithic upload is simply a chunked upload with a single chunk and may be
favored by clients that would like to avoided the complexity of chunking. To
carry out a &amp;ldquo;monolithic&amp;rdquo; upload, one can simply put the entire content blob to
the provided URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;?digest=&amp;lt;tarsum&amp;gt;[&amp;amp;digest=sha256:&amp;lt;hex digest&amp;gt;]
Content-Length: &amp;lt;size of layer&amp;gt;
Content-Type: application/octet-stream

&amp;lt;Layer Binary Data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;digest&amp;rdquo; parameter must be included with the PUT request. Please see the
&lt;em&gt;Completed Upload&lt;/em&gt; section for details on the parameters and expected
responses.&lt;/p&gt;

&lt;p&gt;Additionally, the upload can be completed with a single &lt;code&gt;POST&lt;/code&gt; request to
the uploads endpoint, including the &amp;ldquo;size&amp;rdquo; and &amp;ldquo;digest&amp;rdquo; parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /v2/&amp;lt;name&amp;gt;/blobs/uploads/?digest=&amp;lt;tarsum&amp;gt;[&amp;amp;digest=sha256:&amp;lt;hex digest&amp;gt;]
Content-Length: &amp;lt;size of layer&amp;gt;
Content-Type: application/octet-stream
  
&amp;lt;Layer Binary Data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the registry service, this should allocate a download, accept and verify
the data and return the same  response as the final chunk of an upload. If the
POST request fails collecting the data in any way, the registry should attempt
to return an error response to the client with the &lt;code&gt;Location&lt;/code&gt; header providing
a place to continue the download.&lt;/p&gt;

&lt;p&gt;The single &lt;code&gt;POST&lt;/code&gt; method is provided for convenience and most clients should
implement &lt;code&gt;POST&lt;/code&gt; + &lt;code&gt;PUT&lt;/code&gt; to support reliable resume of uploads.&lt;/p&gt;

&lt;h5 id=&#34;chunked-upload&#34;&gt;Chunked Upload&lt;/h5&gt;

&lt;p&gt;To carry out an upload of a chunk, the client can specify a range header and
only include that part of the layer file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Content-Length: &amp;lt;size of chunk&amp;gt;
Content-Range: &amp;lt;start of range&amp;gt;-&amp;lt;end of range&amp;gt;
Content-Type: application/octet-stream

&amp;lt;Layer Chunk Binary Data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is no enforcement on layer chunk splits other than that the server must
receive them in order. The server may enforce a minimum chunk size. If the
server cannot accept the chunk, a &lt;code&gt;416 Requested Range Not Satisfiable&lt;/code&gt;
response will be returned and will include a &lt;code&gt;Range&lt;/code&gt; header indicating the
current status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;416 Requested Range Not Satisfiable
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: 0-&amp;lt;last valid range&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this response is received, the client should resume from the &amp;ldquo;last valid
range&amp;rdquo; and upload the subsequent chunk. A 416 will be returned under the
following conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Invalid Content-Range header format&lt;/li&gt;
&lt;li&gt;Out of order chunk: the range of the next chunk must start immediately after
the &amp;ldquo;last valid range&amp;rdquo; from the previous response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a chunk is accepted as part of the upload, a &lt;code&gt;202 Accepted&lt;/code&gt; response will
be returned, including a &lt;code&gt;Range&lt;/code&gt; header with the current upload status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: bytes=0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;completed-upload&#34;&gt;Completed Upload&lt;/h5&gt;

&lt;p&gt;For an upload to be considered complete, the client must submit a &lt;code&gt;PUT&lt;/code&gt;
request on the upload endpoint with a digest parameter. If it is not provided,
the upload will not be considered complete. The format for the final chunk
will be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/blob/uploads/&amp;lt;uuid&amp;gt;?digest=&amp;lt;tarsum&amp;gt;[&amp;amp;digest=sha256:&amp;lt;hex digest&amp;gt;]
Content-Length: &amp;lt;size of chunk&amp;gt;
Content-Range: &amp;lt;start of range&amp;gt;-&amp;lt;end of range&amp;gt;
Content-Type: application/octet-stream

&amp;lt;Last Layer Chunk Binary Data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optionally, if all chunks have already been uploaded, a &lt;code&gt;PUT&lt;/code&gt; request with a
&lt;code&gt;digest&lt;/code&gt; parameter and zero-length body may be sent to complete and validated
the upload. Multiple &amp;ldquo;digest&amp;rdquo; parameters may be provided with different
digests. The server may verify none or all of them but &lt;em&gt;must&lt;/em&gt; notify the
client if the content is rejected.&lt;/p&gt;

&lt;p&gt;When the last chunk is received and the layer has been validated, the client
will receive a &lt;code&gt;201 Created&lt;/code&gt; response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;201 Created
Location: /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;tarsum&amp;gt;
Content-Length: 0
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Location&lt;/code&gt; header will contain the registry URL to access the accepted
layer file. The &lt;code&gt;Docker-Content-Digest&lt;/code&gt; header returns the canonical digest of
the uploaded blob which may differ from the provided digest. Most clients may
ignore the value but if it is used, the client should verify the value against
the uploaded blob data.&lt;/p&gt;

&lt;h6 id=&#34;digest-parameter&#34;&gt;Digest Parameter&lt;/h6&gt;

&lt;p&gt;The &amp;ldquo;digest&amp;rdquo; parameter is designed as an opaque parameter to support
verification of a successful transfer. The initial version of the registry API
will support a tarsum digest, in the standard tarsum format. For example, a
HTTP URI parameter might be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tarsum.v1+sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given this parameter, the registry will verify that the provided content does
result in this tarsum. Optionally, the registry can support other other digest
parameters for non-tarfile content stored as a layer. A regular hash digest
might be specified as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Such a parameter would be used to verify that the binary content (as opposed
to the tar content) would be verified at the end of the upload process.&lt;/p&gt;

&lt;p&gt;For the initial version, registry servers are only required to support the
tarsum format.&lt;/p&gt;

&lt;h5 id=&#34;canceling-an-upload&#34;&gt;Canceling an Upload&lt;/h5&gt;

&lt;p&gt;An upload can be cancelled by issuing a DELETE request to the upload endpoint.
The format will be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this request is issued, the upload uuid will no longer be valid and the
registry server will dump all intermediate data. While uploads will time out
if not completed, clients should issue this request if they encounter a fatal
error but still have the ability to issue an http request.&lt;/p&gt;

&lt;h5 id=&#34;errors-1&#34;&gt;Errors&lt;/h5&gt;

&lt;p&gt;If an 502, 503 or 504 error is received, the client should assume that the
download can proceed due to a temporary condition, honoring the appropriate
retry mechanism. Other 5xx errors should be treated as terminal.&lt;/p&gt;

&lt;p&gt;If there is a problem with the upload, a 4xx error will be returned indicating
the problem. After receiving a 4xx response (except 416, as called out above),
the upload will be considered failed and the client should take appropriate
action.&lt;/p&gt;

&lt;p&gt;Note that the upload url will not be available forever. If the upload uuid is
unknown to the registry, a &lt;code&gt;404 Not Found&lt;/code&gt; response will be returned and the
client must restart the upload process.&lt;/p&gt;

&lt;h3 id=&#34;deleting-a-layer&#34;&gt;Deleting a Layer&lt;/h3&gt;

&lt;p&gt;A layer may be deleted from the registry via its &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt;. A
delete may be issued with the following request format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the blob exists and has been successfully deleted, the following response
will be issued:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Content-Length: None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the blob had already been deleted or did not exist, a &lt;code&gt;404 Not Found&lt;/code&gt;
response will be issued instead.&lt;/p&gt;

&lt;p&gt;If a layer is deleted which is referenced by a manifest in the registry,
then the complete images will not be resolvable.&lt;/p&gt;

&lt;h4 id=&#34;pushing-an-image-manifest&#34;&gt;Pushing an Image Manifest&lt;/h4&gt;

&lt;p&gt;Once all of the layers for an image are uploaded, the client can upload the
image manifest. An image can be pushed using the following request format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;

{
   &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
   &amp;quot;tag&amp;quot;: &amp;lt;tag&amp;gt;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;lt;tarsum&amp;gt;
      },
      ...
    ]
   ],
   &amp;quot;history&amp;quot;: &amp;lt;v1 images&amp;gt;,
   &amp;quot;signature&amp;quot;: &amp;lt;JWS&amp;gt;,
   ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; fields of the response body must match those specified in
the URL. The &lt;code&gt;reference&lt;/code&gt; field may be a &amp;ldquo;tag&amp;rdquo; or a &amp;ldquo;digest&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If there is a problem with pushing the manifest, a relevant 4xx response will
be returned with a JSON error message. Please see the _PUT Manifest section
for details on possible error codes that may be returned.&lt;/p&gt;

&lt;p&gt;If one or more layers are unknown to the registry, &lt;code&gt;BLOB_UNKNOWN&lt;/code&gt; errors are
returned. The &lt;code&gt;detail&lt;/code&gt; field of the error response will have a &lt;code&gt;digest&lt;/code&gt; field
identifying the missing blob, which will be a tarsum. An error is returned for
each unknown blob. The response format is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;errors:&amp;quot; [{
            &amp;quot;code&amp;quot;: &amp;quot;BLOB_UNKNOWN&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;blob unknown to registry&amp;quot;,
            &amp;quot;detail&amp;quot;: {
                &amp;quot;digest&amp;quot;: &amp;lt;tarsum&amp;gt;
            }
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listing-repositories&#34;&gt;Listing Repositories&lt;/h3&gt;

&lt;p&gt;Images are stored in collections, known as a &lt;em&gt;repository&lt;/em&gt;, which is keyed by a
&lt;code&gt;name&lt;/code&gt;, as seen throughout the API specification. A registry instance may
contain several repositories. The list of available repositories is made
available through the &lt;em&gt;catalog&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The catalog for a given registry can be retrieved with the following request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/_catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response will be in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Type: application/json

{
  &amp;quot;repositories&amp;quot;: [
    &amp;lt;name&amp;gt;,
    ...
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the contents of the response are specific to the registry
implementation. Some registries may opt to provide a full catalog output,
limit it based on the user&amp;rsquo;s access level or omit upstream results, if
providing mirroring functionality. Subsequently, the presence of a repository
in the catalog listing only means that the registry &lt;em&gt;may&lt;/em&gt; provide access to
the repository at the time of the request. Conversely, a missing entry does
&lt;em&gt;not&lt;/em&gt; mean that the registry does not have the repository. More succinctly,
the presence of a repository only guarantees that it is there but not that it
is &lt;em&gt;not&lt;/em&gt; there.&lt;/p&gt;

&lt;p&gt;For registries with a large number of repositories, this response may be quite
large. If such a response is expected, one should use pagination.&lt;/p&gt;

&lt;h4 id=&#34;pagination&#34;&gt;Pagination&lt;/h4&gt;

&lt;p&gt;Paginated catalog results can be retrieved by adding an &lt;code&gt;n&lt;/code&gt; parameter to the
request URL, declaring that the response should be limited to &lt;code&gt;n&lt;/code&gt; results.
Starting a paginated flow begins as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/_catalog?n=&amp;lt;integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above specifies that a catalog response should be returned, from the start of
the result set, ordered lexically, limiting the number of results to &lt;code&gt;n&lt;/code&gt;. The
response to such a request would look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Type: application/json
Link: &amp;lt;&amp;lt;url&amp;gt;?n=&amp;lt;n from the request&amp;gt;&amp;amp;last=&amp;lt;last repository in response&amp;gt;&amp;gt;; rel=&amp;quot;next&amp;quot;

{
  &amp;quot;repositories&amp;quot;: [
    &amp;lt;name&amp;gt;,
    ...
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above includes the &lt;em&gt;first&lt;/em&gt; &lt;code&gt;n&lt;/code&gt; entries from the result set. To get the
&lt;em&gt;next&lt;/em&gt; &lt;code&gt;n&lt;/code&gt; entries, one can create a URL where the argument &lt;code&gt;last&lt;/code&gt; has the
value from &lt;code&gt;repositories[len(repositories)-1]&lt;/code&gt;. If there are indeed more
results, the URL for the next block is encoded in an
&lt;a href=&#34;https://tools.ietf.org/html/rfc5988&#34;&gt;RFC5988&lt;/a&gt; &lt;code&gt;Link&lt;/code&gt; header, as a &amp;ldquo;next&amp;rdquo;
relation. The presence of the &lt;code&gt;Link&lt;/code&gt; header communicates to the client that
the entire result set has not been returned and another request must be
issued. If the header is not present, the client can assume that all results
have been recieved.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the request template above, note that the brackets
are required. For example, if the url is
&lt;code&gt;http://example.com/v2/_catalog?n=20&amp;amp;last=b&lt;/code&gt;, the value of the header would
be &lt;code&gt;&amp;lt;http://example.com/v2/_catalog?n=20&amp;amp;last=b&amp;gt;; rel=&amp;quot;next&amp;quot;&lt;/code&gt;. Please see
&lt;a href=&#34;https://tools.ietf.org/html/rfc5988&#34;&gt;RFC5988&lt;/a&gt; for details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Compliant client implementations should always use the &lt;code&gt;Link&lt;/code&gt; header
value when proceeding through results linearly. The client may construct URLs
to skip forward in the catalog.&lt;/p&gt;

&lt;p&gt;To get the next result set, a client would issue the request as follows, using
the URL encoded in the described &lt;code&gt;Link&lt;/code&gt; header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/_catalog?n=&amp;lt;n from the request&amp;gt;&amp;amp;last=&amp;lt;last repository value from previous response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above process should then be repeated until the &lt;code&gt;Link&lt;/code&gt; header is no longer
set.&lt;/p&gt;

&lt;p&gt;The catalog result set is represented abstractly as a lexically sorted list,
where the position in that list can be specified by the query term &lt;code&gt;last&lt;/code&gt;. The
entries in the response start &lt;em&gt;after&lt;/em&gt; the term specified by &lt;code&gt;last&lt;/code&gt;, up to &lt;code&gt;n&lt;/code&gt;
entries.&lt;/p&gt;

&lt;p&gt;The behavior of &lt;code&gt;last&lt;/code&gt; is quite simple when demonstrated with an example. Let
us say the registry has the following repositories:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a
b
c
d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the value of &lt;code&gt;n&lt;/code&gt; is 2, &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; will be returned on the first response.
The &lt;code&gt;Link&lt;/code&gt; header returned on the response will have &lt;code&gt;n&lt;/code&gt; set to 2 and last set
to &lt;em&gt;b&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Link: &amp;lt;&amp;lt;url&amp;gt;?n=2&amp;amp;last=b&amp;gt;; rel=&amp;quot;next&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client can then issue the request with above value from the &lt;code&gt;Link&lt;/code&gt; header,
receiving the values &lt;em&gt;c&lt;/em&gt; and &lt;em&gt;d&lt;/em&gt;. Note that n may change on second to last
response or be omitted fully, if the server may so choose.&lt;/p&gt;

&lt;h3 id=&#34;listing-image-tags&#34;&gt;Listing Image Tags&lt;/h3&gt;

&lt;p&gt;It may be necessary to list all of the tags under a given repository. The tags
for an image repository can be retrieved with the following request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/tags/list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response will be in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Type: application/json

{
    &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
    &amp;quot;tags&amp;quot;: [
        &amp;lt;tag&amp;gt;,
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For repositories with a large number of tags, this response may be quite
large. If such a response is expected, one should use the pagination.&lt;/p&gt;

&lt;h4 id=&#34;pagination-1&#34;&gt;Pagination&lt;/h4&gt;

&lt;p&gt;Paginated tag results can be retrieved by adding the appropriate parameters to
the request URL described above. The behavior of tag pagination is identical
to that specified for catalog pagination. We cover a simple flow to highlight
any differences.&lt;/p&gt;

&lt;p&gt;Starting a paginated flow may begin as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/tags/list?n=&amp;lt;integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above specifies that a tags response should be returned, from the start of
the result set, ordered lexically, limiting the number of results to &lt;code&gt;n&lt;/code&gt;. The
response to such a request would look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Type: application/json
Link: &amp;lt;&amp;lt;url&amp;gt;?n=&amp;lt;n from the request&amp;gt;&amp;amp;last=&amp;lt;last tag value from previous response&amp;gt;&amp;gt;; rel=&amp;quot;next&amp;quot;

{
  &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
  &amp;quot;tags&amp;quot;: [
    &amp;lt;tag&amp;gt;,
    ...
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the next result set, a client would issue the request as follows, using
the value encoded in the &lt;a href=&#34;https://tools.ietf.org/html/rfc5988&#34;&gt;RFC5988&lt;/a&gt; &lt;code&gt;Link&lt;/code&gt;
header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/tags/list?n=&amp;lt;n from the request&amp;gt;&amp;amp;last=&amp;lt;last tag value from previous response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above process should then be repeated until the &lt;code&gt;Link&lt;/code&gt; header is no longer
set in the response. The behavior of the &lt;code&gt;last&lt;/code&gt; parameter, the provided
response result, lexical ordering and encoding of the &lt;code&gt;Link&lt;/code&gt; header are
identical to that of catalog pagination.&lt;/p&gt;

&lt;h3 id=&#34;deleting-an-image&#34;&gt;Deleting an Image&lt;/h3&gt;

&lt;p&gt;An image may be deleted from the registry via its &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt;. A
delete may be issued with the following request format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For deletes, &lt;code&gt;reference&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be a digest or the delete will fail. If the
image exists and has been successfully deleted, the following response will be
issued:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Content-Length: None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the image had already been deleted or did not exist, a &lt;code&gt;404 Not Found&lt;/code&gt;
response will be issued instead.&lt;/p&gt;

&lt;h2 id=&#34;detail&#34;&gt;Detail&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This section is still under construction. For the purposes of
implementation, if any details below differ from the described request flows
above, the section below should be corrected. When they match, this note
should be removed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The behavior of the endpoints are covered in detail in this section, organized
by route and entity. All aspects of the request and responses are covered,
including headers, parameters and body formats. Examples of requests and their
corresponding responses, with success and failure, are enumerated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The sections on endpoint detail are arranged with an example
request, a description of the request, followed by information about that
request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A list of methods and URIs are covered in the table below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Path&lt;/th&gt;
&lt;th&gt;Entity&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Base&lt;/td&gt;
&lt;td&gt;Check that the endpoint implements Docker Registry API V2.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/tags/list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tags&lt;/td&gt;
&lt;td&gt;Fetch the tags under the repository identified by &lt;code&gt;name&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Manifest&lt;/td&gt;
&lt;td&gt;Fetch the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; where &lt;code&gt;reference&lt;/code&gt; can be a tag or digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Manifest&lt;/td&gt;
&lt;td&gt;Put the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; where &lt;code&gt;reference&lt;/code&gt; can be a tag or digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Manifest&lt;/td&gt;
&lt;td&gt;Delete the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt;. Note that a manifest can &lt;em&gt;only&lt;/em&gt; be deleted by &lt;code&gt;digest&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob&lt;/td&gt;
&lt;td&gt;Retrieve the blob from the registry identified by &lt;code&gt;digest&lt;/code&gt;. A &lt;code&gt;HEAD&lt;/code&gt; request can also be issued to this endpoint to obtain resource information without receiving all data.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob&lt;/td&gt;
&lt;td&gt;Delete the blob identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Initiate Blob Upload&lt;/td&gt;
&lt;td&gt;Initiate a resumable blob upload. If successful, an upload location will be provided to complete the upload. Optionally, if the &lt;code&gt;digest&lt;/code&gt; parameter is present, the request body will be used to complete the upload in a single request.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob Upload&lt;/td&gt;
&lt;td&gt;Retrieve status of upload identified by &lt;code&gt;uuid&lt;/code&gt;. The primary purpose of this endpoint is to resolve the current status of a resumable upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PATCH&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob Upload&lt;/td&gt;
&lt;td&gt;Upload a chunk of data for the specified upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob Upload&lt;/td&gt;
&lt;td&gt;Complete the upload specified by &lt;code&gt;uuid&lt;/code&gt;, optionally appending the body as the final chunk.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob Upload&lt;/td&gt;
&lt;td&gt;Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished uploads will eventually timeout.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/_catalog&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Catalog&lt;/td&gt;
&lt;td&gt;Retrieve a sorted, json list of repositories available in the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The detail for each endpoint is covered in the following sections.&lt;/p&gt;

&lt;h3 id=&#34;errors-2&#34;&gt;Errors&lt;/h3&gt;

&lt;p&gt;The error codes encountered via the API are enumerated in the following table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob unknown to registry&lt;/td&gt;
&lt;td&gt;This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload invalid&lt;/td&gt;
&lt;td&gt;The blob upload encountered an error and can no longer proceed.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload unknown to registry&lt;/td&gt;
&lt;td&gt;If a blob upload has been cancelled or was never started, this error code may be returned.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MANIFEST_BLOB_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob unknown to registry&lt;/td&gt;
&lt;td&gt;This error may be returned when a manifest blob is  unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MANIFEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest invalid&lt;/td&gt;
&lt;td&gt;During upload, manifests undergo several checks ensuring validity. If those checks fail, this error may be returned, unless a more specific error is included. The detail will contain information the failed validation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MANIFEST_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest unknown&lt;/td&gt;
&lt;td&gt;This error is returned when the manifest, identified by name and tag is unknown to the repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MANIFEST_UNVERIFIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest failed signature verification&lt;/td&gt;
&lt;td&gt;During manifest upload, if the manifest fails signature verification, this error will be returned.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SIZE_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided length did not match content length&lt;/td&gt;
&lt;td&gt;When a layer is uploaded, the provided size will be checked against the uploaded content. If they do not match, this error will be returned.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TAG_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest tag did not match URI&lt;/td&gt;
&lt;td&gt;During a manifest upload, if the tag in the manifest does not match the uri tag, this error will be returned.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNSUPPORTED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The operation is unsupported.&lt;/td&gt;
&lt;td&gt;The operation was unsupported due to a missing implementation or invalid set of parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;base&#34;&gt;Base&lt;/h3&gt;

&lt;p&gt;Base V2 API route. Typically, this can be used for lightweight version checks and to validate registry authentication.&lt;/p&gt;

&lt;h4 id=&#34;get-base&#34;&gt;GET Base&lt;/h4&gt;

&lt;p&gt;Check that the endpoint implements Docker Registry API V2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The API implements V2 protocol and is accessible.&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The registry does not implement the V2 API.&lt;/p&gt;

&lt;h6 id=&#34;on-failure-authentication-required&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;tags&#34;&gt;Tags&lt;/h3&gt;

&lt;p&gt;Retrieve information about tags.&lt;/p&gt;

&lt;h4 id=&#34;get-tags&#34;&gt;GET Tags&lt;/h4&gt;

&lt;p&gt;Fetch the tags under the repository identified by &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;tags-1&#34;&gt;Tags&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/tags/list
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Return all tags for the repository&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok-1&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
    &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
    &amp;quot;tags&amp;quot;: [
        &amp;lt;tag&amp;gt;,
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A list of tags for the named repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-1&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;tags-paginated&#34;&gt;Tags Paginated&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/tags/list?n=&amp;lt;integer&amp;gt;&amp;amp;last=&amp;lt;integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Return a portion of the tags for the specified repository.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;Limit the number of entries in each response. It not present, all entries will be returned.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;Result set will include values lexically after last.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok-2&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length&amp;gt;
Link: &amp;lt;&amp;lt;url&amp;gt;?n=&amp;lt;last n value&amp;gt;&amp;amp;last=&amp;lt;last entry from response&amp;gt;&amp;gt;; rel=&amp;quot;next&amp;quot;
Content-Type: application/json; charset=utf-8

{
    &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
    &amp;quot;tags&amp;quot;: [
        &amp;lt;tag&amp;gt;,
        ...
    ],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A list of tags for the named repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Link&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RFC5988 compliant rel=&amp;lsquo;next&amp;rsquo; with URL to next result set, if available&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-2&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-1&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-1&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;manifest&#34;&gt;Manifest&lt;/h3&gt;

&lt;p&gt;Create, update, delete and retrieve manifests.&lt;/p&gt;

&lt;h4 id=&#34;get-manifest&#34;&gt;GET Manifest&lt;/h4&gt;

&lt;p&gt;Fetch the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; where &lt;code&gt;reference&lt;/code&gt; can be a tag or digest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Tag or digest of the target manifest.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok-3&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Docker-Content-Digest: &amp;lt;digest&amp;gt;
Content-Type: application/json; charset=utf-8

{
   &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
   &amp;quot;tag&amp;quot;: &amp;lt;tag&amp;gt;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;&amp;lt;digest&amp;gt;&amp;quot;
      },
      ...
    ]
   ],
   &amp;quot;history&amp;quot;: &amp;lt;v1 images&amp;gt;,
   &amp;quot;signature&amp;quot;: &amp;lt;JWS&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt;. The contents can be used to identify and resolve resources required to run the specified image.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The name or reference was invalid.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TAG_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest tag did not match URI&lt;/td&gt;
&lt;td&gt;During a manifest upload, if the tag in the manifest does not match the uri tag, this error will be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-3&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-2&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-2&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;put-manifest&#34;&gt;PUT Manifest&lt;/h4&gt;

&lt;p&gt;Put the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; where &lt;code&gt;reference&lt;/code&gt; can be a tag or digest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Type: application/json; charset=utf-8

{
   &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
   &amp;quot;tag&amp;quot;: &amp;lt;tag&amp;gt;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;&amp;lt;digest&amp;gt;&amp;quot;
      },
      ...
    ]
   ],
   &amp;quot;history&amp;quot;: &amp;lt;v1 images&amp;gt;,
   &amp;quot;signature&amp;quot;: &amp;lt;JWS&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Tag or digest of the target manifest.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-created&#34;&gt;On Success: Created&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;201 Created
Location: &amp;lt;url&amp;gt;
Content-Length: 0
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The manifest has been accepted by the registry and is stored under the specified &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The canonical location url of the uploaded manifest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-invalid-manifest&#34;&gt;On Failure: Invalid Manifest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The received manifest was invalid in some way, as described by the error codes. The client should resolve the issue and retry the request.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TAG_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest tag did not match URI&lt;/td&gt;
&lt;td&gt;During a manifest upload, if the tag in the manifest does not match the uri tag, this error will be returned.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MANIFEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest invalid&lt;/td&gt;
&lt;td&gt;During upload, manifests undergo several checks ensuring validity. If those checks fail, this error may be returned, unless a more specific error is included. The detail will contain information the failed validation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MANIFEST_UNVERIFIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest failed signature verification&lt;/td&gt;
&lt;td&gt;During manifest upload, if the manifest fails signature verification, this error will be returned.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob unknown to registry&lt;/td&gt;
&lt;td&gt;This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-4&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-3&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-3&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-missing-layer-s&#34;&gt;On Failure: Missing Layer(s)&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
    &amp;quot;errors:&amp;quot; [{
            &amp;quot;code&amp;quot;: &amp;quot;BLOB_UNKNOWN&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;blob unknown to registry&amp;quot;,
            &amp;quot;detail&amp;quot;: {
                &amp;quot;digest&amp;quot;: &amp;quot;&amp;lt;digest&amp;gt;&amp;quot;
            }
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One or more layers may be missing during a manifest upload. If so, the missing layers will be enumerated in the error response.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob unknown to registry&lt;/td&gt;
&lt;td&gt;This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-allowed&#34;&gt;On Failure: Not allowed&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;405 Method Not Allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Manifest put is not allowed because the registry is configured as a pull-through cache or for some other reason&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNSUPPORTED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The operation is unsupported.&lt;/td&gt;
&lt;td&gt;The operation was unsupported due to a missing implementation or invalid set of parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;delete-manifest&#34;&gt;DELETE Manifest&lt;/h4&gt;

&lt;p&gt;Delete the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt;. Note that a manifest can &lt;em&gt;only&lt;/em&gt; be deleted by &lt;code&gt;digest&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Tag or digest of the target manifest.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-accepted&#34;&gt;On Success: Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;on-failure-invalid-name-or-reference&#34;&gt;On Failure: Invalid Name or Reference&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The specified &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;reference&lt;/code&gt; were invalid and the delete was unable to proceed.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TAG_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest tag did not match URI&lt;/td&gt;
&lt;td&gt;During a manifest upload, if the tag in the manifest does not match the uri tag, this error will be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-5&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-4&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-4&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-unknown-manifest&#34;&gt;On Failure: Unknown Manifest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The specified &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;reference&lt;/code&gt; are unknown to the registry and the delete was unable to proceed. Clients can assume the manifest was already deleted if this response is returned.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MANIFEST_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;manifest unknown&lt;/td&gt;
&lt;td&gt;This error is returned when the manifest, identified by name and tag is unknown to the repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-allowed-1&#34;&gt;On Failure: Not allowed&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;405 Method Not Allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Manifest delete is not allowed because the registry is configured as a pull-through cache or &lt;code&gt;delete&lt;/code&gt; has been disabled.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNSUPPORTED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The operation is unsupported.&lt;/td&gt;
&lt;td&gt;The operation was unsupported due to a missing implementation or invalid set of parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;blob&#34;&gt;Blob&lt;/h3&gt;

&lt;p&gt;Operations on blobs identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt;. Used to fetch or delete layers by digest.&lt;/p&gt;

&lt;h4 id=&#34;get-blob&#34;&gt;GET Blob&lt;/h4&gt;

&lt;p&gt;Retrieve the blob from the registry identified by &lt;code&gt;digest&lt;/code&gt;. A &lt;code&gt;HEAD&lt;/code&gt; request can also be issued to this endpoint to obtain resource information without receiving all data.&lt;/p&gt;

&lt;h5 id=&#34;fetch-blob&#34;&gt;Fetch Blob&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Digest of desired blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok-4&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length&amp;gt;
Docker-Content-Digest: &amp;lt;digest&amp;gt;
Content-Type: application/octet-stream

&amp;lt;blob binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob identified by &lt;code&gt;digest&lt;/code&gt; is available. The blob content will be present in the body of the request.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The length of the requested blob content.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-temporary-redirect&#34;&gt;On Success: Temporary Redirect&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;307 Temporary Redirect
Location: &amp;lt;blob location&amp;gt;
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob identified by &lt;code&gt;digest&lt;/code&gt; is available at the provided location.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location where the layer should be accessible.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-1&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was a problem with the request that needs to be addressed by the client, such as an invalid &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-1&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob, identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt;, is unknown to the registry.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob unknown to registry&lt;/td&gt;
&lt;td&gt;This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-6&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-5&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-5&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;fetch-blob-part&#34;&gt;Fetch Blob Part&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Range: bytes=&amp;lt;start&amp;gt;-&amp;lt;end&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This endpoint may also support RFC7233 compliant range requests. Support can be detected by issuing a HEAD request. If the header &lt;code&gt;Accept-Range: bytes&lt;/code&gt; is returned, range requests can be used to fetch partial content.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;HTTP Range header specifying blob chunk.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Digest of desired blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-partial-content&#34;&gt;On Success: Partial Content&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;206 Partial Content
Content-Length: &amp;lt;length&amp;gt;
Content-Range: bytes &amp;lt;start&amp;gt;-&amp;lt;end&amp;gt;/&amp;lt;size&amp;gt;
Content-Type: application/octet-stream

&amp;lt;blob binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob identified by &lt;code&gt;digest&lt;/code&gt; is available. The specified chunk of blob content will be present in the body of the request.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The length of the requested blob chunk.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Content range of blob chunk.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-2&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was a problem with the request that needs to be addressed by the client, such as an invalid &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-2&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob unknown to registry&lt;/td&gt;
&lt;td&gt;This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-requested-range-not-satisfiable&#34;&gt;On Failure: Requested Range Not Satisfiable&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;416 Requested Range Not Satisfiable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The range specification cannot be satisfied for the requested content. This can happen when the range is not formatted correctly or if the range is outside of the valid size of the content.&lt;/p&gt;

&lt;h6 id=&#34;on-failure-authentication-required-7&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-6&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-6&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;delete-blob&#34;&gt;DELETE Blob&lt;/h4&gt;

&lt;p&gt;Delete the blob identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Digest of desired blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-accepted-1&#34;&gt;On Success: Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Content-Length: 0
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-invalid-name-or-digest&#34;&gt;On Failure: Invalid Name or Digest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-3&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob, identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt;, is unknown to the registry.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob unknown to registry&lt;/td&gt;
&lt;td&gt;This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-method-not-allowed&#34;&gt;On Failure: Method Not Allowed&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;405 Method Not Allowed
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blob delete is not allowed because the registry is configured as a pull-through cache or &lt;code&gt;delete&lt;/code&gt; has been disabled&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNSUPPORTED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The operation is unsupported.&lt;/td&gt;
&lt;td&gt;The operation was unsupported due to a missing implementation or invalid set of parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-8&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-7&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-7&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;initiate-blob-upload&#34;&gt;Initiate Blob Upload&lt;/h3&gt;

&lt;p&gt;Initiate a blob upload. This endpoint can be used to create resumable uploads or monolithic uploads.&lt;/p&gt;

&lt;h4 id=&#34;post-initiate-blob-upload&#34;&gt;POST Initiate Blob Upload&lt;/h4&gt;

&lt;p&gt;Initiate a resumable blob upload. If successful, an upload location will be provided to complete the upload. Optionally, if the &lt;code&gt;digest&lt;/code&gt; parameter is present, the request body will be used to complete the upload in a single request.&lt;/p&gt;

&lt;h5 id=&#34;initiate-monolithic-blob-upload&#34;&gt;Initiate Monolithic Blob Upload&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;POST /v2/&amp;lt;name&amp;gt;/blobs/uploads/?digest=&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Length: &amp;lt;length of blob&amp;gt;
Content-Type: application/octect-stream

&amp;lt;binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload a blob identified by the &lt;code&gt;digest&lt;/code&gt; parameter in single request. This upload will not be resumable unless a recoverable error is returned.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;Digest of uploaded blob. If present, the upload will be completed, in a single request, with contents of the request body as the resulting blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-created-1&#34;&gt;On Success: Created&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;201 Created
Location: &amp;lt;blob location&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob has been created in the registry and is available at the provided location.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-invalid-name-or-digest-1&#34;&gt;On Failure: Invalid Name or Digest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-allowed-2&#34;&gt;On Failure: Not allowed&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;405 Method Not Allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blob upload is not allowed because the registry is configured as a pull-through cache or for some other reason&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNSUPPORTED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The operation is unsupported.&lt;/td&gt;
&lt;td&gt;The operation was unsupported due to a missing implementation or invalid set of parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-9&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-8&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-8&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;initiate-resumable-blob-upload&#34;&gt;Initiate Resumable Blob Upload&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;POST /v2/&amp;lt;name&amp;gt;/blobs/uploads/
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initiate a resumable blob upload with an empty request body.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-accepted-2&#34;&gt;On Success: Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Content-Length: 0
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: 0-0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload has been created. The &lt;code&gt;Location&lt;/code&gt; header must be used to complete the upload. The response should be identical to a &lt;code&gt;GET&lt;/code&gt; request on the contents of the returned &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location of the created upload. Clients should use the contents verbatim to complete the upload, adding parameters where required.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range header indicating the progress of the upload. When starting an upload, it will return an empty range, since no content has been received.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-invalid-name-or-digest-2&#34;&gt;On Failure: Invalid Name or Digest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-10&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-9&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-9&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;blob-upload&#34;&gt;Blob Upload&lt;/h3&gt;

&lt;p&gt;Interact with blob uploads. Clients should never assemble URLs for this endpoint and should only take it through the &lt;code&gt;Location&lt;/code&gt; header on related API requests. The &lt;code&gt;Location&lt;/code&gt; header and its parameters should be preserved by clients, using the latest value returned via upload related API calls.&lt;/p&gt;

&lt;h4 id=&#34;get-blob-upload&#34;&gt;GET Blob Upload&lt;/h4&gt;

&lt;p&gt;Retrieve status of upload identified by &lt;code&gt;uuid&lt;/code&gt;. The primary purpose of this endpoint is to resolve the current status of a resumable upload.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Retrieve the progress of the current upload, as reported by the &lt;code&gt;Range&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-upload-progress&#34;&gt;On Success: Upload Progress&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Range: 0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is known and in progress. The last received offset is available in the &lt;code&gt;Range&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range indicating the current progress of the upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-3&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was an error processing the upload and it must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload invalid&lt;/td&gt;
&lt;td&gt;The blob upload encountered an error and can no longer proceed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-4&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The upload must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload unknown to registry&lt;/td&gt;
&lt;td&gt;If a blob upload has been cancelled or was never started, this error code may be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-11&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-10&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-10&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;patch-blob-upload&#34;&gt;PATCH Blob Upload&lt;/h4&gt;

&lt;p&gt;Upload a chunk of data for the specified upload.&lt;/p&gt;

&lt;h5 id=&#34;stream-upload&#34;&gt;Stream upload&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;PATCH /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Type: application/octet-stream

&amp;lt;binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload a stream of data to upload without completing the upload.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-data-accepted&#34;&gt;On Success: Data Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: 0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stream of data has been accepted and the current progress is available in the range header. The updated upload location is available in the &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location of the upload. Clients should assume this changes after each request. Clients should use the contents verbatim to complete the upload, adding parameters where required.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range indicating the current progress of the upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-4&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was an error processing the upload and it must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload invalid&lt;/td&gt;
&lt;td&gt;The blob upload encountered an error and can no longer proceed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-5&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The upload must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload unknown to registry&lt;/td&gt;
&lt;td&gt;If a blob upload has been cancelled or was never started, this error code may be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-12&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-11&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-11&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;chunked-upload-1&#34;&gt;Chunked upload&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;PATCH /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Range: &amp;lt;start of range&amp;gt;-&amp;lt;end of range, inclusive&amp;gt;
Content-Length: &amp;lt;length of chunk&amp;gt;
Content-Type: application/octet-stream

&amp;lt;binary chunk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload a chunk of data to specified upload without completing the upload. The data will be uploaded to the specified Content Range.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Range of bytes identifying the desired block of content represented by the body. Start must the end offset retrieved via status check plus one. Note that this is a non-standard use of the &lt;code&gt;Content-Range&lt;/code&gt; header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Length of the chunk being uploaded, corresponding the length of the request body.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-chunk-accepted&#34;&gt;On Success: Chunk Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: 0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The chunk of data has been accepted and the current progress is available in the range header. The updated upload location is available in the &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location of the upload. Clients should assume this changes after each request. Clients should use the contents verbatim to complete the upload, adding parameters where required.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range indicating the current progress of the upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-5&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was an error processing the upload and it must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload invalid&lt;/td&gt;
&lt;td&gt;The blob upload encountered an error and can no longer proceed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-6&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The upload must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload unknown to registry&lt;/td&gt;
&lt;td&gt;If a blob upload has been cancelled or was never started, this error code may be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-requested-range-not-satisfiable-1&#34;&gt;On Failure: Requested Range Not Satisfiable&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;416 Requested Range Not Satisfiable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Content-Range&lt;/code&gt; specification cannot be accepted, either because it does not overlap with the current progress or it is invalid.&lt;/p&gt;

&lt;h6 id=&#34;on-failure-authentication-required-13&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-12&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-12&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;put-blob-upload&#34;&gt;PUT Blob Upload&lt;/h4&gt;

&lt;p&gt;Complete the upload specified by &lt;code&gt;uuid&lt;/code&gt;, optionally appending the body as the final chunk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;?digest=&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Length: &amp;lt;length of data&amp;gt;
Content-Type: application/octet-stream

&amp;lt;binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Complete the upload, providing all the data in the body, if necessary. A request without a body will just complete the upload with previously uploaded content.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Length of the data being uploaded, corresponding to the length of the request body. May be zero if no data is provided.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;Digest of uploaded blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-upload-complete&#34;&gt;On Success: Upload Complete&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Location: &amp;lt;blob location&amp;gt;
Content-Range: &amp;lt;start of range&amp;gt;-&amp;lt;end of range, inclusive&amp;gt;
Content-Length: 0
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload has been completed and accepted by the registry. The canonical location will be available in the &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The canonical location of the blob for retrieval&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range of bytes identifying the desired block of content represented by the body. Start must match the end of offset retrieved via status check. Note that this is a non-standard use of the &lt;code&gt;Content-Range&lt;/code&gt; header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-6&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was an error processing the upload and it must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIGEST_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;provided digest did not match uploaded content&lt;/td&gt;
&lt;td&gt;When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload invalid&lt;/td&gt;
&lt;td&gt;The blob upload encountered an error and can no longer proceed.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNSUPPORTED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The operation is unsupported.&lt;/td&gt;
&lt;td&gt;The operation was unsupported due to a missing implementation or invalid set of parameters.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-7&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The upload must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload unknown to registry&lt;/td&gt;
&lt;td&gt;If a blob upload has been cancelled or was never started, this error code may be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-14&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-13&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-13&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;delete-blob-upload&#34;&gt;DELETE Blob Upload&lt;/h4&gt;

&lt;p&gt;Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished uploads will eventually timeout.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cancel the upload specified by &lt;code&gt;uuid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-upload-deleted&#34;&gt;On Success: Upload Deleted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload has been successfully deleted.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-7&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An error was encountered processing the delete. The client may ignore this error.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;invalid repository name&lt;/td&gt;
&lt;td&gt;Invalid repository name encountered either during manifest validation or any API operation.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload invalid&lt;/td&gt;
&lt;td&gt;The blob upload encountered an error and can no longer proceed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-8&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The client may ignore this error and assume the upload has been deleted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;blob upload unknown to registry&lt;/td&gt;
&lt;td&gt;If a blob upload has been cancelled or was never started, this error code may be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-authentication-required-15&#34;&gt;On Failure: Authentication Required&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authenticated.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNAUTHORIZED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;authentication required&lt;/td&gt;
&lt;td&gt;The access controller was unable to authenticate the client. Often this will be accompanied by a Www-Authenticate HTTP response header indicating how to authenticate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-no-such-repository-error-14&#34;&gt;On Failure: No Such Repository Error&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NAME_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repository name not known to registry&lt;/td&gt;
&lt;td&gt;This is returned if the name used during an operation is unknown to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-access-denied-14&#34;&gt;On Failure: Access Denied&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;403 Forbidden
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have required access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DENIED&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;requested access to the resource is denied&lt;/td&gt;
&lt;td&gt;The access controller denied access for the operation on a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;catalog&#34;&gt;Catalog&lt;/h3&gt;

&lt;p&gt;List a set of available repositories in the local registry cluster. Does not provide any indication of what may be available upstream. Applications can only determine if a repository is available but not if it is not available.&lt;/p&gt;

&lt;h4 id=&#34;get-catalog&#34;&gt;GET Catalog&lt;/h4&gt;

&lt;p&gt;Retrieve a sorted, json list of repositories available in the registry.&lt;/p&gt;

&lt;h5 id=&#34;catalog-fetch-complete&#34;&gt;Catalog Fetch Complete&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/_catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Request an unabridged list of repositories available.&lt;/p&gt;

&lt;h6 id=&#34;on-success-ok-5&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;repositories&amp;quot;: [
		&amp;lt;name&amp;gt;,
		...
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Returns the unabridged list of repositories as a json response.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;catalog-fetch-paginated&#34;&gt;Catalog Fetch Paginated&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/_catalog?n=&amp;lt;integer&amp;gt;&amp;amp;last=&amp;lt;integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Return the specified portion of repositories.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;Limit the number of entries in each response. It not present, all entries will be returned.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;Result set will include values lexically after last.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok-6&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length&amp;gt;
Link: &amp;lt;&amp;lt;url&amp;gt;?n=&amp;lt;last n value&amp;gt;&amp;amp;last=&amp;lt;last entry from response&amp;gt;&amp;gt;; rel=&amp;quot;next&amp;quot;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;repositories&amp;quot;: [
		&amp;lt;name&amp;gt;,
		...
	]
	&amp;quot;next&amp;quot;: &amp;quot;&amp;lt;url&amp;gt;?last=&amp;lt;name&amp;gt;&amp;amp;n=&amp;lt;last value of n&amp;gt;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Link&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RFC5988 compliant rel=&amp;lsquo;next&amp;rsquo; with URL to next result set, if available&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>In-memory storage driver</title>
      <link>http://docs.docker.com/registry/storage-drivers/inmemory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.docker.com/registry/storage-drivers/inmemory/</guid>
      <description>

&lt;h1 id=&#34;in-memory-storage-driver&#34;&gt;In-memory storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses local memory for object storage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: This storage driver &lt;em&gt;does not&lt;/em&gt; persist data across runs, and primarily exists for testing.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;None&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>