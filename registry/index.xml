<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Registries on Docker Docs</title>
    <link>http://localhost/registry/</link>
    <description>Recent content in Registries on Docker Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost/registry/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://localhost/registry/spec/implementations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/spec/implementations/</guid>
      <description>

&lt;h1 id=&#34;distribution-api-implementations&#34;&gt;Distribution API Implementations&lt;/h1&gt;

&lt;p&gt;This is a list of known implementations of the Distribution API spec.&lt;/p&gt;

&lt;h2 id=&#34;docker-distribution-registry-https-github-com-docker-distribution&#34;&gt;&lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;Docker Distribution Registry&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Docker distribution is the reference implementation of the distribution API
specification. It aims to fully implement the entire specification.&lt;/p&gt;

&lt;h3 id=&#34;releases&#34;&gt;Releases&lt;/h3&gt;

&lt;h4 id=&#34;2-0-1-in-development&#34;&gt;2.0.1 (&lt;em&gt;in development&lt;/em&gt;)&lt;/h4&gt;

&lt;p&gt;Implements API 2.0.1&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Known Issues&lt;/em&gt;
 - No resumable push support
 - Content ranges ignored
 - Blob upload status will always return a starting range of 0&lt;/p&gt;

&lt;h4 id=&#34;2-0-0&#34;&gt;2.0.0&lt;/h4&gt;

&lt;p&gt;Implements API 2.0.0&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Known Issues&lt;/em&gt;
 - No resumable push support
 - No PATCH implementation for blob upload
 - Content ranges ignored&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost/registry/spec/manifest-v2-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/spec/manifest-v2-1/</guid>
      <description>

&lt;h1 id=&#34;image-manifest-version-2-schema-1&#34;&gt;Image Manifest Version 2, Schema 1&lt;/h1&gt;

&lt;p&gt;This document outlines the format of of the V2 image manifest. The image
manifest described herein was introduced in the Docker daemon in the &lt;a href=&#34;https://github.com/docker/docker/commit/9f482a66ab37ec396ac61ed0c00d59122ac07453&#34;&gt;v1.3.0
release&lt;/a&gt;.
It is a provisional manifest to provide a compatibility with the &lt;a href=&#34;http://localhost/registry/https://github.com/docker/docker/blob/master/image/spec/v1&#34;&gt;V1 Image
format&lt;/a&gt;, as the
requirements are defined for the &lt;a href=&#34;https://github.com/docker/distribution/pull/62&#34;&gt;V2 Schema 2
image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Image manifests describe the various constituents of a docker image.  Image
manifests can be serialized to JSON format with the following media types:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Manifest Type&lt;/th&gt;
&lt;th&gt;Media Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;manifest&lt;/td&gt;
&lt;td&gt;&amp;ldquo;application/vnd.docker.distribution.manifest.v1+json&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;signed manifest&lt;/td&gt;
&lt;td&gt;&amp;ldquo;application/vnd.docker.distribution.manifest.v1+prettyjws&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Note that &amp;ldquo;application/json&amp;rdquo; will also be accepted for schema 1.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/9015&#34;&gt;Proposal: JSON Registry API V2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/8093&#34;&gt;Proposal: Provenance step 1 - Transform images for validation and verification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;manifest-field-descriptions&#34;&gt;&lt;em&gt;Manifest&lt;/em&gt; Field Descriptions&lt;/h2&gt;

&lt;p&gt;Manifest provides the base accessible fields for working with V2 image format
 in the registry.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;name is the name of the image&amp;rsquo;s repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;tag is the tag of the image&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;architecture&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;architecture is the host architecture on which this image is intended to
   run.  This is for information purposes and not currently used by the engine&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;fsLayers&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fsLayers is a list of filesystem layer blob sums contained in this image.&lt;/p&gt;

&lt;p&gt;An fsLayer is a struct consisting of the following fields
      - &lt;strong&gt;&lt;code&gt;blobSum&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;digest.Digest&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  blobSum is the digest of the referenced filesystem image layer.  A 
  digest can be a tarsum or sha256 hash.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;history&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;history is a list of unstructured historical data for v1 compatibility.&lt;/p&gt;

&lt;p&gt;history is a struct consisting of the following fields
   - &lt;strong&gt;&lt;code&gt;v1Compatibility&lt;/code&gt;&lt;/strong&gt; string&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  V1Compatibility is the raw V1 compatibility information.  This  will 
  contain the JSON object describing the V1 of this image.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;schemaVersion&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;int&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SchemaVersion is the image manifest schema that this image follows.&lt;/p&gt;

&lt;h2 id=&#34;signed-manifests&#34;&gt;Signed Manifests&lt;/h2&gt;

&lt;p&gt;Signed manifests provides an envelope for a signed image manifest.  A signed
manifest consists of an image manifest along with an additional field
containing the signature of the manifest.&lt;/p&gt;

&lt;p&gt;The docker client can verify signed manifests and displays a message to the user.&lt;/p&gt;

&lt;h3 id=&#34;signing-manifests&#34;&gt;Signing Manifests&lt;/h3&gt;

&lt;p&gt;Image manifests can be signed in two different ways: with a &lt;em&gt;libtrust&lt;/em&gt; private
 key or an x509 certificate chain.  When signing with an x509 certificate chain,
 the public key of the first element in the chain must be the public key
 corresponding with the sign key.&lt;/p&gt;

&lt;h3 id=&#34;signed-manifest-field-description&#34;&gt;Signed Manifest Field Description&lt;/h3&gt;

&lt;p&gt;Signed manifests include an image manifest and and a list of signatures generated
by &lt;em&gt;libtrust&lt;/em&gt;.  A signature consists of the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;header&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href=&#34;http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-31#section-2&#34;&gt;JOSE&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;a href=&#34;http://self-issued.info/docs/draft-ietf-jose-json-web-signature.html&#34;&gt;JSON Web Signature&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;signature&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A signature for the image manifest, signed by a &lt;em&gt;libtrust&lt;/em&gt; private key&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;protected&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;string&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The signed protected header&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-manifest&#34;&gt;Example Manifest&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Example showing the official &amp;lsquo;hello-world&amp;rsquo; image manifest.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
   &amp;quot;name&amp;quot;: &amp;quot;hello-world&amp;quot;,
   &amp;quot;tag&amp;quot;: &amp;quot;latest&amp;quot;,
   &amp;quot;architecture&amp;quot;: &amp;quot;amd64&amp;quot;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&amp;quot;
      },
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&amp;quot;
      },
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:cc8567d70002e957612902a8e985ea129d831ebe04057d88fb644857caa45d11&amp;quot;
      },
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&amp;quot;
      }
   ],
   &amp;quot;history&amp;quot;: [
      {
         &amp;quot;v1Compatibility&amp;quot;: &amp;quot;{\&amp;quot;id\&amp;quot;:\&amp;quot;e45a5af57b00862e5ef5782a9925979a02ba2b12dff832fd0991335f4a11e5c5\&amp;quot;,\&amp;quot;parent\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;created\&amp;quot;:\&amp;quot;2014-12-31T22:57:59.178729048Z\&amp;quot;,\&amp;quot;container\&amp;quot;:\&amp;quot;27b45f8fb11795b52e9605b686159729b0d9ca92f76d40fb4f05a62e19c46b4f\&amp;quot;,\&amp;quot;container_config\&amp;quot;:{\&amp;quot;Hostname\&amp;quot;:\&amp;quot;8ce6509d66e2\&amp;quot;,\&amp;quot;Domainname\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;User\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Memory\&amp;quot;:0,\&amp;quot;MemorySwap\&amp;quot;:0,\&amp;quot;CpuShares\&amp;quot;:0,\&amp;quot;Cpuset\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;AttachStdin\&amp;quot;:false,\&amp;quot;AttachStdout\&amp;quot;:false,\&amp;quot;AttachStderr\&amp;quot;:false,\&amp;quot;PortSpecs\&amp;quot;:null,\&amp;quot;ExposedPorts\&amp;quot;:null,\&amp;quot;Tty\&amp;quot;:false,\&amp;quot;OpenStdin\&amp;quot;:false,\&amp;quot;StdinOnce\&amp;quot;:false,\&amp;quot;Env\&amp;quot;:[\&amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&amp;quot;],\&amp;quot;Cmd\&amp;quot;:[\&amp;quot;/bin/sh\&amp;quot;,\&amp;quot;-c\&amp;quot;,\&amp;quot;#(nop) CMD [/hello]\&amp;quot;],\&amp;quot;Image\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;Volumes\&amp;quot;:null,\&amp;quot;WorkingDir\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Entrypoint\&amp;quot;:null,\&amp;quot;NetworkDisabled\&amp;quot;:false,\&amp;quot;MacAddress\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;OnBuild\&amp;quot;:[],\&amp;quot;SecurityOpt\&amp;quot;:null,\&amp;quot;Labels\&amp;quot;:null},\&amp;quot;docker_version\&amp;quot;:\&amp;quot;1.4.1\&amp;quot;,\&amp;quot;config\&amp;quot;:{\&amp;quot;Hostname\&amp;quot;:\&amp;quot;8ce6509d66e2\&amp;quot;,\&amp;quot;Domainname\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;User\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Memory\&amp;quot;:0,\&amp;quot;MemorySwap\&amp;quot;:0,\&amp;quot;CpuShares\&amp;quot;:0,\&amp;quot;Cpuset\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;AttachStdin\&amp;quot;:false,\&amp;quot;AttachStdout\&amp;quot;:false,\&amp;quot;AttachStderr\&amp;quot;:false,\&amp;quot;PortSpecs\&amp;quot;:null,\&amp;quot;ExposedPorts\&amp;quot;:null,\&amp;quot;Tty\&amp;quot;:false,\&amp;quot;OpenStdin\&amp;quot;:false,\&amp;quot;StdinOnce\&amp;quot;:false,\&amp;quot;Env\&amp;quot;:[\&amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&amp;quot;],\&amp;quot;Cmd\&amp;quot;:[\&amp;quot;/hello\&amp;quot;],\&amp;quot;Image\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;Volumes\&amp;quot;:null,\&amp;quot;WorkingDir\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Entrypoint\&amp;quot;:null,\&amp;quot;NetworkDisabled\&amp;quot;:false,\&amp;quot;MacAddress\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;OnBuild\&amp;quot;:[],\&amp;quot;SecurityOpt\&amp;quot;:null,\&amp;quot;Labels\&amp;quot;:null},\&amp;quot;architecture\&amp;quot;:\&amp;quot;amd64\&amp;quot;,\&amp;quot;os\&amp;quot;:\&amp;quot;linux\&amp;quot;,\&amp;quot;Size\&amp;quot;:0}\n&amp;quot;
      },
      {
         &amp;quot;v1Compatibility&amp;quot;: &amp;quot;{\&amp;quot;id\&amp;quot;:\&amp;quot;e45a5af57b00862e5ef5782a9925979a02ba2b12dff832fd0991335f4a11e5c5\&amp;quot;,\&amp;quot;parent\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;created\&amp;quot;:\&amp;quot;2014-12-31T22:57:59.178729048Z\&amp;quot;,\&amp;quot;container\&amp;quot;:\&amp;quot;27b45f8fb11795b52e9605b686159729b0d9ca92f76d40fb4f05a62e19c46b4f\&amp;quot;,\&amp;quot;container_config\&amp;quot;:{\&amp;quot;Hostname\&amp;quot;:\&amp;quot;8ce6509d66e2\&amp;quot;,\&amp;quot;Domainname\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;User\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Memory\&amp;quot;:0,\&amp;quot;MemorySwap\&amp;quot;:0,\&amp;quot;CpuShares\&amp;quot;:0,\&amp;quot;Cpuset\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;AttachStdin\&amp;quot;:false,\&amp;quot;AttachStdout\&amp;quot;:false,\&amp;quot;AttachStderr\&amp;quot;:false,\&amp;quot;PortSpecs\&amp;quot;:null,\&amp;quot;ExposedPorts\&amp;quot;:null,\&amp;quot;Tty\&amp;quot;:false,\&amp;quot;OpenStdin\&amp;quot;:false,\&amp;quot;StdinOnce\&amp;quot;:false,\&amp;quot;Env\&amp;quot;:[\&amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&amp;quot;],\&amp;quot;Cmd\&amp;quot;:[\&amp;quot;/bin/sh\&amp;quot;,\&amp;quot;-c\&amp;quot;,\&amp;quot;#(nop) CMD [/hello]\&amp;quot;],\&amp;quot;Image\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;Volumes\&amp;quot;:null,\&amp;quot;WorkingDir\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Entrypoint\&amp;quot;:null,\&amp;quot;NetworkDisabled\&amp;quot;:false,\&amp;quot;MacAddress\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;OnBuild\&amp;quot;:[],\&amp;quot;SecurityOpt\&amp;quot;:null,\&amp;quot;Labels\&amp;quot;:null},\&amp;quot;docker_version\&amp;quot;:\&amp;quot;1.4.1\&amp;quot;,\&amp;quot;config\&amp;quot;:{\&amp;quot;Hostname\&amp;quot;:\&amp;quot;8ce6509d66e2\&amp;quot;,\&amp;quot;Domainname\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;User\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Memory\&amp;quot;:0,\&amp;quot;MemorySwap\&amp;quot;:0,\&amp;quot;CpuShares\&amp;quot;:0,\&amp;quot;Cpuset\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;AttachStdin\&amp;quot;:false,\&amp;quot;AttachStdout\&amp;quot;:false,\&amp;quot;AttachStderr\&amp;quot;:false,\&amp;quot;PortSpecs\&amp;quot;:null,\&amp;quot;ExposedPorts\&amp;quot;:null,\&amp;quot;Tty\&amp;quot;:false,\&amp;quot;OpenStdin\&amp;quot;:false,\&amp;quot;StdinOnce\&amp;quot;:false,\&amp;quot;Env\&amp;quot;:[\&amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\&amp;quot;],\&amp;quot;Cmd\&amp;quot;:[\&amp;quot;/hello\&amp;quot;],\&amp;quot;Image\&amp;quot;:\&amp;quot;31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\&amp;quot;,\&amp;quot;Volumes\&amp;quot;:null,\&amp;quot;WorkingDir\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;Entrypoint\&amp;quot;:null,\&amp;quot;NetworkDisabled\&amp;quot;:false,\&amp;quot;MacAddress\&amp;quot;:\&amp;quot;\&amp;quot;,\&amp;quot;OnBuild\&amp;quot;:[],\&amp;quot;SecurityOpt\&amp;quot;:null,\&amp;quot;Labels\&amp;quot;:null},\&amp;quot;architecture\&amp;quot;:\&amp;quot;amd64\&amp;quot;,\&amp;quot;os\&amp;quot;:\&amp;quot;linux\&amp;quot;,\&amp;quot;Size\&amp;quot;:0}\n&amp;quot;
      },
   ],
   &amp;quot;schemaVersion&amp;quot;: 1,
   &amp;quot;signatures&amp;quot;: [
      {
         &amp;quot;header&amp;quot;: {
            &amp;quot;jwk&amp;quot;: {
               &amp;quot;crv&amp;quot;: &amp;quot;P-256&amp;quot;,
               &amp;quot;kid&amp;quot;: &amp;quot;OD6I:6DRK:JXEJ:KBM4:255X:NSAA:MUSF:E4VM:ZI6W:CUN2:L4Z6:LSF4&amp;quot;,
               &amp;quot;kty&amp;quot;: &amp;quot;EC&amp;quot;,
               &amp;quot;x&amp;quot;: &amp;quot;3gAwX48IQ5oaYQAYSxor6rYYc_6yjuLCjtQ9LUakg4A&amp;quot;,
               &amp;quot;y&amp;quot;: &amp;quot;t72ge6kIA1XOjqjVoEOiPPAURltJFBMGDSQvEGVB010&amp;quot;
            },
            &amp;quot;alg&amp;quot;: &amp;quot;ES256&amp;quot;
         },
         &amp;quot;signature&amp;quot;: &amp;quot;XREm0L8WNn27Ga_iE_vRnTxVMhhYY0Zst_FfkKopg6gWSoTOZTuW4rK0fg_IqnKkEKlbD83tD46LKEGi5aIVFg&amp;quot;,
         &amp;quot;protected&amp;quot;: &amp;quot;eyJmb3JtYXRMZW5ndGgiOjY2MjgsImZvcm1hdFRhaWwiOiJDbjAiLCJ0aW1lIjoiMjAxNS0wNC0wOFQxODo1Mjo1OVoifQ&amp;quot;
      }
   ]
}
   
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Authentication for the Registry</title>
      <link>http://localhost/registry/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/authentication/</guid>
      <description>

&lt;h1 id=&#34;authentication&#34;&gt;Authentication&lt;/h1&gt;

&lt;p&gt;While running an unrestricted registry is certainly ok for development, secured local networks, or test setups, you should probably implement access restriction if you plan on making your registry available to a wider audience or through public internet.&lt;/p&gt;

&lt;p&gt;The Registry supports two different authentication methods to get your there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;direct authentication, through the use of a proxy&lt;/li&gt;
&lt;li&gt;delegated authentication, redirecting to a trusted token server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first method is recommended for most people as the most straight-forward solution.&lt;/p&gt;

&lt;p&gt;The second method requires significantly more investment, and only make sense if you want to fully configure ACLs and more control over the Registry integration into your global authorization and authentication systems.&lt;/p&gt;

&lt;h2 id=&#34;direct-authentication-through-a-proxy&#34;&gt;Direct authentication through a proxy&lt;/h2&gt;

&lt;p&gt;With this method, you implement basic authentication in a reverse proxy that sits in front of your registry.&lt;/p&gt;

&lt;p&gt;Since the Docker engine uses basic authentication to negotiate access to the Registry, securing communication between docker engines and your proxy is absolutely paramount.&lt;/p&gt;

&lt;p&gt;While this model gives you the ability to use whatever authentication backend you want through a secondary authentication mechanism implemented inside your proxy, it also requires that you move TLS termination from the Registry to the proxy itself.&lt;/p&gt;

&lt;p&gt;Below is a simple example of secured basic authentication (using TLS), using nginx as a proxy.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You should have followed entirely the basic &lt;a href=&#34;http://localhost/registry/deploying&#34;&gt;deployment guide&lt;/a&gt;. If you have not, please take the time to do so.&lt;/p&gt;

&lt;p&gt;At this point, it&amp;rsquo;s assumed that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you understand Docker security requirements, and how to configure your docker engines properly&lt;/li&gt;
&lt;li&gt;you have installed Docker Compose&lt;/li&gt;
&lt;li&gt;you have a &lt;code&gt;domain.crt&lt;/code&gt; and &lt;code&gt;domain.key&lt;/code&gt; files, for the CN &lt;code&gt;myregistrydomain.com&lt;/code&gt; (or whatever domain name you want to use)&lt;/li&gt;
&lt;li&gt;these files are located inside the current directory, and there is nothing else in that directory&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s HIGHLY recommended that you get a certificate from a known CA instead of self-signed certificates&lt;/li&gt;
&lt;li&gt;be sure you have stopped and removed any previously running registry (typically &lt;code&gt;docker stop registry &amp;amp;&amp;amp; docker rm registry&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;setting-things-up&#34;&gt;Setting things up&lt;/h3&gt;

&lt;p&gt;Read again the requirements.&lt;/p&gt;

&lt;p&gt;Ready?&lt;/p&gt;

&lt;p&gt;Run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir auth
mkdir data

# This is the main nginx configuration you will use
cat &amp;lt;&amp;lt;EOF &amp;gt; auth/registry.conf
upstream docker-registry {
  server registry:5000;
}

server {
  listen 443 ssl;
  server_name myregistrydomain.com;

  # SSL
  ssl_certificate /etc/nginx/conf.d/domain.crt;
  ssl_certificate_key /etc/nginx/conf.d/domain.key;

  # disable any limits to avoid HTTP 413 for large image uploads
  client_max_body_size 0;

  # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
  chunked_transfer_encoding on;

  location /v2/ {
    # Do not allow connections from docker 1.5 and earlier
    # docker pre-1.6.0 did not properly set the user agent on ping, catch &amp;quot;Go *&amp;quot; user agents
    if (\$http_user_agent ~ &amp;quot;^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*\$&amp;quot; ) {
      return 404;
    }

    # To add basic authentication to v2 use auth_basic setting plus add_header
    auth_basic &amp;quot;registry.localhost&amp;quot;;
    auth_basic_user_file /etc/nginx/conf.d/registry.password;
    add_header &#39;Docker-Distribution-Api-Version&#39; &#39;registry/2.0&#39; always;

    proxy_pass                          http://docker-registry;
    proxy_set_header  Host              \$http_host;   # required for docker client&#39;s sake
    proxy_set_header  X-Real-IP         \$remote_addr; # pass on real client&#39;s IP
    proxy_set_header  X-Forwarded-For   \$proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto \$scheme;
    proxy_read_timeout                  900;
  }
}
EOF

# Now, create a password file for &amp;quot;testuser&amp;quot; and &amp;quot;testpassword&amp;quot;
echo &#39;testuser:$2y$05$.nIfPAEgpWCh.rpts/XHX.UOfCRNtvMmYjh6sY/AZBmeg/dQyN62q&#39; &amp;gt; auth/registry.password

# Alternatively you could have achieved the same thing with htpasswd
# htpasswd -Bbc auth/registry.password testuser testpassword

# Copy over your certificate files
cp domain.crt auth
cp domain.key auth

# Now create your compose file

cat &amp;lt;&amp;lt;EOF &amp;gt; docker-compose.yml
nginx:
  image: &amp;quot;nginx:1.9&amp;quot;
  ports:
    - 5043:443
  links:
    - registry:registry
  volumes:
    - `pwd`/auth/:/etc/nginx/conf.d

registry:
  image: registry:2
  ports:
    - 127.0.0.1:5000:5000
  environment:
    REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data
  volumes:
    - `pwd`/data:/data
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;starting-and-stopping&#34;&gt;Starting and stopping&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s it. You can now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt; to start your registry&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker login myregistrydomain.com:5043&lt;/code&gt; (using &lt;code&gt;testuser&lt;/code&gt; and &lt;code&gt;testpassword&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker tag ubuntu myregistrydomain.com:5043/toto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker push myregistrydomain.com:5043/toto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;docker-still-complains-about-the-certificate&#34;&gt;Docker still complains about the certificate?&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s certainly because you are using a self-signed certificate, despite the warnings.&lt;/p&gt;

&lt;p&gt;If you really insist on using these, you have to trust it at the OS level.&lt;/p&gt;

&lt;p&gt;Usually, on Ubuntu this is done with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp auth/domain.crt /usr/local/share/ca-certificates/myregistrydomain.com.crt
update-ca-certificates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and on RedHat with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp auth/domain.crt /etc/pki/ca-trust/source/anchors/myregistrydomain.com.crt
update-ca-trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;service docker stop &amp;amp;&amp;amp; service docker start&lt;/code&gt; (or any other way you use to restart docker)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt; to bring your registry up&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;token-based-delegated-authentication&#34;&gt;Token-based delegated authentication&lt;/h2&gt;

&lt;p&gt;This is &lt;strong&gt;advanced&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You will find &lt;a href=&#34;http://localhost/registry/spec/auth/token&#34;&gt;background information here&lt;/a&gt;, &lt;a href=&#34;http://localhost/registry/configuration#auth&#34;&gt;configuration information here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Beware that you will have to implement your own authentication service for this to work (though there exist third-party open-source implementations).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ceph RADOS storage driver</title>
      <link>http://localhost/registry/storage-drivers/rados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/storage-drivers/rados/</guid>
      <description>

&lt;h1 id=&#34;ceph-rados-storage-driver&#34;&gt;Ceph RADOS storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses
&lt;a href=&#34;http://ceph.com/docs/master/rados/&#34;&gt;Ceph RADOS Object Storage&lt;/a&gt; for storage backend.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;The following parameters must be used to configure the storage driver
(case-sensitive):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;poolname&lt;/code&gt;: Name of the Ceph pool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; &lt;em&gt;optional&lt;/em&gt;: The user to connect as (i.e. admin, not client.admin)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunksize&lt;/code&gt; &lt;em&gt;optional&lt;/em&gt;: Size of the written RADOS objects. Default value is
4MB (4194304).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This drivers loads the &lt;a href=&#34;http://ceph.com/docs/master/rados/configuration/ceph-conf/&#34;&gt;Ceph client configuration&lt;/a&gt; from the
following regular paths (the first found is used):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$CEPH_CONF&lt;/code&gt; (environment variable)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ceph/ceph.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ceph/config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ceph.conf&lt;/code&gt; (in the current working directory)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;developing&#34;&gt;Developing&lt;/h2&gt;

&lt;p&gt;To include this driver when building Docker Distribution, use the build tag
&lt;code&gt;include_rados&lt;/code&gt;. Please see the &lt;a href=&#34;https://github.com/docker/distribution/blob/master/docs/building.md#optional-build-tags&#34;&gt;building documentation&lt;/a&gt; for details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure a Registry</title>
      <link>http://localhost/registry/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/configuration/</guid>
      <description>

&lt;h1 id=&#34;registry-configuration-reference&#34;&gt;Registry Configuration Reference&lt;/h1&gt;

&lt;p&gt;The Registry configuration is based on a YAML file, detailed below. While it comes with sane default values out of the box, you are heavily encouraged to review it exhaustively before moving your systems to production.&lt;/p&gt;

&lt;h2 id=&#34;override-configuration-options&#34;&gt;Override configuration options&lt;/h2&gt;

&lt;p&gt;In a typical setup where you run your Registry from the official image, you can specify any configuration variable from the environment by passing &lt;code&gt;-e&lt;/code&gt; arguments to your &lt;code&gt;docker run&lt;/code&gt; stanza, or from within a Dockerfile using the &lt;code&gt;ENV&lt;/code&gt; instruction.&lt;/p&gt;

&lt;p&gt;To override a configuration option, create an environment variable named
&lt;code&gt;REGISTRY_variable&lt;/code&gt; where *&lt;code&gt;variable&lt;/code&gt;* is the name of the configuration option
and the &lt;code&gt;_&lt;/code&gt; (underscore) represents indention levels. For example, you can
configure the &lt;code&gt;rootdirectory&lt;/code&gt; of the &lt;code&gt;filesystem&lt;/code&gt; storage backend:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;storage:
	filesystem:
		rootdirectory: /var/lib/registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To override this value, set an environment variable like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/somewhere
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This variable overrides the &lt;code&gt;/var/lib/registry&lt;/code&gt; value to the &lt;code&gt;/somewhere&lt;/code&gt;
directory.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If an environment variable changes a map value into a string, such
as replacing the storage driver type with &lt;code&gt;REGISTRY_STORAGE=filesystem&lt;/code&gt;, then
all sub-fields will be erased. As such, specifying the storage type in the
environment will remove all parameters related to the old storage
configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;list-of-configuration-options&#34;&gt;List of configuration options&lt;/h2&gt;

&lt;p&gt;This section lists all the registry configuration options. Some options in
the list are mutually exclusive. So, make sure to read the detailed reference
information about each option that appears later in this page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 0.1
log:
	level: debug
	formatter: text
	fields:
		service: registry
		environment: staging
	hooks:
		- type: mail
		  disabled: true
		  levels:
			- panic
		  options:
			smtp:
				addr: mail.example.com:25
				username: mailuser
				password: password
				insecure: true
			from: sender@example.com
			to: 
				- errors@example.com
loglevel: debug # deprecated: use &amp;quot;log&amp;quot;
storage:
	filesystem:
		rootdirectory: /var/lib/registry
	azure:
		accountname: accountname
		accountkey: base64encodedaccountkey
		container: containername
	s3:
		accesskey: awsaccesskey
		secretkey: awssecretkey
		region: us-west-1
		bucket: bucketname
		encrypt: true
		secure: true
		v4auth: true
		chunksize: 5242880
		rootdirectory: /s3/object/name/prefix
	rados:
		poolname: radospool
		username: radosuser
		chunksize: 4194304
	cache:
		blobdescriptor: redis
	maintenance:
		uploadpurging:
			enabled: true
			age: 168h
			interval: 24h
			dryrun: false
auth:
	silly:
		realm: silly-realm
		service: silly-service
	token:
		realm: token-realm
		service: token-service
		issuer: registry-token-issuer
		rootcertbundle: /root/certs/bundle
	htpasswd:
		realm: basic-realm
		path: /path/to/htpasswd
middleware:
	registry:
		- name: ARegistryMiddleware
		  options:
			foo: bar
	repository:
		- name: ARepositoryMiddleware
		  options:
			foo: bar
	storage:
		- name: cloudfront
		  options:
			baseurl: https://my.cloudfronted.domain.com/
			privatekey: /path/to/pem
			keypairid: cloudfrontkeypairid
			duration: 3000
reporting:
	bugsnag:
		apikey: bugsnagapikey
		releasestage: bugsnagreleasestage
		endpoint: bugsnagendpoint
	newrelic:
		licensekey: newreliclicensekey
		name: newrelicname
		verbose: true
http:
	addr: localhost:5000
	prefix: /my/nested/registry/
	secret: asecretforlocaldevelopment
	tls:
		certificate: /path/to/x509/public
		key: /path/to/x509/private
    clientcas:
      - /path/to/ca.pem
      - /path/to/another/ca.pem
	debug:
		addr: localhost:5001
notifications:
	endpoints:
		- name: alistener
		  disabled: false
		  url: https://my.listener.com/event
		  headers: &amp;lt;http.Header&amp;gt;
		  timeout: 500
		  threshold: 5
		  backoff: 1000
redis:
	addr: localhost:6379
	password: asecret
	db: 0
	dialtimeout: 10ms
	readtimeout: 10ms
	writetimeout: 10ms
	pool:
		maxidle: 16
		maxactive: 64
		idletimeout: 300s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some instances a configuration option is &lt;strong&gt;optional&lt;/strong&gt; but it contains child
options marked as &lt;strong&gt;required&lt;/strong&gt;. This indicates that you can omit the parent with
all its children. However, if the parent is included, you must also include all
the children marked &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;version&#34;&gt;version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;version&lt;/code&gt; option is &lt;strong&gt;required&lt;/strong&gt;. It specifies the configuration&amp;rsquo;s version.
It is expected to remain a top-level field, to allow for a consistent version
check before parsing the remainder of the configuration file.&lt;/p&gt;

&lt;h2 id=&#34;log&#34;&gt;log&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;log&lt;/code&gt; subsection configures the behavior of the logging system. The logging
system outputs everything to stdout. You can adjust the granularity and format
with this configuration section.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;log:
	level: debug
	formatter: text
	fields:
		service: registry
		environment: staging
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;level&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Sets the sensitivity of logging output. Permitted values are
      &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt; and
      &lt;code&gt;debug&lt;/code&gt;. The default is &lt;code&gt;info&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;formatter&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      This selects the format of logging output. The format primarily affects how keyed
      attributes for a log line are encoded. Options are &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt; or
      &lt;code&gt;logstash&lt;/code&gt;. The default is &lt;code&gt;text&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;fields&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      A map of field names to values. These are added to every log line for
      the context. This is useful for identifying log messages source after
      being mixed in other systems.
    &lt;/td&gt;
&lt;/table&gt;

&lt;h2 id=&#34;hooks&#34;&gt;hooks&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hooks:
  - type: mail
    levels:
      - panic
    options:
      smtp:
        addr: smtp.sendhost.com:25
        username: sendername
        password: password
        insecure: true
      from: name@sendhost.com
      to:
        - name@receivehost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;hooks&lt;/code&gt; subsection configures the logging hooks&amp;rsquo; behavior. This subsection
includes a sequence handler which you can use for sending mail, for example.
Refer to &lt;code&gt;loglevel&lt;/code&gt; to configure the level of messages printed.&lt;/p&gt;

&lt;h2 id=&#34;loglevel&#34;&gt;loglevel&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DEPRECATED:&lt;/strong&gt; Please use &lt;a href=&#34;#logs&#34;&gt;log&lt;/a&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;loglevel: debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Permitted values are &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt; and &lt;code&gt;debug&lt;/code&gt;. The default is
&lt;code&gt;info&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;storage&#34;&gt;storage&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;storage:
	filesystem:
		rootdirectory: /var/lib/registry
	azure:
		accountname: accountname
		accountkey: base64encodedaccountkey
		container: containername
	s3:
		accesskey: awsaccesskey
		secretkey: awssecretkey
		region: us-west-1
		bucket: bucketname
		encrypt: true
		secure: true
		v4auth: true
		chunksize: 5242880
		rootdirectory: /s3/object/name/prefix
	rados:
		poolname: radospool
		username: radosuser
		chunksize: 4194304
	cache:
		blobdescriptor: inmemory
	maintenance:
		uploadpurging:
			enabled: true
			age: 168h
			interval: 24h
			dryrun: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The storage option is &lt;strong&gt;required&lt;/strong&gt; and defines which storage backend is in use.
You must configure one backend; if you configure more, the registry returns an error.&lt;/p&gt;

&lt;p&gt;If you are deploying a registry on Windows, be aware that a Windows volume mounted from the host is not recommended. Instead, you can use a S3, or Azure, backing data-store. If you do use a Windows volume, you must ensure that the &lt;code&gt;PATH&lt;/code&gt; to the mount point is within Window&amp;rsquo;s &lt;code&gt;MAX_PATH&lt;/code&gt; limits. Failure to do so can result in the following error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /XXX protocol error and your registry will not function properly.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cache&#34;&gt;cache&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;cache&lt;/code&gt; subsection to enable caching of data accessed in the storage
backend. Currently, the only available cache provides fast access to layer
metadata. This, if configured, uses the &lt;code&gt;blobdescriptor&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;You can set &lt;code&gt;blobdescriptor&lt;/code&gt; field to &lt;code&gt;redis&lt;/code&gt; or &lt;code&gt;inmemory&lt;/code&gt;.  The &lt;code&gt;redis&lt;/code&gt; value uses
a Redis pool to cache layer metadata.  The &lt;code&gt;inmemory&lt;/code&gt; value uses an in memory
map.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Formerly, &lt;code&gt;blobdescriptor&lt;/code&gt; was known as &lt;code&gt;layerinfo&lt;/code&gt;. While these
are equivalent, &lt;code&gt;layerinfo&lt;/code&gt; has been deprecated, in favor or
&lt;code&gt;blobdescriptor&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;filesystem&#34;&gt;filesystem&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;filesystem&lt;/code&gt; storage backend uses the local disk to store registry files. It
is ideal for development and may be appropriate for some small-scale production
applications.&lt;/p&gt;

&lt;p&gt;This backend has a single, required &lt;code&gt;rootdirectory&lt;/code&gt; parameter. The parameter
specifies the absolute path to a directory. The registry stores all its data
here so make sure there is adequate space available.&lt;/p&gt;

&lt;h3 id=&#34;azure&#34;&gt;azure&lt;/h3&gt;

&lt;p&gt;This storage backend uses Microsoft&amp;rsquo;s Azure Blob Storage.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;accountname&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Azure account name.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;accountkey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Azure account key.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;container&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Name of the Azure container into which to store data.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;realm&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Domain name suffix for the Storage Service API endpoint. By default, this
      is &lt;code&gt;core.windows.net&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/table&gt;

&lt;h3 id=&#34;rados&#34;&gt;rados&lt;/h3&gt;

&lt;p&gt;This storage backend uses &lt;a href=&#34;http://ceph.com/docs/master/rados/&#34;&gt;Ceph Object Storage&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;poolname&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Ceph pool name.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;username&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Ceph cluster user to connect as (i.e. admin, not client.admin).
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;chunksize&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Size of the written RADOS objects. Default value is 4MB (4194304).
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;s3&#34;&gt;S3&lt;/h3&gt;

&lt;p&gt;This storage backend uses Amazon&amp;rsquo;s Simple Storage Service (S3).&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;accesskey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Your AWS Access Key.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;secretkey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Your AWS Secret Key.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;region&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The AWS region in which your bucket exists. For the moment, the Go AWS
      library in use does not use the newer DNS based bucket routing.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;bucket&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The bucket name in which you want to store the registry&#39;s data.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;encrypt&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
       Specifies whether the registry stores the image in encrypted format or
       not. A boolean value. The default is false.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;secure&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Indicates whether to use HTTPS instead of HTTP. A boolean value. The
      default is false.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;v4auth&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Indicates whether the registry uses Version 4 of AWS&#39;s authentication.
      Generally, you should set this to &lt;code&gt;true&lt;/code&gt;. By default, this is
      &lt;code&gt;false&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;chunksize&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      The S3 API requires multipart upload chunks to be at least 5MB. This value
      should be a number that is larger than 5*1024*1024.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;rootdirectory&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      This is a prefix that will be applied to all S3 keys to allow you to segment data in your bucket if necessary.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;maintenance&#34;&gt;Maintenance&lt;/h3&gt;

&lt;p&gt;Currently the registry can perform one maintenance function: upload purging.  This and future
maintenance functions which are related to storage can be configured under the maintenance section.&lt;/p&gt;

&lt;h3 id=&#34;upload-purging&#34;&gt;Upload Purging&lt;/h3&gt;

&lt;p&gt;Upload purging is a background process that periodically removes orphaned files from the upload
directories of the registry.  Upload purging is enabled by default.  To
 configure upload directory purging, the following parameters
must be set.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;Set to true to enable upload purging.  Default=true.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;age&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;Upload directories which are older than this age will be deleted.  Default=168h (1 week)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;The interval between upload directory purging.  Default=24h.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dryrun&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;dryrun can be set to true to obtain a summary of what directories will be deleted.  Default=false.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note: &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;interval&lt;/code&gt; are strings containing a number with optional fraction and a unit suffix: e.g. 45m, 2h10m, 168h (1 week).&lt;/p&gt;

&lt;h2 id=&#34;auth&#34;&gt;auth&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;auth:
	silly:
		realm: silly-realm
		service: silly-service
	token:
		realm: token-realm
		service: token-service
		issuer: registry-token-issuer
		rootcertbundle: /root/certs/bundle
	htpasswd:
		realm: basic-realm
		path: /path/to/htpasswd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;auth&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt;. There are
currently 2 possible auth providers, &lt;code&gt;silly&lt;/code&gt; and &lt;code&gt;token&lt;/code&gt;. You can configure only
one &lt;code&gt;auth&lt;/code&gt; provider.&lt;/p&gt;

&lt;h3 id=&#34;silly&#34;&gt;silly&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;silly&lt;/code&gt; auth is only for development purposes. It simply checks for the
existence of the &lt;code&gt;Authorization&lt;/code&gt; header in the HTTP request. It has no regard for
the header&amp;rsquo;s value. If the header does not exist, the &lt;code&gt;silly&lt;/code&gt; auth responds with a
challenge response, echoing back the realm, service, and scope that access was
denied for.&lt;/p&gt;

&lt;p&gt;The following values are used to configure the response:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;realm&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The realm in which the registry server authenticates.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;service&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The service being authenticated.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;token&#34;&gt;token&lt;/h3&gt;

&lt;p&gt;Token based authentication allows the authentication system to be decoupled from
the registry. It is a well established authentication paradigm with a high
degree of security.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;realm&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The realm in which the registry server authenticates.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;service&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The service being authenticated.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;issuer&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
The name of the token issuer. The issuer inserts this into
the token so it must match the value configured for the issuer.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;rootcertbundle&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
            yes
     &lt;/td&gt;
    &lt;td&gt;
The absolute path to the root certificate bundle. This bundle contains the
public part of the certificates that is used to sign authentication tokens.
     &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;For more information about Token based authentication configuration, see the [specification.]&lt;/p&gt;

&lt;h3 id=&#34;htpasswd&#34;&gt;htpasswd&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;htpasswd&lt;/em&gt; authentication backed allows one to configure basic auth using an
&lt;a href=&#34;https://httpd.apache.org/docs/2.4/programs/htpasswd.html&#34;&gt;Apache HTPasswd File&lt;/a&gt;.
Only &lt;a href=&#34;http://en.wikipedia.org/wiki/Bcrypt&#34;&gt;&lt;code&gt;bcrypt&lt;/code&gt;&lt;/a&gt; format passwords are
supported. Entries with other hash types will be ignored. The htpasswd file is
loaded once, at startup. If the file is invalid, the registry will display and
error and will not start.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This authentication scheme should only be used with TLS
configured, since basic authentication sends passwords as part of the http
header.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;realm&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      The realm in which the registry server authenticates.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;path&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Path to htpasswd file to load at startup.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;middleware&#34;&gt;middleware&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;middleware&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt;. Use this option to inject middleware at
named hook points. All middlewares must implement the same interface as the
object they&amp;rsquo;re wrapping. This means a registry middleware must implement the
&lt;code&gt;distribution.Namespace&lt;/code&gt; interface, repository middleware must implement
&lt;code&gt;distribution.Respository&lt;/code&gt;, and storage middleware must implement
&lt;code&gt;driver.StorageDriver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Currently only one middleware, &lt;code&gt;cloudfront&lt;/code&gt;, a storage middleware, is supported
in the registry implementation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;middleware:
	registry:
		- name: ARegistryMiddleware
		  options:
			foo: bar
	repository:
		- name: ARepositoryMiddleware
		  options:
			foo: bar
	storage:
		- name: cloudfront
		  options:
			baseurl: https://my.cloudfronted.domain.com/
			privatekey: /path/to/pem
			keypairid: cloudfrontkeypairid
			duration: 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each middleware entry has &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; entries. The &lt;code&gt;name&lt;/code&gt; must
correspond to the name under which the middleware registers itself. The
&lt;code&gt;options&lt;/code&gt; field is a map that details custom configuration required to
initialize the middleware. It is treated as a &lt;code&gt;map[string]interface{}&lt;/code&gt;. As such,
it supports any interesting structures desired, leaving it up to the middleware
initialization function to best determine how to handle the specific
interpretation of the options.&lt;/p&gt;

&lt;h3 id=&#34;cloudfront&#34;&gt;cloudfront&lt;/h3&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;baseurl&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      &lt;code&gt;SCHEME://HOST[/PATH]&lt;/code&gt; at which Cloudfront is served.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;privatekey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Private Key for Cloudfront provided by AWS.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;keypairid&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Key pair ID provided by AWS.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;duration&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Duration for which a signed URL should be valid.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;reporting&#34;&gt;reporting&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;reporting:
	bugsnag:
		apikey: bugsnagapikey
		releasestage: bugsnagreleasestage
		endpoint: bugsnagendpoint
	newrelic:
		licensekey: newreliclicensekey
		name: newrelicname
		verbose: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;reporting&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt; and configures error and metrics
reporting tools. At the moment only two services are supported, &lt;a href=&#34;http://newrelic.com/&#34;&gt;New
Relic&lt;/a&gt; and &lt;a href=&#34;http://bugsnag.com&#34;&gt;Bugsnag&lt;/a&gt;, a valid
configuration may contain both.&lt;/p&gt;

&lt;h3 id=&#34;bugsnag&#34;&gt;bugsnag&lt;/h3&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;apikey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      API Key provided by Bugsnag
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;releasestage&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Tracks where the registry is deployed, for example,
      &lt;codde&gt;production&lt;/code&gt;,&lt;codde&gt;staging&lt;/code&gt;, or
      &lt;codde&gt;development&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;endpoint&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Specify the enterprise Bugsnag endpoint.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;newrelic&#34;&gt;newrelic&lt;/h3&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;licensekey&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      License key provided by New Relic.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;name&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      New Relic application name.
    &lt;/td&gt;
  &lt;/tr&gt;
     &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;verbose&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Enable New Relic debugging output on stdout.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;http&#34;&gt;http&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;http:
	addr: localhost:5000
	net: tcp
	prefix: /my/nested/registry/
	secret: asecretforlocaldevelopment
	tls:
		certificate: /path/to/x509/public
		key: /path/to/x509/private
    clientcas:
      - /path/to/ca.pem
      - /path/to/another/ca.pem
	debug:
		addr: localhost:5001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;http&lt;/code&gt; option details the configuration for the HTTP server that hosts the registry.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;addr&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
     The address for which the server should accept connections. The form depends on a network type (see &lt;code&gt;net&lt;/code&gt; option):
     &lt;code&gt;HOST:PORT&lt;/code&gt; for tcp and &lt;code&gt;FILE&lt;/code&gt; for a unix socket.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;net&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
     The network which is used to create a listening socket. Known networks are &lt;code&gt;unix&lt;/code&gt; and &lt;code&gt;tcp&lt;/code&gt;.
     The default empty value means tcp.
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;prefix&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
If the server does not run at the root path use this value to specify the
prefix. The root path is the section before &lt;code&gt;v2&lt;/code&gt;. It
should have both preceding and trailing slashes, for example &lt;code&gt;/path/&lt;/code&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;secret&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
A random piece of data. This is used to sign state that may be stored with the
client to protect against tampering. For production environments you should generate a
random piece of data using a cryptographically secure random generator.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;tls&#34;&gt;tls&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;tls&lt;/code&gt; struct within &lt;code&gt;http&lt;/code&gt; is &lt;strong&gt;optional&lt;/strong&gt;. Use this to configure TLS
for the server. If you already have a server such as Nginx or Apache running on
the same host as the registry, you may prefer to configure TLS termination there
and proxy connections to the registry server.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;certificate&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
       Absolute path to x509 cert file
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;key&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Absolute path to x509 private key file.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;clientcas&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      An array of absolute paths to a x509 CA file
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;debug&#34;&gt;debug&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; option is &lt;strong&gt;optional&lt;/strong&gt; . Use it to configure a debug server that
can be helpful in diagnosing problems. The debug endpoint can be used for
monitoring registry metrics and health, as well as profiling. Sensitive
information may be available via the debug endpoint. Please be certain that
access to the debug endpoint is locked down in a production environment.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; section takes a single, required &lt;code&gt;addr&lt;/code&gt; parameter. This parameter
specifies the &lt;code&gt;HOST:PORT&lt;/code&gt; on which the debug server should accept connections.&lt;/p&gt;

&lt;h2 id=&#34;notifications&#34;&gt;notifications&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;notifications:
	endpoints:
		- name: alistener
		  disabled: false
		  url: https://my.listener.com/event
		  headers: &amp;lt;http.Header&amp;gt;
		  timeout: 500
		  threshold: 5
		  backoff: 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The notifications option is &lt;strong&gt;optional&lt;/strong&gt; and currently may contain a single
option, &lt;code&gt;endpoints&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;endpoints&#34;&gt;endpoints&lt;/h3&gt;

&lt;p&gt;Endpoints is a list of named services (URLs) that can accept event notifications.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;name&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
A human readable name for the service.
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;disabled&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
A boolean to enable/disable notifications for a service.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;url&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
        yes
    &lt;/td&gt;
    &lt;td&gt;
The URL to which events should be published.
    &lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;headers&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Static headers to add to each request.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;timeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      An HTTP timeout value. This field takes a positive integer and an optional
      suffix indicating the unit of time. Possible units are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;threshold&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      An integer specifying how long to wait before backing off a failure.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;backoff&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      How long the system backs off before retrying. This field takes a positive
      integer and an optional suffix indicating the unit of time. Possible units
      are:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ns&lt;/code&gt; (nanoseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;us&lt;/code&gt; (microseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (milliseconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt;
      &lt;/ul&gt;
    If you omit the suffix, the system interprets the value as nanoseconds.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;redis&#34;&gt;redis&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;redis:
	addr: localhost:6379
	password: asecret
	db: 0
	dialtimeout: 10ms
	readtimeout: 10ms
	writetimeout: 10ms
	pool:
		maxidle: 16
		maxactive: 64
		idletimeout: 300s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Declare parameters for constructing the redis connections. Registry instances
may use the Redis instance for several applications. The current purpose is
caching information about immutable blobs. Most of the options below control
how the registry connects to redis. You can control the pool&amp;rsquo;s behavior
with the &lt;a href=&#34;#pool&#34;&gt;pool&lt;/a&gt; subsection.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;addr&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      yes
    &lt;/td&gt;
    &lt;td&gt;
      Address (host and port) of redis instance.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;password&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      A password used to authenticate to the redis instance.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;db&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Selects the db for each connection.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;dialtimeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Timeout for connecting to a redis instance.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;readtimeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Timeout for reading from redis connections.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;writetimeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Timeout for writing to redis connections.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;pool&#34;&gt;pool&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pool:
	maxidle: 16
	maxactive: 64
	idletimeout: 300s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure the behavior of the Redis connection pool.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Required&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;maxidle&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      Sets the maximum number of idle connections.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;maxactive&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      sets the maximum number of connections that should
  be opened before blocking a connection request.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;idletimeout&lt;/code&gt;
    &lt;/td&gt;
    &lt;td&gt;
      no
    &lt;/td&gt;
    &lt;td&gt;
      sets the amount time to wait before closing
  inactive connections.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;example-development-configuration&#34;&gt;Example: Development configuration&lt;/h2&gt;

&lt;p&gt;The following is a simple example you can use for local development:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 0.1
log:
	level: debug
storage:
    filesystem:
        rootdirectory: /var/lib/registry
http:
    addr: localhost:5000
    secret: asecretforlocaldevelopment
    debug:
        addr: localhost:5001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above configures the registry instance to run on port &lt;code&gt;5000&lt;/code&gt;, binding to
&lt;code&gt;localhost&lt;/code&gt;, with the &lt;code&gt;debug&lt;/code&gt; server enabled. Registry data storage is in the
&lt;code&gt;/var/lib/registry&lt;/code&gt; directory. Logging is in &lt;code&gt;debug&lt;/code&gt; mode, which is the most
verbose.&lt;/p&gt;

&lt;p&gt;A similar simple configuration is available at
&lt;a href=&#34;https://github.com/docker/distribution/blob/master/cmd/registry/config.yml&#34;&gt;config.yml&lt;/a&gt;.
Both are generally useful for local development.&lt;/p&gt;

&lt;h2 id=&#34;example-middleware-configuration&#34;&gt;Example: Middleware configuration&lt;/h2&gt;

&lt;p&gt;This example illustrates how to configure storage middleware in a registry.
Middleware allows the registry to serve layers via a content delivery network
(CDN). This is useful for reducing requests to the storage layer.&lt;/p&gt;

&lt;p&gt;Currently, the registry supports &lt;a href=&#34;http://aws.amazon.com/cloudfront/&#34;&gt;Amazon
Cloudfront&lt;/a&gt;. You can only use Cloudfront in
conjunction with the S3 storage driver.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Parameter&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The storage middleware name. Currently &lt;code&gt;cloudfront&lt;/code&gt; is an accepted value.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;disabled&lt;code&gt;&lt;/td&gt;
    &lt;td&gt;Set to &lt;code&gt;false&lt;/code&gt; to easily disable the middleware.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;options:&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;
    A set of key/value options to configure the middleware.
    &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;baseurl:&lt;/code&gt; The Cloudfront base URL.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;privatekey:&lt;/code&gt; The location of your AWS private key on the filesystem. &lt;/li&gt;
    &lt;li&gt;&lt;code&gt;keypairid:&lt;/code&gt; The ID of your Cloudfront keypair. &lt;/li&gt;
        &lt;li&gt;&lt;code&gt;duration:&lt;/code&gt; The duration in minutes for which the URL is valid. Default is 20. &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The following example illustrates these values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;middleware:
    storage:
        - name: cloudfront
          disabled: false
          options:
             baseurl: http://d111111abcdef8.cloudfront.net
             privatekey: /path/to/asecret.pem
             keypairid: asecret
             duration: 60
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Cloudfront keys exist separately to other AWS keys.  See
&lt;a href=&#34;http://docs.aws.amazon.com/AWSSecurityCredentials/1.0/AboutAWSCredentials.html#KeyPairs&#34;&gt;the documentation on AWS credentials&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Deploying a registry server</title>
      <link>http://localhost/registry/deploying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/deploying/</guid>
      <description>

&lt;h1 id=&#34;deploying-a-registry-server&#34;&gt;Deploying a registry server&lt;/h1&gt;

&lt;p&gt;You obviously need to &lt;a href=&#34;https://docs.docker.com/installation/&#34;&gt;install Docker&lt;/a&gt; (remember you need &lt;strong&gt;Docker version 1.6.0 or newer&lt;/strong&gt;).&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;Start your registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker run -d -p 5000:5000 \
        --restart=always --name registry registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;You can now tag an image and push it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull ubuntu &amp;amp;&amp;amp; docker tag ubuntu localhost:5000/batman/ubuntu
$ docker push localhost:5000/batman/ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then pull it back:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull localhost:5000/batman/ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;where-is-my-data&#34;&gt;Where is my data?&lt;/h2&gt;

&lt;p&gt;By default, your registry stores its data on the local filesystem, inside the container.&lt;/p&gt;

&lt;p&gt;In a production environment, it&amp;rsquo;s highly recommended to use &lt;a href=&#34;http://localhost/registry/storagedrivers&#34;&gt;another storage backend&lt;/a&gt;, by &lt;a href=&#34;configuration&#34;&gt;configuring it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to stick with the local posix filesystem, you should store your data outside of the container.&lt;/p&gt;

&lt;p&gt;This is achieved by mounting a volume into the container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker run -d -p 5000:5000 \
    -e REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry \
    -v /myregistrydata:/var/lib/registry \
    --restart=always --name registry registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;making-your-registry-available&#34;&gt;Making your Registry available&lt;/h2&gt;

&lt;p&gt;Now that your registry works on &lt;code&gt;localhost&lt;/code&gt;, you probably want to make it available as well to other hosts.&lt;/p&gt;

&lt;p&gt;Let assume your registry is accessible via the domain name &lt;code&gt;myregistrydomain.com&lt;/code&gt; (still on port &lt;code&gt;5000&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you try to &lt;code&gt;docker pull myregistrydomain.com:5000/batman/ubuntu&lt;/code&gt;, you will see the following error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FATA[0000] Error response from daemon: v1 ping attempt failed with error:
Get https://myregistrydomain.com:5000/v1/_ping: tls: oversized record received with length 20527. 
If this private registry supports only HTTP or HTTPS with an unknown CA certificate,please add 
`--insecure-registry myregistrydomain.com:5000` to the daemon&#39;s arguments.
In the case of HTTPS, if you have access to the registry&#39;s CA certificate, no need for the flag;
simply place the CA certificate at /etc/docker/certs.d/myregistrydomain.com:5000/ca.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If trying to reach a non &lt;code&gt;localhost&lt;/code&gt; registry, Docker requires that you secure it using https, or make it explicit that you want to run an insecure registry.&lt;/p&gt;

&lt;p&gt;You basically have three different options to comply with that security requirement here.&lt;/p&gt;

&lt;h3 id=&#34;1-buy-a-ssl-certificate-for-your-domain&#34;&gt;1. buy a SSL certificate for your domain&lt;/h3&gt;

&lt;p&gt;This is the (highly) recommended solution.&lt;/p&gt;

&lt;p&gt;You can buy a certificate for as cheap as 10$ a year (some registrars even offer certificates for free), and this will save you a lot of trouble.&lt;/p&gt;

&lt;p&gt;Assuming you now have a &lt;code&gt;domain.crt&lt;/code&gt; and &lt;code&gt;domain.key&lt;/code&gt; inside a directory named &lt;code&gt;certs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Stop your registry
docker stop registry &amp;amp;&amp;amp; docker rm registry

# Start your registry with TLS enabled
docker run -d -p 5000:5000 \
	-v `pwd`/certs:/certs \
	-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
	-e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
	--restart=always --name registry \
	registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;best solution&lt;/li&gt;
&lt;li&gt;work without further ado (assuming you bought your certificate from a CA that is trusted by your operating system)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-instruct-docker-to-trust-your-registry-as-insecure&#34;&gt;2. instruct docker to trust your registry as insecure&lt;/h3&gt;

&lt;p&gt;This basically tells Docker to entirely disregard security for your registry.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;edit the file &lt;code&gt;/etc/default/docker&lt;/code&gt; so that there is a line that reads: &lt;code&gt;DOCKER_OPTS=&amp;quot;--insecure-registry myregistrydomain.com:5000&amp;quot;&lt;/code&gt; (or add that to existing &lt;code&gt;DOCKER_OPTS&lt;/code&gt;). Restart docker.&lt;/li&gt;
&lt;li&gt;restart your Docker daemon: on ubuntu, this is usually &lt;code&gt;service docker stop &amp;amp;&amp;amp; service docker start&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy to configure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;very insecure&lt;/li&gt;
&lt;li&gt;you have to configure every docker daemon that wants to access your registry&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-use-a-self-signed-certificate-and-configure-docker-to-trust-it&#34;&gt;3. use a self-signed certificate and configure docker to trust it&lt;/h3&gt;

&lt;p&gt;Alternatively, you can generate your own certificate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p certs &amp;amp;&amp;amp; openssl req \
	-newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key \
	-x509 -days 365 -out certs/domain.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to use the name &lt;code&gt;myregistrydomain.com&lt;/code&gt; as a CN.&lt;/p&gt;

&lt;p&gt;Now go to solution 1 above and stop and restart your registry.&lt;/p&gt;

&lt;p&gt;Then you have to instruct every docker daemon to trust that certificate. This is done by copying the &lt;code&gt;domain.crt&lt;/code&gt; file to &lt;code&gt;/etc/docker/certs.d/myregistrydomain.com:5000/ca.crt&lt;/code&gt; (don&amp;rsquo;t forget to restart docker after doing so).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;more secure than solution 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you have to configure every docker daemon that wants to access your registry&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;using-compose&#34;&gt;Using Compose&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s highly recommended to use &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; to facilitate managing your Registry configuration.&lt;/p&gt;

&lt;p&gt;Here is a simple &lt;code&gt;docker-compose.yml&lt;/code&gt; that does setup your registry exactly as above, with TLS enabled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;registry:
  restart: always
  image: registry:2
  ports:
    - 5000:5000
  environment:
    REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
    REGISTRY_HTTP_TLS_KEY: /certs/domain.key
    REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
  volumes:
    - /path/registry-data:/var/lib/registry
    - /path/certs:/certs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then start your registry with a simple&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;

&lt;p&gt;You are now ready to explore &lt;a href=&#34;http://localhost/registry/configuration&#34;&gt;the registry configuration&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Registry 2.0</title>
      <link>http://localhost/registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/</guid>
      <description>

&lt;h1 id=&#34;docker-registry&#34;&gt;Docker Registry&lt;/h1&gt;

&lt;h2 id=&#34;what-it-is&#34;&gt;What it is&lt;/h2&gt;

&lt;p&gt;The Registry is a stateless, highly scalable server side application that stores and lets you distribute Docker images.
The Registry is open-source, under the permissive &lt;a href=&#34;http://en.wikipedia.org/wiki/Apache_License&#34;&gt;Apache license&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;why-use-it&#34;&gt;Why use it&lt;/h2&gt;

&lt;p&gt;You should use the Registry if you want to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tightly control where your images are being stored&lt;/li&gt;
&lt;li&gt;fully own your images distribution pipeline&lt;/li&gt;
&lt;li&gt;integrate images storage and distribution into your inhouse development workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;Users looking for a zero maintenance, ready-to-go solution are encouraged to head-over to the &lt;a href=&#34;https://hub.docker.com&#34;&gt;Docker Hub&lt;/a&gt;, which provides a free-to-use, hosted Registry, plus additional features (organization accounts, automated builds, and more).&lt;/p&gt;

&lt;p&gt;Users looking for a commercially supported version of the Registry should look into &lt;a href=&#34;https://docs.docker.com/docker-hub-enterprise/&#34;&gt;Docker Hub Enterprise&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;The Registry is compatible with Docker engine &lt;strong&gt;version 1.6.0 or higher&lt;/strong&gt;.
If you really need to work with older Docker versions, you should look into the &lt;a href=&#34;https://github.com/docker/docker-registry&#34;&gt;old python registry&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# Start your registry
docker run -d -p 5000:5000 registry:2

# Pull (or build) some image from the hub
docker pull ubuntu

# Tag the image so that it points to your registry
docker tag ubuntu localhost:5000/myfirstimage

# Push it
docker push localhost:5000/myfirstimage

# Pull it back
docker pull localhost:5000/myfirstimage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;

&lt;p&gt;Simple as that? Yes. Continue on to read the &lt;a href=&#34;http://localhost/registry/introduction&#34;&gt;overview of the registry&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Registry HTTP API V2</title>
      <link>http://localhost/registry/spec/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/spec/api/</guid>
      <description>

&lt;h1 id=&#34;docker-registry-http-api-v2&#34;&gt;Docker Registry HTTP API V2&lt;/h1&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Docker Registry HTTP API&lt;/em&gt; is the protocol to facilitate distribution of
images to the docker engine. It interacts with instances of the docker
registry, which is a service to manage information about docker images and
enable their distribution. The specification covers the operation of version 2
of this API, known as &lt;em&gt;Docker Registry HTTP API V2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While the V1 registry protocol is usable, there are several problems with the
architecture that have led to this new version. The main driver of this
specification these changes to the docker the image format, covered in
docker/docker#8093. The new, self-contained image manifest simplifies image
definition and improves security. This specification will build on that work,
leveraging new properties of the manifest format to improve performance,
reduce bandwidth usage and decrease the likelihood of backend corruption.&lt;/p&gt;

&lt;p&gt;For relevant details and history leading up to this specification, please see
the following issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/8093&#34;&gt;docker/docker#8093&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/9015&#34;&gt;docker/docker#9015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker-registry/issues/612&#34;&gt;docker/docker-registry#612&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;scope&#34;&gt;Scope&lt;/h3&gt;

&lt;p&gt;This specification covers the URL layout and protocols of the interaction
between docker registry and docker core. This will affect the docker core
registry API and the rewrite of docker-registry. Docker registry
implementations may implement other API endpoints, but they are not covered by
this specification.&lt;/p&gt;

&lt;p&gt;This includes the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Namespace-oriented URI Layout&lt;/li&gt;
&lt;li&gt;PUSH/PULL registry server for V2 image manifest format&lt;/li&gt;
&lt;li&gt;Resumable layer PUSH support&lt;/li&gt;
&lt;li&gt;V2 Client library implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While authentication and authorization support will influence this
specification, details of the protocol will be left to a future specification.
Relevant header definitions and error codes are present to provide an
indication of what a client may encounter.&lt;/p&gt;

&lt;h4 id=&#34;future&#34;&gt;Future&lt;/h4&gt;

&lt;p&gt;There are features that have been discussed during the process of cutting this
specification. The following is an incomplete list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Immutable image references&lt;/li&gt;
&lt;li&gt;Multiple architecture support&lt;/li&gt;
&lt;li&gt;Migration from v2compatibility representation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These may represent features that are either out of the scope of this
specification, the purview of another specification or have been deferred to a
future version.&lt;/p&gt;

&lt;h3 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;For the most part, the use cases of the former registry API apply to the new
version. Differentiating use cases are covered below.&lt;/p&gt;

&lt;h4 id=&#34;image-verification&#34;&gt;Image Verification&lt;/h4&gt;

&lt;p&gt;A docker engine instance would like to run verified image named
&amp;ldquo;library/ubuntu&amp;rdquo;, with the tag &amp;ldquo;latest&amp;rdquo;. The engine contacts the registry,
requesting the manifest for &amp;ldquo;library/ubuntu:latest&amp;rdquo;. An untrusted registry
returns a manifest. Before proceeding to download the individual layers, the
engine verifies the manifest&amp;rsquo;s signature, ensuring that the content was
produced from a trusted source and no tampering has occured. After each layer
is downloaded, the engine verifies the digest of the layer, ensuring that the
content matches that specified by the manifest.&lt;/p&gt;

&lt;h4 id=&#34;resumable-push&#34;&gt;Resumable Push&lt;/h4&gt;

&lt;p&gt;Company X&amp;rsquo;s build servers lose connectivity to docker registry before
completing an image layer transfer. After connectivity returns, the build
server attempts to re-upload the image. The registry notifies the build server
that the upload has already been partially attempted. The build server
responds by only sending the remaining data to complete the image file.&lt;/p&gt;

&lt;h4 id=&#34;resumable-pull&#34;&gt;Resumable Pull&lt;/h4&gt;

&lt;p&gt;Company X is having more connectivity problems but this time in their
deployment datacenter. When downloading an image, the connection is
interrupted before completion. The client keeps the partial data and uses http
&lt;code&gt;Range&lt;/code&gt; requests to avoid downloading repeated data.&lt;/p&gt;

&lt;h4 id=&#34;layer-upload-de-duplication&#34;&gt;Layer Upload De-duplication&lt;/h4&gt;

&lt;p&gt;Company Y&amp;rsquo;s build system creates two identical docker layers from build
processes A and B. Build process A completes uploading the layer before B.
When process B attempts to upload the layer, the registry indicates that its
not necessary because the layer is already known.&lt;/p&gt;

&lt;p&gt;If process A and B upload the same layer at the same time, both operations
will proceed and the first to complete will be stored in the registry (Note:
we may modify this to prevent dogpile with some locking mechanism).&lt;/p&gt;

&lt;h3 id=&#34;changes&#34;&gt;Changes&lt;/h3&gt;

&lt;p&gt;The V2 specification has been written to work as a living document, specifying
only what is certain and leaving what is not specified open or to future
changes. Only non-conflicting additions should be made to the API and accepted
changes should avoid preventing future changes from happening.&lt;/p&gt;

&lt;p&gt;This section should be updated when changes are made to the specification,
indicating what is different. Optionally, we may start marking parts of the
specification to correspond with the versions enumerated here.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;2.0.2&lt;/dt&gt;
  &lt;dd&gt;
    &lt;li&gt;Added section covering digest format.&lt;/li&gt;
    &lt;li&gt;Added more clarification that manifest cannot be deleted by tag.&lt;/li&gt;
  &lt;/dd&gt;

    &lt;dt&gt;2.0.1&lt;/dt&gt;
    &lt;dd&gt;
        &lt;ul&gt;
            &lt;li&gt;Added capability of doing streaming upload to PATCH blob upload.&lt;/li&gt;
            &lt;li&gt;Updated PUT blob upload to no longer take final chunk, now requires entire data or no data.&lt;/li&gt;
            &lt;li&gt;Removed `416 Requested Range Not Satisfiable` response status from PUT blob upload.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/dd&gt;

    &lt;dt&gt;2.0.0&lt;/dt&gt;
    &lt;dd&gt;
        &lt;ul&gt;
            &lt;li&gt;Added support for immutable manifest references in manifest endpoints.&lt;/li&gt;
            &lt;li&gt;Deleting a manifest by tag has been deprecated.&lt;/li&gt;
            &lt;li&gt;Specified `Docker-Content-Digest` header for appropriate entities.&lt;/li&gt;
            &lt;li&gt;Added error code for unsupported operations.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/dd&gt;

    &lt;dt&gt;2.0&lt;/dt&gt;
    &lt;dd&gt;
        This is the baseline specification.
    &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This section covers client flows and details of the API endpoints. The URI
layout of the new API is structured to support a rich authentication and
authorization model by leveraging namespaces. All endpoints will be prefixed
by the API version and the repository name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, an API endpoint that will work with the &lt;code&gt;library/ubuntu&lt;/code&gt;
repository, the URI prefix will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/v2/library/ubuntu/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This scheme provides rich access control over various operations and methods
using the URI prefix and http methods that can be controlled in variety of
ways.&lt;/p&gt;

&lt;p&gt;Classically, repository names have always been two path components where each
path component is less than 30 characters. The V2 registry API does not
enforce this. The rules for a repository name are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A repository name is broken up into &lt;em&gt;path components&lt;/em&gt;. A component of a
repository name must be at least two lowercase, alpha-numeric characters,
optionally separated by periods, dashes or underscores. More strictly, it
must match the regular expression &lt;code&gt;[a-z0-9]+(?:[._-][a-z0-9]+)*&lt;/code&gt; and the
matched result must be 2 or more characters in length.&lt;/li&gt;
&lt;li&gt;The name of a repository must have at least two path components, separated
by a forward slash.&lt;/li&gt;
&lt;li&gt;The total length of a repository name, including slashes, must be less the
256 characters.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These name requirements &lt;em&gt;only&lt;/em&gt; apply to the registry API and should accept a
superset of what is supported by other docker ecosystem components.&lt;/p&gt;

&lt;p&gt;All endpoints should support aggressive http caching, compression and range
headers, where appropriate. The new API attempts to leverage HTTP semantics
where possible but may break from standards to implement targeted features.&lt;/p&gt;

&lt;p&gt;For detail on individual endpoints, please see the &lt;a href=&#34;#detail&#34;&gt;&lt;em&gt;Detail&lt;/em&gt;&lt;/a&gt;
section.&lt;/p&gt;

&lt;h3 id=&#34;errors&#34;&gt;Errors&lt;/h3&gt;

&lt;p&gt;Actionable failure conditions, covered in detail in their relevant sections,
are reported as part of 4xx responses, in a json response body. One or more
errors will be returned in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;errors:&amp;quot; [{
            &amp;quot;code&amp;quot;: &amp;lt;error identifier&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;lt;message describing condition&amp;gt;,
            &amp;quot;detail&amp;quot;: &amp;lt;unstructured&amp;gt;
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;code&lt;/code&gt; field will be a unique identifier, all caps with underscores by
convention. The &lt;code&gt;message&lt;/code&gt; field will be a human readable string. The optional
&lt;code&gt;detail&lt;/code&gt; field may contain arbitrary json data providing information the
client can use to resolve the issue.&lt;/p&gt;

&lt;p&gt;While the client can take action on certain error codes, the registry may add
new error codes over time. All client implementations should treat unknown
error codes as &lt;code&gt;UNKNOWN&lt;/code&gt;, allowing future error codes to be added without
breaking API compatibility. For the purposes of the specification error codes
will only be added and never removed.&lt;/p&gt;

&lt;p&gt;For a complete account of all error codes, please see the &lt;em&gt;Detail&lt;/em&gt; section.&lt;/p&gt;

&lt;h3 id=&#34;api-version-check&#34;&gt;API Version Check&lt;/h3&gt;

&lt;p&gt;A minimal endpoint, mounted at &lt;code&gt;/v2/&lt;/code&gt; will provide version support information
based on its response statuses. The request format is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a &lt;code&gt;200 OK&lt;/code&gt; response is returned, the registry implements the V2(.1)
registry API and the client may proceed safely with other V2 operations.
Optionally, the response may contain information about the supported paths in
the response body. The client should be prepared to ignore this data.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;401 Unauthorized&lt;/code&gt; response is returned, the client should take action
based on the contents of the &amp;ldquo;WWW-Authenticate&amp;rdquo; header and try the endpoint
again. Depending on access control setup, the client may still have to
authenticate against different resources, even if this check succeeds.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;404 Not Found&lt;/code&gt; response status, or other unexpected status, is returned,
the client should proceed with the assumption that the registry does not
implement V2 of the API.&lt;/p&gt;

&lt;p&gt;When a &lt;code&gt;200 OK&lt;/code&gt; or &lt;code&gt;401 Unauthorized&lt;/code&gt; response is returned, the
&amp;ldquo;Docker-Distribution-API-Version&amp;rdquo; header should be set to &amp;ldquo;registry/2.0&amp;rdquo;.
Clients may require this header value to determine if the endpoint serves this
API. When this header is omitted, clients may fallback to an older API version.&lt;/p&gt;

&lt;h3 id=&#34;content-digests&#34;&gt;Content Digests&lt;/h3&gt;

&lt;p&gt;This API design is driven heavily by &lt;a href=&#34;http://en.wikipedia.org/wiki/Content-addressable_storage&#34;&gt;content addressability&lt;/a&gt;.
The core of this design is the concept of a content addressable identifier. It
uniquely identifies content by taking a collision-resistent hash of the bytes.
Such an identifier can be independently calculated and verified by selection
of a common &lt;em&gt;algorithm&lt;/em&gt;. If such an identifier can be communicated in a secure
manner, one can retrieve the content from an insecure source, calculate it
independently and be certain that the correct content was obtained. Put simply,
the identifier is a property of the content.&lt;/p&gt;

&lt;p&gt;To disambiguate from other concepts, we call this identifier a &lt;em&gt;digest&lt;/em&gt;. A
&lt;em&gt;digest&lt;/em&gt; is a serialized hash result, consisting of a &lt;em&gt;algorithm&lt;/em&gt; and &lt;em&gt;hex&lt;/em&gt;
portion. The &lt;em&gt;algorithm&lt;/em&gt; identifies the methodology used to calculate the
digest. The &lt;em&gt;hex&lt;/em&gt; portion is the hex-encoded result of the hash.&lt;/p&gt;

&lt;p&gt;We define a &lt;em&gt;digest&lt;/em&gt; string to match the following grammar:&lt;/p&gt;

&lt;p&gt;digest      := algorithm &amp;ldquo;:&amp;rdquo; hex
  algorithm   := /[A-Fa-f0-9_+.-]+/
  hex         := /[A-Fa-f0-9]+/&lt;/p&gt;

&lt;p&gt;Some examples of &lt;em&gt;digests&lt;/em&gt; include the following:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;digest&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b&lt;/td&gt;
&lt;td&gt;Common sha256 based digest&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tarsum.v1+sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b&lt;/td&gt;
&lt;td&gt;Tarsum digest, used for legacy layer digests.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While we show an example of using a &lt;code&gt;tarsum&lt;/code&gt; digest, the security
of tarsum has not been verified. It is recommended that most implementations
use sha256 for interoperability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the &lt;em&gt;algorithm&lt;/em&gt; does allow one to implement a wide variety of
algorithms, compliant implementations should use sha256. Heavy processing of
input before calculating a hash is discouraged to avoid degrading the
uniqueness of the &lt;em&gt;digest&lt;/em&gt; but some canonicalization may be performed to
ensure consistent identifiers.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use a simple example in pseudo-code to demonstrate a digest calculation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let C = &#39;a small string&#39;
let B = sha256(C)
let D = &#39;sha256:&#39; + EncodeHex(B)
let ID(C) = D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, we have bytestring &lt;em&gt;C&lt;/em&gt; passed into a function, &lt;em&gt;SHA256&lt;/em&gt;, that returns a
bytestring B, which is the hash of &lt;em&gt;C&lt;/em&gt;. &lt;em&gt;D&lt;/em&gt; gets the algorithm concatenated
with the hex encoding of &lt;em&gt;B&lt;/em&gt;. We then define the identifier of &lt;em&gt;C&lt;/em&gt; to &lt;em&gt;ID&amp;copy;&lt;/em&gt;
as equal to &lt;em&gt;D&lt;/em&gt;. A digest can be verified by independently calculating &lt;em&gt;D&lt;/em&gt; and
comparing it with identifier &lt;em&gt;ID&amp;copy;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;digest-header&#34;&gt;Digest Header&lt;/h4&gt;

&lt;p&gt;To provide verification of http content, any response may include a &lt;code&gt;Docker-
Content-Digest&lt;/code&gt; header. This will include the digest of the target entity
returned in the response. For blobs, this is the entire blob content. For
manifests, this is the manifest body without the signature content, also known
as the JWS payload. Note that the commonly used canonicalization for digest
calculation may be dependent on the mediatype of the content, such as with
manifests.&lt;/p&gt;

&lt;p&gt;The client may choose to ignore the header or may verify it to ensure content
integrity and transport security. This is most important when fetching by a
digest. To ensure security, the content should be verified against the digest
used to fetch the content. At times, the returned digest may differ from that
used to initiate a request. Such digests are considered to be from different
&lt;em&gt;domains&lt;/em&gt;, meaning they have different values for &lt;em&gt;algorithm&lt;/em&gt;. In such a case,
the client may choose to verify the digests in both domains or ignore the
server&amp;rsquo;s digest. To maintain security, the client &lt;em&gt;must&lt;/em&gt; always verify the
content against the &lt;em&gt;digest&lt;/em&gt; used to fetch the content.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; If a &lt;em&gt;digest&lt;/em&gt; is used to fetch content, the client should use
the same digest used to fetch the content to verify it. The header &lt;code&gt;Docker-
Content-Digest&lt;/code&gt; should not be trusted over the &amp;ldquo;local&amp;rdquo; digest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;pulling-an-image&#34;&gt;Pulling An Image&lt;/h3&gt;

&lt;p&gt;An &amp;ldquo;image&amp;rdquo; is a combination of a JSON manifest and individual layer files. The
process of pulling an image centers around retrieving these two components.&lt;/p&gt;

&lt;p&gt;The first step in pulling an image is to retrieve the manifest. For reference,
the relevant manifest fields for the registry are the following:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;The name of the image.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tag&lt;/td&gt;
&lt;td&gt;The tag for this version of the image.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fsLayers&lt;/td&gt;
&lt;td&gt;A list of layer descriptors (including tarsum)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;signature&lt;/td&gt;
&lt;td&gt;A JWS used to verify the manifest content&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more information about the manifest format, please see
&lt;a href=&#34;https://github.com/docker/docker/issues/8093&#34;&gt;docker/docker#8093&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the manifest is in hand, the client must verify the signature to ensure
the names and layers are valid. Once confirmed, the client will then use the
tarsums to download the individual layers. Layers are stored in as blobs in
the V2 registry API, keyed by their tarsum digest.&lt;/p&gt;

&lt;h4 id=&#34;pulling-an-image-manifest&#34;&gt;Pulling an Image Manifest&lt;/h4&gt;

&lt;p&gt;The image manifest can be fetched with the following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; parameter identify the image and are required. The
reference may include a tag or digest.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;404 Not Found&lt;/code&gt; response will be returned if the image is unknown to the
registry. If the image exists and the response is successful, the image
manifest will be returned, with the following format (see docker/docker#8093
for details):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
   &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
   &amp;quot;tag&amp;quot;: &amp;lt;tag&amp;gt;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;lt;tarsum&amp;gt;
      },
      ...
    ]
   ],
   &amp;quot;history&amp;quot;: &amp;lt;v1 images&amp;gt;,
   &amp;quot;signature&amp;quot;: &amp;lt;JWS&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client should verify the returned manifest signature for authenticity
before fetching layers.&lt;/p&gt;

&lt;h4 id=&#34;pulling-a-layer&#34;&gt;Pulling a Layer&lt;/h4&gt;

&lt;p&gt;Layers are stored in the blob portion of the registry, keyed by tarsum digest.
Pulling a layer is carried out by a standard http request. The URL is as
follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;tarsum&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access to a layer will be gated by the &lt;code&gt;name&lt;/code&gt; of the repository but is
identified uniquely in the registry by &lt;code&gt;tarsum&lt;/code&gt;. The &lt;code&gt;tarsum&lt;/code&gt; parameter is an
opaque field, to be interpreted by the tarsum library.&lt;/p&gt;

&lt;p&gt;This endpoint may issue a 307 (302 for &amp;lt;HTTP 1.1) redirect to another service
for downloading the layer and clients should be prepared to handle redirects.&lt;/p&gt;

&lt;p&gt;This endpoint should support aggressive HTTP caching for image layers. Support
for Etags, modification dates and other cache control headers should be
included. To allow for incremental downloads, &lt;code&gt;Range&lt;/code&gt; requests should be
supported, as well.&lt;/p&gt;

&lt;h3 id=&#34;pushing-an-image&#34;&gt;Pushing An Image&lt;/h3&gt;

&lt;p&gt;Pushing an image works in the opposite order as a pull. After assembling the
image manifest, the client must first push the individual layers. When the
layers are fully pushed into the registry, the client should upload the signed
manifest.&lt;/p&gt;

&lt;p&gt;The details of each step of the process are covered in the following sections.&lt;/p&gt;

&lt;h4 id=&#34;pushing-a-layer&#34;&gt;Pushing a Layer&lt;/h4&gt;

&lt;p&gt;All layer uploads use two steps to manage the upload process. The first step
starts the upload in the registry service, returning a url to carry out the
second step. The second step uses the upload url to transfer the actual data.
Uploads are started with a POST request which returns a url that can be used
to push data and check upload status.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Location&lt;/code&gt; header will be used to communicate the upload location after
each request. While it won&amp;rsquo;t change in the this specification, clients should
use the most recent value returned by the API.&lt;/p&gt;

&lt;h5 id=&#34;starting-an-upload&#34;&gt;Starting An Upload&lt;/h5&gt;

&lt;p&gt;To begin the process, a POST request should be issued in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /v2/&amp;lt;name&amp;gt;/blobs/uploads/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters of this request are the image namespace under which the layer
will be linked. Responses to this request are covered below.&lt;/p&gt;

&lt;h5 id=&#34;existing-layers&#34;&gt;Existing Layers&lt;/h5&gt;

&lt;p&gt;The existence of a layer can be checked via a &lt;code&gt;HEAD&lt;/code&gt; request to the blob store
API. The request should be formatted as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HEAD /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the layer with the tarsum specified in &lt;code&gt;digest&lt;/code&gt; is available, a 200 OK
response will be received, with no actual body content (this is according to
http specification). The response will look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length of blob&amp;gt;
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this response is received, the client can assume that the layer is
already available in the registry under the given name and should take no
further action to upload the layer. Note that the binary digests may differ
for the existing registry layer, but the tarsums will be guaranteed to match.&lt;/p&gt;

&lt;h5 id=&#34;uploading-the-layer&#34;&gt;Uploading the Layer&lt;/h5&gt;

&lt;p&gt;If the POST request is successful, a &lt;code&gt;202 Accepted&lt;/code&gt; response will be returned
with the upload URL in the &lt;code&gt;Location&lt;/code&gt; header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: bytes=0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of the upload process can be carried out with the returned url,
called the &amp;ldquo;Upload URL&amp;rdquo; from the &lt;code&gt;Location&lt;/code&gt; header. All responses to the
upload url, whether sending data or getting status, will be in this format.
Though the URI format (&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;) for the &lt;code&gt;Location&lt;/code&gt;
header is specified, clients should treat it as an opaque url and should never
try to assemble the it. While the &lt;code&gt;uuid&lt;/code&gt; parameter may be an actual UUID, this
proposal imposes no constraints on the format and clients should never impose
any.&lt;/p&gt;

&lt;p&gt;If clients need to correlate local upload state with remote upload state, the
contents of the &lt;code&gt;Docker-Upload-UUID&lt;/code&gt; header should be used. Such an id can be
used to key the last used location header when implementing resumable uploads.&lt;/p&gt;

&lt;h5 id=&#34;upload-progress&#34;&gt;Upload Progress&lt;/h5&gt;

&lt;p&gt;The progress and chunk coordination of the upload process will be coordinated
through the &lt;code&gt;Range&lt;/code&gt; header. While this is a non-standard use of the &lt;code&gt;Range&lt;/code&gt;
header, there are examples of &lt;a href=&#34;https://developers.google.com/youtube/v3/guides/using_resumable_upload_protocol&#34;&gt;similar approaches&lt;/a&gt; in APIs with heavy use.
For an upload that just started, for an example with a 1000 byte layer file,
the &lt;code&gt;Range&lt;/code&gt; header would be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Range: bytes=0-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the status of an upload, issue a GET request to the upload URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response will be similar to the above, except will return 204 status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: bytes=0-&amp;lt;offset&amp;gt;
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the HTTP &lt;code&gt;Range&lt;/code&gt; header byte ranges are inclusive and that will be
honored, even in non-standard use cases.&lt;/p&gt;

&lt;h5 id=&#34;monolithic-upload&#34;&gt;Monolithic Upload&lt;/h5&gt;

&lt;p&gt;A monolithic upload is simply a chunked upload with a single chunk and may be
favored by clients that would like to avoided the complexity of chunking. To
carry out a &amp;ldquo;monolithic&amp;rdquo; upload, one can simply put the entire content blob to
the provided URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;?digest=&amp;lt;tarsum&amp;gt;[&amp;amp;digest=sha256:&amp;lt;hex digest&amp;gt;]
Content-Length: &amp;lt;size of layer&amp;gt;
Content-Type: application/octet-stream

&amp;lt;Layer Binary Data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;digest&amp;rdquo; parameter must be included with the PUT request. Please see the
&lt;em&gt;Completed Upload&lt;/em&gt; section for details on the parameters and expected
responses.&lt;/p&gt;

&lt;p&gt;Additionally, the upload can be completed with a single &lt;code&gt;POST&lt;/code&gt; request to
the uploads endpoint, including the &amp;ldquo;size&amp;rdquo; and &amp;ldquo;digest&amp;rdquo; parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /v2/&amp;lt;name&amp;gt;/blobs/uploads/?digest=&amp;lt;tarsum&amp;gt;[&amp;amp;digest=sha256:&amp;lt;hex digest&amp;gt;]
Content-Length: &amp;lt;size of layer&amp;gt;
Content-Type: application/octet-stream
  
&amp;lt;Layer Binary Data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the registry service, this should allocate a download, accept and verify
the data and return the same  response as the final chunk of an upload. If the
POST request fails collecting the data in any way, the registry should attempt
to return an error response to the client with the &lt;code&gt;Location&lt;/code&gt; header providing
a place to continue the download.&lt;/p&gt;

&lt;p&gt;The single &lt;code&gt;POST&lt;/code&gt; method is provided for convenience and most clients should
implement &lt;code&gt;POST&lt;/code&gt; + &lt;code&gt;PUT&lt;/code&gt; to support reliable resume of uploads.&lt;/p&gt;

&lt;h5 id=&#34;chunked-upload&#34;&gt;Chunked Upload&lt;/h5&gt;

&lt;p&gt;To carry out an upload of a chunk, the client can specify a range header and
only include that part of the layer file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATCH /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Content-Length: &amp;lt;size of chunk&amp;gt;
Content-Range: &amp;lt;start of range&amp;gt;-&amp;lt;end of range&amp;gt;
Content-Type: application/octet-stream

&amp;lt;Layer Chunk Binary Data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is no enforcement on layer chunk splits other than that the server must
receive them in order. The server may enforce a minimum chunk size. If the
server cannot accept the chunk, a &lt;code&gt;416 Requested Range Not Satisfiable&lt;/code&gt;
response will be returned and will include a &lt;code&gt;Range&lt;/code&gt; header indicating the
current status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;416 Requested Range Not Satisfiable
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: 0-&amp;lt;last valid range&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this response is received, the client should resume from the &amp;ldquo;last valid
range&amp;rdquo; and upload the subsequent chunk. A 416 will be returned under the
following conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Invalid Content-Range header format&lt;/li&gt;
&lt;li&gt;Out of order chunk: the range of the next chunk must start immediately after
the &amp;ldquo;last valid range&amp;rdquo; from the previous response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a chunk is accepted as part of the upload, a &lt;code&gt;202 Accepted&lt;/code&gt; response will
be returned, including a &lt;code&gt;Range&lt;/code&gt; header with the current upload status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: bytes=0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;completed-upload&#34;&gt;Completed Upload&lt;/h5&gt;

&lt;p&gt;For an upload to be considered complete, the client must submit a &lt;code&gt;PUT&lt;/code&gt;
request on the upload endpoint with a digest parameter. If it is not provided,
the upload will not be considered complete. The format for the final chunk
will be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/blob/uploads/&amp;lt;uuid&amp;gt;?digest=&amp;lt;tarsum&amp;gt;[&amp;amp;digest=sha256:&amp;lt;hex digest&amp;gt;]
Content-Length: &amp;lt;size of chunk&amp;gt;
Content-Range: &amp;lt;start of range&amp;gt;-&amp;lt;end of range&amp;gt;
Content-Type: application/octet-stream

&amp;lt;Last Layer Chunk Binary Data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optionally, if all chunks have already been uploaded, a &lt;code&gt;PUT&lt;/code&gt; request with a
&lt;code&gt;digest&lt;/code&gt; parameter and zero-length body may be sent to complete and validated
the upload. Multiple &amp;ldquo;digest&amp;rdquo; parameters may be provided with different
digests. The server may verify none or all of them but &lt;em&gt;must&lt;/em&gt; notify the
client if the content is rejected.&lt;/p&gt;

&lt;p&gt;When the last chunk is received and the layer has been validated, the client
will receive a &lt;code&gt;201 Created&lt;/code&gt; response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;201 Created
Location: /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;tarsum&amp;gt;
Content-Length: 0
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Location&lt;/code&gt; header will contain the registry URL to access the accepted
layer file. The &lt;code&gt;Docker-Content-Digest&lt;/code&gt; header returns the canonical digest of
the uploaded blob which may differ from the provided digest. Most clients may
ignore the value but if it is used, the client should verify the value against
the uploaded blob data.&lt;/p&gt;

&lt;h6 id=&#34;digest-parameter&#34;&gt;Digest Parameter&lt;/h6&gt;

&lt;p&gt;The &amp;ldquo;digest&amp;rdquo; parameter is designed as an opaque parameter to support
verification of a successful transfer. The initial version of the registry API
will support a tarsum digest, in the standard tarsum format. For example, a
HTTP URI parameter might be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tarsum.v1+sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given this parameter, the registry will verify that the provided content does
result in this tarsum. Optionally, the registry can support other other digest
parameters for non-tarfile content stored as a layer. A regular hash digest
might be specified as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Such a parameter would be used to verify that the binary content (as opposed
to the tar content) would be verified at the end of the upload process.&lt;/p&gt;

&lt;p&gt;For the initial version, registry servers are only required to support the
tarsum format.&lt;/p&gt;

&lt;h5 id=&#34;canceling-an-upload&#34;&gt;Canceling an Upload&lt;/h5&gt;

&lt;p&gt;An upload can be cancelled by issuing a DELETE request to the upload endpoint.
The format will be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this request is issued, the upload uuid will no longer be valid and the
registry server will dump all intermediate data. While uploads will time out
if not completed, clients should issue this request if they encounter a fatal
error but still have the ability to issue an http request.&lt;/p&gt;

&lt;h5 id=&#34;errors-1&#34;&gt;Errors&lt;/h5&gt;

&lt;p&gt;If an 502, 503 or 504 error is received, the client should assume that the
download can proceed due to a temporary condition, honoring the appropriate
retry mechanism. Other 5xx errors should be treated as terminal.&lt;/p&gt;

&lt;p&gt;If there is a problem with the upload, a 4xx error will be returned indicating
the problem. After receiving a 4xx response (except 416, as called out above),
the upload will be considered failed and the client should take appropriate
action.&lt;/p&gt;

&lt;p&gt;Note that the upload url will not be available forever. If the upload uuid is
unknown to the registry, a &lt;code&gt;404 Not Found&lt;/code&gt; response will be returned and the
client must restart the upload process.&lt;/p&gt;

&lt;h4 id=&#34;pushing-an-image-manifest&#34;&gt;Pushing an Image Manifest&lt;/h4&gt;

&lt;p&gt;Once all of the layers for an image are uploaded, the client can upload the
image manifest. An image can be pushed using the following request format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;

{
   &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
   &amp;quot;tag&amp;quot;: &amp;lt;tag&amp;gt;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;lt;tarsum&amp;gt;
      },
      ...
    ]
   ],
   &amp;quot;history&amp;quot;: &amp;lt;v1 images&amp;gt;,
   &amp;quot;signature&amp;quot;: &amp;lt;JWS&amp;gt;,
   ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; fields of the response body must match those specified in
the URL. The &lt;code&gt;reference&lt;/code&gt; field may be a &amp;ldquo;tag&amp;rdquo; or a &amp;ldquo;digest&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If there is a problem with pushing the manifest, a relevant 4xx response will
be returned with a JSON error message. Please see the _PUT Manifest section
for details on possible error codes that may be returned.&lt;/p&gt;

&lt;p&gt;If one or more layers are unknown to the registry, &lt;code&gt;BLOB_UNKNOWN&lt;/code&gt; errors are
returned. The &lt;code&gt;detail&lt;/code&gt; field of the error response will have a &lt;code&gt;digest&lt;/code&gt; field
identifying the missing blob, which will be a tarsum. An error is returned for
each unknown blob. The response format is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;errors:&amp;quot; [{
            &amp;quot;code&amp;quot;: &amp;quot;BLOB_UNKNOWN&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;blob unknown to registry&amp;quot;,
            &amp;quot;detail&amp;quot;: {
                &amp;quot;digest&amp;quot;: &amp;lt;tarsum&amp;gt;
            }
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;listing-image-tags&#34;&gt;Listing Image Tags&lt;/h4&gt;

&lt;p&gt;It may be necessary to list all of the tags under a given repository. The tags
for an image repository can be retrieved with the following request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/tags/list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response will be in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Type: application/json

{
    &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
    &amp;quot;tags&amp;quot;: [
        &amp;lt;tag&amp;gt;,
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For repositories with a large number of tags, this response may be quite
large, so care should be taken by the client when parsing the response to
reduce copying.&lt;/p&gt;

&lt;h3 id=&#34;deleting-an-image&#34;&gt;Deleting an Image&lt;/h3&gt;

&lt;p&gt;An image may be deleted from the registry via its &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt;. A
delete may be issued with the following request format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For deletes, &lt;code&gt;reference&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be a digest or the delete will fail. If the
image exists and has been successfully deleted, the following response will be
issued:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Content-Length: None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the image had already been deleted or did not exist, a &lt;code&gt;404 Not Found&lt;/code&gt;
response will be issued instead.&lt;/p&gt;

&lt;h2 id=&#34;detail&#34;&gt;Detail&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This section is still under construction. For the purposes of
implementation, if any details below differ from the described request flows
above, the section below should be corrected. When they match, this note
should be removed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The behavior of the endpoints are covered in detail in this section, organized
by route and entity. All aspects of the request and responses are covered,
including headers, parameters and body formats. Examples of requests and their
corresponding responses, with success and failure, are enumerated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The sections on endpoint detail are arranged with an example
request, a description of the request, followed by information about that
request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A list of methods and URIs are covered in the table below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Path&lt;/th&gt;
&lt;th&gt;Entity&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Base&lt;/td&gt;
&lt;td&gt;Check that the endpoint implements Docker Registry API V2.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/tags/list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tags&lt;/td&gt;
&lt;td&gt;Fetch the tags under the repository identified by &lt;code&gt;name&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Manifest&lt;/td&gt;
&lt;td&gt;Fetch the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; where &lt;code&gt;reference&lt;/code&gt; can be a tag or digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Manifest&lt;/td&gt;
&lt;td&gt;Put the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; where &lt;code&gt;reference&lt;/code&gt; can be a tag or digest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Manifest&lt;/td&gt;
&lt;td&gt;Delete the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt;. Note that a manifest can &lt;em&gt;only&lt;/em&gt; be deleted by &lt;code&gt;digest&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob&lt;/td&gt;
&lt;td&gt;Retrieve the blob from the registry identified by &lt;code&gt;digest&lt;/code&gt;. A &lt;code&gt;HEAD&lt;/code&gt; request can also be issued to this endpoint to obtain resource information without receiving all data.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Intiate Blob Upload&lt;/td&gt;
&lt;td&gt;Initiate a resumable blob upload. If successful, an upload location will be provided to complete the upload. Optionally, if the &lt;code&gt;digest&lt;/code&gt; parameter is present, the request body will be used to complete the upload in a single request.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob Upload&lt;/td&gt;
&lt;td&gt;Retrieve status of upload identified by &lt;code&gt;uuid&lt;/code&gt;. The primary purpose of this endpoint is to resolve the current status of a resumable upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PATCH&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob Upload&lt;/td&gt;
&lt;td&gt;Upload a chunk of data for the specified upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob Upload&lt;/td&gt;
&lt;td&gt;Complete the upload specified by &lt;code&gt;uuid&lt;/code&gt;, optionally appending the body as the final chunk.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blob Upload&lt;/td&gt;
&lt;td&gt;Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished uploads will eventually timeout.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The detail for each endpoint is covered in the following sections.&lt;/p&gt;

&lt;h3 id=&#34;errors-2&#34;&gt;Errors&lt;/h3&gt;

&lt;p&gt;The error codes encountered via the API are enumerated in the following table:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
 &lt;code&gt;BLOB_UNKNOWN&lt;/code&gt; | blob unknown to registry | This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload.
 &lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt; | blob upload invalid | The blob upload encountered an error and can no longer proceed.
 &lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt; | blob upload unknown to registry | If a blob upload has been cancelled or was never started, this error code may be returned.
 &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest.
 &lt;code&gt;MANIFEST_BLOB_UNKNOWN&lt;/code&gt; | blob unknown to registry | This error may be returned when a manifest blob is  unknown to the registry.
 &lt;code&gt;MANIFEST_INVALID&lt;/code&gt; | manifest invalid | During upload, manifests undergo several checks ensuring validity. If those checks fail, this error may be returned, unless a more specific error is included. The detail will contain information the failed validation.
 &lt;code&gt;MANIFEST_UNKNOWN&lt;/code&gt; | manifest unknown | This error is returned when the manifest, identified by name and tag is unknown to the repository.
 &lt;code&gt;MANIFEST_UNVERIFIED&lt;/code&gt; | manifest failed signature verification | During manifest upload, if the manifest fails signature verification, this error will be returned.
 &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation.
 &lt;code&gt;NAME_UNKNOWN&lt;/code&gt; | repository name not known to registry | This is returned if the name used during an operation is unknown to the registry.
 &lt;code&gt;SIZE_INVALID&lt;/code&gt; | provided length did not match content length | When a layer is uploaded, the provided size will be checked against the uploaded content. If they do not match, this error will be returned.
 &lt;code&gt;TAG_INVALID&lt;/code&gt; | manifest tag did not match URI | During a manifest upload, if the tag in the manifest does not match the uri tag, this error will be returned.
 &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status.
 &lt;code&gt;UNSUPPORTED&lt;/code&gt; | The operation is unsupported. | The operation was unsupported due to a missing implementation or invalid set of parameters.&lt;/p&gt;

&lt;h3 id=&#34;base&#34;&gt;Base&lt;/h3&gt;

&lt;p&gt;Base V2 API route. Typically, this can be used for lightweight version checks and to validate registry authorization.&lt;/p&gt;

&lt;h4 id=&#34;get-base&#34;&gt;GET Base&lt;/h4&gt;

&lt;p&gt;Check that the endpoint implements Docker Registry API V2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The API implements V2 protocol and is accessible.&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client is not authorized to access the registry.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The registry does not implement the V2 API.&lt;/p&gt;

&lt;h3 id=&#34;tags&#34;&gt;Tags&lt;/h3&gt;

&lt;p&gt;Retrieve information about tags.&lt;/p&gt;

&lt;h4 id=&#34;get-tags&#34;&gt;GET Tags&lt;/h4&gt;

&lt;p&gt;Fetch the tags under the repository identified by &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/tags/list
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok-1&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
    &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
    &amp;quot;tags&amp;quot;: [
        &amp;lt;tag&amp;gt;,
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A list of tags for the named repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-not-found-1&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository is not known to the registry.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_UNKNOWN&lt;/code&gt; | repository name not known to registry | This is returned if the name used during an operation is unknown to the registry. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-1&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to the repository.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h3 id=&#34;manifest&#34;&gt;Manifest&lt;/h3&gt;

&lt;p&gt;Create, update and retrieve manifests.&lt;/p&gt;

&lt;h4 id=&#34;get-manifest&#34;&gt;GET Manifest&lt;/h4&gt;

&lt;p&gt;Fetch the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; where &lt;code&gt;reference&lt;/code&gt; can be a tag or digest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Tag or digest of the target manifest.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok-2&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Docker-Content-Digest: &amp;lt;digest&amp;gt;
Content-Type: application/json; charset=utf-8

{
   &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
   &amp;quot;tag&amp;quot;: &amp;lt;tag&amp;gt;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;&amp;lt;digest&amp;gt;&amp;quot;
      },
      ...
    ]
   ],
   &amp;quot;history&amp;quot;: &amp;lt;v1 images&amp;gt;,
   &amp;quot;signature&amp;quot;: &amp;lt;JWS&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The manifest idenfied by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt;. The contents can be used to identify and resolve resources required to run the specified image.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The name or reference was invalid.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;TAG_INVALID&lt;/code&gt; | manifest tag did not match URI | During a manifest upload, if the tag in the manifest does not match the uri tag, this error will be returned. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-2&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to the repository.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found-2&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The named manifest is not known to the registry.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_UNKNOWN&lt;/code&gt; | repository name not known to registry | This is returned if the name used during an operation is unknown to the registry. |
| &lt;code&gt;MANIFEST_UNKNOWN&lt;/code&gt; | manifest unknown | This error is returned when the manifest, identified by name and tag is unknown to the repository. |&lt;/p&gt;

&lt;h4 id=&#34;put-manifest&#34;&gt;PUT Manifest&lt;/h4&gt;

&lt;p&gt;Put the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; where &lt;code&gt;reference&lt;/code&gt; can be a tag or digest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Type: application/json; charset=utf-8

{
   &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
   &amp;quot;tag&amp;quot;: &amp;lt;tag&amp;gt;,
   &amp;quot;fsLayers&amp;quot;: [
      {
         &amp;quot;blobSum&amp;quot;: &amp;quot;&amp;lt;digest&amp;gt;&amp;quot;
      },
      ...
    ]
   ],
   &amp;quot;history&amp;quot;: &amp;lt;v1 images&amp;gt;,
   &amp;quot;signature&amp;quot;: &amp;lt;JWS&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Tag or digest of the target manifest.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-accepted&#34;&gt;On Success: Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Location: &amp;lt;url&amp;gt;
Content-Length: 0
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The manifest has been accepted by the registry and is stored under the specified &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The canonical location url of the uploaded manifest.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-invalid-manifest&#34;&gt;On Failure: Invalid Manifest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The received manifest was invalid in some way, as described by the error codes. The client should resolve the issue and retry the request.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;TAG_INVALID&lt;/code&gt; | manifest tag did not match URI | During a manifest upload, if the tag in the manifest does not match the uri tag, this error will be returned. |
| &lt;code&gt;MANIFEST_INVALID&lt;/code&gt; | manifest invalid | During upload, manifests undergo several checks ensuring validity. If those checks fail, this error may be returned, unless a more specific error is included. The detail will contain information the failed validation. |
| &lt;code&gt;MANIFEST_UNVERIFIED&lt;/code&gt; | manifest failed signature verification | During manifest upload, if the manifest fails signature verification, this error will be returned. |
| &lt;code&gt;BLOB_UNKNOWN&lt;/code&gt; | blob unknown to registry | This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-3&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have permission to push to the repository.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-missing-layer-s&#34;&gt;On Failure: Missing Layer(s)&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
    &amp;quot;errors:&amp;quot; [{
            &amp;quot;code&amp;quot;: &amp;quot;BLOB_UNKNOWN&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;blob unknown to registry&amp;quot;,
            &amp;quot;detail&amp;quot;: {
                &amp;quot;digest&amp;quot;: &amp;quot;&amp;lt;digest&amp;gt;&amp;quot;
            }
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One or more layers may be missing during a manifest upload. If so, the missing layers will be enumerated in the error response.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;BLOB_UNKNOWN&lt;/code&gt; | blob unknown to registry | This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-4&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h4 id=&#34;delete-manifest&#34;&gt;DELETE Manifest&lt;/h4&gt;

&lt;p&gt;Delete the manifest identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt;. Note that a manifest can &lt;em&gt;only&lt;/em&gt; be deleted by &lt;code&gt;digest&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Tag or digest of the target manifest.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-accepted-1&#34;&gt;On Success: Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;on-failure-invalid-name-or-reference&#34;&gt;On Failure: Invalid Name or Reference&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The specified &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;reference&lt;/code&gt; were invalid and the delete was unable to proceed.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;TAG_INVALID&lt;/code&gt; | manifest tag did not match URI | During a manifest upload, if the tag in the manifest does not match the uri tag, this error will be returned. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-5&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unknown-manifest&#34;&gt;On Failure: Unknown Manifest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The specified &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;reference&lt;/code&gt; are unknown to the registry and the delete was unable to proceed. Clients can assume the manifest was already deleted if this response is returned.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_UNKNOWN&lt;/code&gt; | repository name not known to registry | This is returned if the name used during an operation is unknown to the registry. |
| &lt;code&gt;MANIFEST_UNKNOWN&lt;/code&gt; | manifest unknown | This error is returned when the manifest, identified by name and tag is unknown to the repository. |&lt;/p&gt;

&lt;h3 id=&#34;blob&#34;&gt;Blob&lt;/h3&gt;

&lt;p&gt;Fetch the blob identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt;. Used to fetch layers by digest.&lt;/p&gt;

&lt;h4 id=&#34;get-blob&#34;&gt;GET Blob&lt;/h4&gt;

&lt;p&gt;Retrieve the blob from the registry identified by &lt;code&gt;digest&lt;/code&gt;. A &lt;code&gt;HEAD&lt;/code&gt; request can also be issued to this endpoint to obtain resource information without receiving all data.&lt;/p&gt;

&lt;h5 id=&#34;fetch-blob&#34;&gt;Fetch Blob&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Digest of desired blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-ok-3&#34;&gt;On Success: OK&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;200 OK
Content-Length: &amp;lt;length&amp;gt;
Docker-Content-Digest: &amp;lt;digest&amp;gt;
Content-Type: application/octet-stream

&amp;lt;blob binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob identified by &lt;code&gt;digest&lt;/code&gt; is available. The blob content will be present in the body of the request.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The length of the requested blob content.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-temporary-redirect&#34;&gt;On Success: Temporary Redirect&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;307 Temporary Redirect
Location: &amp;lt;blob location&amp;gt;
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob identified by &lt;code&gt;digest&lt;/code&gt; is available at the provided location.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location where the layer should be accessible.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-1&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was a problem with the request that needs to be addressed by the client, such as an invalid &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-6&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found-3&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob, identified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;digest&lt;/code&gt;, is unknown to the registry.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_UNKNOWN&lt;/code&gt; | repository name not known to registry | This is returned if the name used during an operation is unknown to the registry. |
| &lt;code&gt;BLOB_UNKNOWN&lt;/code&gt; | blob unknown to registry | This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload. |&lt;/p&gt;

&lt;h5 id=&#34;fetch-blob-part&#34;&gt;Fetch Blob Part&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Range: bytes=&amp;lt;start&amp;gt;-&amp;lt;end&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This endpoint may also support RFC7233 compliant range requests. Support can be detected by issuing a HEAD request. If the header &lt;code&gt;Accept-Range: bytes&lt;/code&gt; is returned, range requests can be used to fetch partial content.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;HTTP Range header specifying blob chunk.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Digest of desired blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-partial-content&#34;&gt;On Success: Partial Content&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;206 Partial Content
Content-Length: &amp;lt;length&amp;gt;
Content-Range: bytes &amp;lt;start&amp;gt;-&amp;lt;end&amp;gt;/&amp;lt;size&amp;gt;
Content-Type: application/octet-stream

&amp;lt;blob binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob identified by &lt;code&gt;digest&lt;/code&gt; is available. The specified chunk of blob content will be present in the body of the request.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The length of the requested blob chunk.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Content range of blob chunk.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-2&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was a problem with the request that needs to be addressed by the client, such as an invalid &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-7&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found-4&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_UNKNOWN&lt;/code&gt; | repository name not known to registry | This is returned if the name used during an operation is unknown to the registry. |
| &lt;code&gt;BLOB_UNKNOWN&lt;/code&gt; | blob unknown to registry | This error may be returned when a blob is unknown to the registry in a specified repository. This can be returned with a standard get or if a manifest references an unknown layer during upload. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-requested-range-not-satisfiable&#34;&gt;On Failure: Requested Range Not Satisfiable&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;416 Requested Range Not Satisfiable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The range specification cannot be satisfied for the requested content. This can happen when the range is not formatted correctly or if the range is outside of the valid size of the content.&lt;/p&gt;

&lt;h3 id=&#34;intiate-blob-upload&#34;&gt;Intiate Blob Upload&lt;/h3&gt;

&lt;p&gt;Initiate a blob upload. This endpoint can be used to create resumable uploads or monolithic uploads.&lt;/p&gt;

&lt;h4 id=&#34;post-intiate-blob-upload&#34;&gt;POST Intiate Blob Upload&lt;/h4&gt;

&lt;p&gt;Initiate a resumable blob upload. If successful, an upload location will be provided to complete the upload. Optionally, if the &lt;code&gt;digest&lt;/code&gt; parameter is present, the request body will be used to complete the upload in a single request.&lt;/p&gt;

&lt;h5 id=&#34;initiate-monolithic-blob-upload&#34;&gt;Initiate Monolithic Blob Upload&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;POST /v2/&amp;lt;name&amp;gt;/blobs/uploads/?digest=&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Length: &amp;lt;length of blob&amp;gt;
Content-Type: application/octect-stream

&amp;lt;binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload a blob identified by the &lt;code&gt;digest&lt;/code&gt; parameter in single request. This upload will not be resumable unless a recoverable error is returned.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;Digest of uploaded blob. If present, the upload will be completed, in a single request, with contents of the request body as the resulting blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-created&#34;&gt;On Success: Created&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;201 Created
Location: &amp;lt;blob location&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The blob has been created in the registry and is available at the provided location.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-invalid-name-or-digest&#34;&gt;On Failure: Invalid Name or Digest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest. |
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-8&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to push to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h5 id=&#34;initiate-resumable-blob-upload&#34;&gt;Initiate Resumable Blob Upload&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;POST /v2/&amp;lt;name&amp;gt;/blobs/uploads/
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initiate a resumable blob upload with an empty request body.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-accepted-2&#34;&gt;On Success: Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;202 Accepted
Content-Length: 0
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: 0-0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload has been created. The &lt;code&gt;Location&lt;/code&gt; header must be used to complete the upload. The response should be identical to a &lt;code&gt;GET&lt;/code&gt; request on the contents of the returned &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location of the created upload. Clients should use the contents verbatim to complete the upload, adding parameters where required.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range header indicating the progress of the upload. When starting an upload, it will return an empty range, since no content has been received.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-invalid-name-or-digest-1&#34;&gt;On Failure: Invalid Name or Digest&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest. |
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-9&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to push to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h3 id=&#34;blob-upload&#34;&gt;Blob Upload&lt;/h3&gt;

&lt;p&gt;Interact with blob uploads. Clients should never assemble URLs for this endpoint and should only take it through the &lt;code&gt;Location&lt;/code&gt; header on related API requests. The &lt;code&gt;Location&lt;/code&gt; header and its parameters should be preserved by clients, using the latest value returned via upload related API calls.&lt;/p&gt;

&lt;h4 id=&#34;get-blob-upload&#34;&gt;GET Blob Upload&lt;/h4&gt;

&lt;p&gt;Retrieve status of upload identified by &lt;code&gt;uuid&lt;/code&gt;. The primary purpose of this endpoint is to resolve the current status of a resumable upload.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Retrieve the progress of the current upload, as reported by the &lt;code&gt;Range&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-upload-progress&#34;&gt;On Success: Upload Progress&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Range: 0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is known and in progress. The last received offset is available in the &lt;code&gt;Range&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range indicating the current progress of the upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-3&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was an error processing the upload and it must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest. |
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt; | blob upload invalid | The blob upload encountered an error and can no longer proceed. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-10&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found-5&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The upload must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt; | blob upload unknown to registry | If a blob upload has been cancelled or was never started, this error code may be returned. |&lt;/p&gt;

&lt;h4 id=&#34;patch-blob-upload&#34;&gt;PATCH Blob Upload&lt;/h4&gt;

&lt;p&gt;Upload a chunk of data for the specified upload.&lt;/p&gt;

&lt;h5 id=&#34;stream-upload&#34;&gt;Stream upload&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;PATCH /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Type: application/octet-stream

&amp;lt;binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload a stream of data to upload without completing the upload.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-data-accepted&#34;&gt;On Success: Data Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: 0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stream of data has been accepted and the current progress is available in the range header. The updated upload location is available in the &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location of the upload. Clients should assume this changes after each request. Clients should use the contents verbatim to complete the upload, adding parameters where required.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range indicating the current progress of the upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-4&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was an error processing the upload and it must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest. |
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt; | blob upload invalid | The blob upload encountered an error and can no longer proceed. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-11&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to push to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found-6&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The upload must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt; | blob upload unknown to registry | If a blob upload has been cancelled or was never started, this error code may be returned. |&lt;/p&gt;

&lt;h5 id=&#34;chunked-upload-1&#34;&gt;Chunked upload&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;PATCH /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Range: &amp;lt;start of range&amp;gt;-&amp;lt;end of range, inclusive&amp;gt;
Content-Length: &amp;lt;length of chunk&amp;gt;
Content-Type: application/octet-stream

&amp;lt;binary chunk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upload a chunk of data to specified upload without completing the upload. The data will be uploaded to the specified Content Range.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Range of bytes identifying the desired block of content represented by the body. Start must the end offset retrieved via status check plus one. Note that this is a non-standard use of the &lt;code&gt;Content-Range&lt;/code&gt; header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Length of the chunk being uploaded, corresponding the length of the request body.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-chunk-accepted&#34;&gt;On Success: Chunk Accepted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Location: /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Range: 0-&amp;lt;offset&amp;gt;
Content-Length: 0
Docker-Upload-UUID: &amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The chunk of data has been accepted and the current progress is available in the range header. The updated upload location is available in the &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location of the upload. Clients should assume this changes after each request. Clients should use the contents verbatim to complete the upload, adding parameters where required.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range indicating the current progress of the upload.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Upload-UUID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifies the docker upload uuid for the current request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-5&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was an error processing the upload and it must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest. |
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt; | blob upload invalid | The blob upload encountered an error and can no longer proceed. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-12&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to push to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found-7&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The upload must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt; | blob upload unknown to registry | If a blob upload has been cancelled or was never started, this error code may be returned. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-requested-range-not-satisfiable-1&#34;&gt;On Failure: Requested Range Not Satisfiable&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;416 Requested Range Not Satisfiable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Content-Range&lt;/code&gt; specification cannot be accepted, either because it does not overlap with the current progress or it is invalid.&lt;/p&gt;

&lt;h4 id=&#34;put-blob-upload&#34;&gt;PUT Blob Upload&lt;/h4&gt;

&lt;p&gt;Complete the upload specified by &lt;code&gt;uuid&lt;/code&gt;, optionally appending the body as the final chunk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;?digest=&amp;lt;digest&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Length: &amp;lt;length of data&amp;gt;
Content-Type: application/octet-stream

&amp;lt;binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Complete the upload, providing all the data in the body, if necessary. A request without a body will just complete the upload with previously uploaded content.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Length of the data being uploaded, corresponding to the length of the request body. May be zero if no data is provided.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;query&lt;/td&gt;
&lt;td&gt;Digest of uploaded blob.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-upload-complete&#34;&gt;On Success: Upload Complete&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Location: &amp;lt;blob location&amp;gt;
Content-Range: &amp;lt;start of range&amp;gt;-&amp;lt;end of range, inclusive&amp;gt;
Content-Length: 0
Docker-Content-Digest: &amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload has been completed and accepted by the registry. The canonical location will be available in the &lt;code&gt;Location&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The canonical location of the blob for retrieval&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Range of bytes identifying the desired block of content represented by the body. Start must match the end of offset retrieved via status check. Note that this is a non-standard use of the &lt;code&gt;Content-Range&lt;/code&gt; header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Docker-Content-Digest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digest of the targeted content for the request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-6&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was an error processing the upload and it must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;DIGEST_INVALID&lt;/code&gt; | provided digest did not match uploaded content | When a blob is uploaded, the registry will check that the content matches the digest provided by the client. The error may include a detail structure with the key &amp;ldquo;digest&amp;rdquo;, including the invalid digest string. This error may also be returned when a manifest includes an invalid layer digest. |
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt; | blob upload invalid | The blob upload encountered an error and can no longer proceed. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-13&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to push to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found-8&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The upload must be restarted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt; | blob upload unknown to registry | If a blob upload has been cancelled or was never started, this error code may be returned. |&lt;/p&gt;

&lt;h4 id=&#34;delete-blob-upload&#34;&gt;DELETE Blob Upload&lt;/h4&gt;

&lt;p&gt;Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished uploads will eventually timeout.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE /v2/&amp;lt;name&amp;gt;/blobs/uploads/&amp;lt;uuid&amp;gt;
Host: &amp;lt;registry host&amp;gt;
Authorization: &amp;lt;scheme&amp;gt; &amp;lt;token&amp;gt;
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cancel the upload specified by &lt;code&gt;uuid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following parameters should be specified on the request:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Kind&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;Standard HTTP Host Header. Should be set to the registry host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authorization header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Name of the target repository.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;A uuid identifying the upload. This field can accept characters that match &lt;code&gt;[a-zA-Z0-9-_.=]+&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-success-upload-deleted&#34;&gt;On Success: Upload Deleted&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;204 No Content
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload has been successfully deleted.&lt;/p&gt;

&lt;p&gt;The following headers will be returned with the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Content-Length&lt;/code&gt; header must be zero and the body must be empty.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;on-failure-bad-request-7&#34;&gt;On Failure: Bad Request&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;400 Bad Request
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An error was encountered processing the delete. The client may ignore this error.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;NAME_INVALID&lt;/code&gt; | invalid repository name | Invalid repository name encountered either during manifest validation or any API operation. |
| &lt;code&gt;BLOB_UPLOAD_INVALID&lt;/code&gt; | blob upload invalid | The blob upload encountered an error and can no longer proceed. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-unauthorized-14&#34;&gt;On Failure: Unauthorized&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;401 Unauthorized
WWW-Authenticate: &amp;lt;scheme&amp;gt; realm=&amp;quot;&amp;lt;realm&amp;gt;&amp;quot;, ...&amp;quot;
Content-Length: &amp;lt;length&amp;gt;
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;quot;UNAUTHORIZED&amp;quot;,
            &amp;quot;message&amp;quot;: &amp;quot;access to the requested resource is not authorized&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client does not have access to the repository.&lt;/p&gt;

&lt;p&gt;The following headers will be returned on the response:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An RFC7235 compliant authentication challenge header.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length of the JSON error response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;UNAUTHORIZED&lt;/code&gt; | access to the requested resource is not authorized | The access controller denied access for the operation on a resource. Often this will be accompanied by a 401 Unauthorized response status. |&lt;/p&gt;

&lt;h6 id=&#34;on-failure-not-found-9&#34;&gt;On Failure: Not Found&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;404 Not Found
Content-Type: application/json; charset=utf-8

{
	&amp;quot;errors:&amp;quot; [
	    {
            &amp;quot;code&amp;quot;: &amp;lt;error code&amp;gt;,
            &amp;quot;message&amp;quot;: &amp;quot;&amp;lt;error message&amp;gt;&amp;quot;,
            &amp;quot;detail&amp;quot;: ...
        },
        ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload is unknown to the registry. The client may ignore this error and assume the upload has been deleted.&lt;/p&gt;

&lt;p&gt;The error codes that may be included in the response body are enumerated below:&lt;/p&gt;

&lt;p&gt;|Code|Message|Description|
&amp;mdash;&amp;mdash;-|&amp;mdash;-|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
| &lt;code&gt;BLOB_UPLOAD_UNKNOWN&lt;/code&gt; | blob upload unknown to registry | If a blob upload has been cancelled or was never started, this error code may be returned. |&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Registry Storage Driver</title>
      <link>http://localhost/registry/storagedrivers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/storagedrivers/</guid>
      <description>

&lt;h1 id=&#34;docker-registry-storage-driver&#34;&gt;Docker Registry Storage Driver&lt;/h1&gt;

&lt;p&gt;This document describes the registry storage driver model, implementation, and explains how to contribute new storage drivers.&lt;/p&gt;

&lt;h2 id=&#34;provided-drivers&#34;&gt;Provided Drivers&lt;/h2&gt;

&lt;p&gt;This storage driver package comes bundled with several drivers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost/registry/storage-drivers/inmemory&#34;&gt;inmemory&lt;/a&gt;: A temporary storage driver using a local inmemory map. This exists solely for reference and testing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost/registry/storage-drivers/filesystem&#34;&gt;filesystem&lt;/a&gt;: A local storage driver configured to use a directory tree in the local filesystem.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost/registry/storage-drivers/s3&#34;&gt;s3&lt;/a&gt;: A driver storing objects in an Amazon Simple Storage Solution (S3) bucket.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost/registry/storage-drivers/azure&#34;&gt;azure&lt;/a&gt;: A driver storing objects in &lt;a href=&#34;http://azure.microsoft.com/en-us/services/storage/&#34;&gt;Microsoft Azure Blob Storage&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost/registry/storage-drivers/rados&#34;&gt;rados&lt;/a&gt;: A driver storing objects in a &lt;a href=&#34;http://ceph.com/docs/master/rados/&#34;&gt;Ceph Object Storage&lt;/a&gt; pool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;storage-driver-api&#34;&gt;Storage Driver API&lt;/h2&gt;

&lt;p&gt;The storage driver API is designed to model a filesystem-like key/value storage in a manner abstract enough to support a range of drivers from the local filesystem to Amazon S3 or other distributed object storage systems.&lt;/p&gt;

&lt;p&gt;Storage drivers are required to implement the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface provided in &lt;code&gt;storagedriver.go&lt;/code&gt;, which includes methods for reading, writing, and deleting content, as well as listing child objects of a specified prefix key.&lt;/p&gt;

&lt;p&gt;Storage drivers are intended (but not required) to be written in go, providing compile-time validation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface, although an IPC driver wrapper means that it is not required for drivers to be included in the compiled registry. The &lt;code&gt;storagedriver/ipc&lt;/code&gt; package provides a client/server protocol for running storage drivers provided in external executables as a managed child server process.&lt;/p&gt;

&lt;h2 id=&#34;driver-selection-and-configuration&#34;&gt;Driver Selection and Configuration&lt;/h2&gt;

&lt;p&gt;The preferred method of selecting a storage driver is using the &lt;code&gt;StorageDriverFactory&lt;/code&gt; interface in the &lt;code&gt;storagedriver/factory&lt;/code&gt; package. These factories provide a common interface for constructing storage drivers with a parameters map. The factory model is based off of the &lt;a href=&#34;http://golang.org/pkg/database/sql/#Register&#34;&gt;Register&lt;/a&gt; and &lt;a href=&#34;http://golang.org/pkg/database/sql/#Open&#34;&gt;Open&lt;/a&gt; methods in the builtin &lt;a href=&#34;http://golang.org/pkg/database/sql&#34;&gt;database/sql&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;Storage driver factories may be registered by name using the &lt;code&gt;factory.Register&lt;/code&gt; method, and then later invoked by calling &lt;code&gt;factory.Create&lt;/code&gt; with a driver name and parameters map. If no driver is registered with the given name, this factory will attempt to find an executable storage driver with the executable name &amp;ldquo;registry-storage-&amp;lt;driver name&amp;gt;&amp;rdquo; and return an IPC storage driver wrapper managing the driver subprocess. If no such storage driver can be found, &lt;code&gt;factory.Create&lt;/code&gt; will return an &lt;code&gt;InvalidStorageDriverError&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;driver-contribution&#34;&gt;Driver Contribution&lt;/h2&gt;

&lt;h3 id=&#34;writing-new-storage-drivers&#34;&gt;Writing new storage drivers&lt;/h3&gt;

&lt;p&gt;To create a valid storage driver, one must implement the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface and make sure to expose this driver via the factory system and as a distributable IPC server executable.&lt;/p&gt;

&lt;h4 id=&#34;in-process-drivers&#34;&gt;In-process drivers&lt;/h4&gt;

&lt;p&gt;Storage drivers should call &lt;code&gt;factory.Register&lt;/code&gt; with their driver name in an &lt;code&gt;init&lt;/code&gt; method, allowing callers of &lt;code&gt;factory.New&lt;/code&gt; to construct instances of this driver without requiring modification of imports throughout the codebase.&lt;/p&gt;

&lt;h4 id=&#34;out-of-process-drivers&#34;&gt;Out-of-process drivers&lt;/h4&gt;

&lt;p&gt;As many users will run the registry as a pre-constructed docker container, storage drivers should also be distributable as IPC server executables. Drivers written in go should model the main method provided in &lt;code&gt;registry/storage/driverfilesystem/driver.go&lt;/code&gt;. Parameters to IPC drivers will be provided as a JSON-serialized map in the first argument to the process. These parameters should be validated and then a blocking call to &lt;code&gt;ipc.StorageDriverServer&lt;/code&gt; should be made with a new storage driver.&lt;/p&gt;

&lt;p&gt;Out-of-process drivers must also implement the &lt;code&gt;ipc.IPCStorageDriver&lt;/code&gt; interface, which exposes a &lt;code&gt;Version&lt;/code&gt; check for the storage driver. This is used to validate storage driver api compatibility at driver load-time.&lt;/p&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Storage driver test suites are provided in &lt;code&gt;storagedriver/testsuites/testsuites.go&lt;/code&gt; and may be used for any storage driver written in go. Two methods are provided for registering test suites, &lt;code&gt;RegisterInProcessSuite&lt;/code&gt; and &lt;code&gt;RegisterIPCSuite&lt;/code&gt;, which run the same set of tests for the driver imported or managed over IPC respectively.&lt;/p&gt;

&lt;h2 id=&#34;drivers-written-in-other-languages&#34;&gt;Drivers written in other languages&lt;/h2&gt;

&lt;p&gt;Although storage drivers are strongly recommended to be written in go for consistency, compile-time validation, and support, the IPC framework allows for a level of language-agnosticism. Non-go drivers must implement the storage driver protocol by mimicing StorageDriverServer in &lt;code&gt;storagedriver/ipc/server.go&lt;/code&gt;. As the IPC framework is a layer on top of &lt;a href=&#34;https://github.com/docker/libchan&#34;&gt;docker/libchan&lt;/a&gt;, this currently limits language support to Java via &lt;a href=&#34;https://github.com/ndeloof/jchan&#34;&gt;ndeloof/chan&lt;/a&gt; and Javascript via &lt;a href=&#34;https://github.com/GraftJS/jschan&#34;&gt;GraftJS/jschan&lt;/a&gt;, although contributions to the libchan project are welcome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Registry v2 Authentication</title>
      <link>http://localhost/registry/spec/auth/token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/spec/auth/token/</guid>
      <description>

&lt;h1 id=&#34;docker-registry-v2-authentication-via-central-service&#34;&gt;Docker Registry v2 authentication via central service&lt;/h1&gt;

&lt;p&gt;Today a Docker Registry can run in standalone mode in which there are no
authorization checks. While adding your own HTTP authorization requirements in
a proxy placed between the client and the registry can give you greater access
control, we&amp;rsquo;d like a native authorization mechanism that&amp;rsquo;s public key based
with access control lists managed separately with the ability to have fine
granularity in access control on a by-key, by-user, by-namespace, and
by-repository basis. In v1 this can be configured by specifying an
&lt;code&gt;index_endpoint&lt;/code&gt; in the registry&amp;rsquo;s config. Clients present tokens generated by
the index and tokens are validated on-line by the registry with every request.
This results in a complex authentication and authorization loop that occurs
with every registry operation. Some people are very familiar with this image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.docker.com/static_files/docker_pull_chart.png&#34; alt=&#34;index auth&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The above image outlines the 6-step process in accessing the Official Docker
Registry.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Contact the Docker Hub to know where I should download “samalba/busybox”&lt;/li&gt;
&lt;li&gt;Docker Hub replies:
a. samalba/busybox is on Registry A
b. here are the checksums for samalba/busybox (for all layers)
c. token&lt;/li&gt;
&lt;li&gt;Contact Registry A to receive the layers for samalba/busybox (all of them to
the base image). Registry A is authoritative for “samalba/busybox” but keeps
a copy of all inherited layers and serve them all from the same location.&lt;/li&gt;
&lt;li&gt;Registry contacts Docker Hub to verify if token/user is allowed to download
images.&lt;/li&gt;
&lt;li&gt;Docker Hub returns true/false lettings registry know if it should proceed or
error out.&lt;/li&gt;
&lt;li&gt;Get the payload for all layers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The goal of this document is to outline a way to eliminate steps 4 and 5 from
the above process by using cryptographically signed tokens and no longer
require the client to authenticate each request with a username and password
stored locally in plain text.&lt;/p&gt;

&lt;p&gt;The new registry workflow is more like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1EHZU9uBLmcH0kytDClBv6jv6WR4xZjE8RKEUw1mARJA/pub?w=480&amp;amp;h=360&#34; alt=&#34;v2 registry auth&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Attempt to begin a push/pull operation with the registry.&lt;/li&gt;
&lt;li&gt;If the registry requires authorization it will return a &lt;code&gt;401 Unauthorized&lt;/code&gt;
HTTP response with information on how to authenticate.&lt;/li&gt;
&lt;li&gt;The registry client makes a request to the authorization service for a
signed JSON Web Token.&lt;/li&gt;
&lt;li&gt;The authorization service returns a token.&lt;/li&gt;
&lt;li&gt;The client retries the original request with the token embedded in the
request header.&lt;/li&gt;
&lt;li&gt;The Registry authorizes the client and begins the push/pull session as
usual.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Registry Clients capable of generating key pairs which can be used to
authenticate to an authorization server.&lt;/li&gt;
&lt;li&gt;An authorization server capable of managing user accounts, their public keys,
and access controls to their resources hosted by any given service (such as
repositories in a Docker Registry).&lt;/li&gt;
&lt;li&gt;A Docker Registry capable of trusting the authorization server to sign tokens
which clients can use for authorization and the ability to verify these
tokens for single use or for use during a sufficiently short period of time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;authorization-server-endpoint-descriptions&#34;&gt;Authorization Server Endpoint Descriptions&lt;/h2&gt;

&lt;p&gt;This document borrows heavily from the &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32&#34;&gt;JSON Web Token Draft Spec&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The described server is meant to serve as a user account and key manager and a
centralized access control list for resources hosted by other services which
wish to authenticate and manage authorizations using this services accounts and
their public keys.&lt;/p&gt;

&lt;p&gt;Such a service could be used by the official docker registry to authenticate
clients and verify their authorization to docker image repositories.&lt;/p&gt;

&lt;p&gt;Docker will need to be updated to interact with an authorization server to get
an authorization token.&lt;/p&gt;

&lt;h2 id=&#34;how-to-authenticate&#34;&gt;How to authenticate&lt;/h2&gt;

&lt;p&gt;Today, registry clients first contact the index to initiate a push or pull.
For v2, clients should contact the registry first. If the registry server
requires authentication it will return a &lt;code&gt;401 Unauthorized&lt;/code&gt; response with a
&lt;code&gt;WWW-Authenticate&lt;/code&gt; header detailing how to authenticate to this registry.&lt;/p&gt;

&lt;p&gt;For example, say I (username &lt;code&gt;jlhawn&lt;/code&gt;) am attempting to push an image to the
repository &lt;code&gt;samalba/my-app&lt;/code&gt;. For the registry to authorize this, I either need
&lt;code&gt;push&lt;/code&gt; access to the &lt;code&gt;samalba/my-app&lt;/code&gt; repository or &lt;code&gt;push&lt;/code&gt; access to the whole
&lt;code&gt;samalba&lt;/code&gt; namespace in general. The registry will first return this response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm=&amp;quot;https://auth.docker.com/v2/token/&amp;quot;,service=&amp;quot;registry.docker.com&amp;quot;,scope=&amp;quot;repository:samalba/my-app:push&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This format is documented in &lt;a href=&#34;https://tools.ietf.org/html/rfc6750#section-3&#34;&gt;Section 3 of RFC 6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The client will then know to make a &lt;code&gt;GET&lt;/code&gt; request to the URL
&lt;code&gt;https://auth.docker.com/v2/token/&lt;/code&gt; using the &lt;code&gt;service&lt;/code&gt; and &lt;code&gt;scope&lt;/code&gt; values from
the &lt;code&gt;WWW-Authenticate&lt;/code&gt; header.&lt;/p&gt;

&lt;h2 id=&#34;requesting-a-token&#34;&gt;Requesting a Token&lt;/h2&gt;

&lt;h4 id=&#34;query-parameters&#34;&gt;Query Parameters&lt;/h4&gt;

&lt;dl&gt;
    &lt;dt&gt;
        &lt;code&gt;service&lt;/code&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        The name of the service which hosts the resource.
    &lt;/dd&gt;
    &lt;dt&gt;
        &lt;code&gt;scope&lt;/code&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        The resource in question, formatted as one of the space-delimited
        entries from the &lt;code&gt;scope&lt;/code&gt; parameters from the &lt;code&gt;WWW-Authenticate&lt;/code&gt; header
        shown above. This query parameter should be specified multiple times if
        there is more than one &lt;code&gt;scope&lt;/code&gt; entry from the &lt;code&gt;WWW-Authenticate&lt;/code&gt;
        header. The above example would be specified as:
        &lt;code&gt;scope=repository:samalba/my-app:push&lt;/code&gt;.
    &lt;/dd&gt;
    &lt;dt&gt;
        &lt;code&gt;account&lt;/code&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        The name of the account which the client is acting as. Optional if it
        can be inferred from client authentication.
    &lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;

&lt;p&gt;Requests an authorization token for access to a specific resource hosted by a
specific service provider. Requires the client to authenticate either using a
TLS client certificate or using basic authentication (or any other kind of
digest/challenge/response authentication scheme if the client doesn&amp;rsquo;t support
TLS client certs). If the key in the client certificate is linked to an account
then the token is issued for that account key. If the key in the certificate is
linked to multiple accounts then the client must specify the &lt;code&gt;account&lt;/code&gt; query
parameter. The returned token is in JWT (JSON Web Token) format, signed using
the authorization server&amp;rsquo;s private key.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;For this example, the client makes an HTTP request to the following endpoint
over TLS using a client certificate with the server being configured to allow a
non-verified issuer during the handshake (i.e., a self-signed client cert is
okay).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v2/token/?service=registry.docker.com&amp;amp;scope=repository:samalba/my-app:push&amp;amp;account=jlhawn HTTP/1.1
Host: auth.docker.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server first inspects the client certificate to extract the subject key and
lookup which account it is associated with. The client is now authenticated
using that account.&lt;/p&gt;

&lt;p&gt;The server next searches its access control list for the account&amp;rsquo;s access to
the repository &lt;code&gt;samalba/my-app&lt;/code&gt; hosted by the service &lt;code&gt;registry.docker.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The server will now construct a JSON Web Token to sign and return. A JSON Web
Token has 3 main parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Headers&lt;/p&gt;

&lt;p&gt;The header of a JSON Web Token is a standard JOSE header. The &amp;ldquo;typ&amp;rdquo; field
will be &amp;ldquo;JWT&amp;rdquo; and it will also contain the &amp;ldquo;alg&amp;rdquo; which identifies the
signing algorithm used to produce the signature. It will also usually have
a &amp;ldquo;kid&amp;rdquo; field, the ID of the key which was used to sign the token.&lt;/p&gt;

&lt;p&gt;Here is an example JOSE Header for a JSON Web Token (formatted with
whitespace for readability):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;ES256&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;PYYO:TEWU:V7JH:26JV:AQTZ:LJC3:SXVJ:XGHA:34F2:2LAQ:ZRMK:Z7Q6&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It specifies that this object is going to be a JSON Web token signed using
the key with the given ID using the Elliptic Curve signature algorithm
using a SHA256 hash.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Claim Set&lt;/p&gt;

&lt;p&gt;The Claim Set is a JSON struct containing these standard registered claim
name fields:&lt;/p&gt;

&lt;dl&gt;
    &lt;dt&gt;
        &lt;code&gt;iss&lt;/code&gt; (Issuer)
    &lt;/dt&gt;
    &lt;dd&gt;
        The issuer of the token, typically the fqdn of the authorization
        server.
    &lt;/dd&gt;
    &lt;dt&gt;
        &lt;code&gt;sub&lt;/code&gt; (Subject)
    &lt;/dt&gt;
    &lt;dd&gt;
        The subject of the token; the id of the client which requested it.
    &lt;/dd&gt;
    &lt;dt&gt;
        &lt;code&gt;aud&lt;/code&gt; (Audience)
    &lt;/dt&gt;
    &lt;dd&gt;
        The intended audience of the token; the id of the service which
        will verify the token to authorize the client/subject.
    &lt;/dd&gt;
    &lt;dt&gt;
        &lt;code&gt;exp&lt;/code&gt; (Expiration)
    &lt;/dt&gt;
    &lt;dd&gt;
        The token should only be considered valid up to this specified date
        and time.
    &lt;/dd&gt;
    &lt;dt&gt;
        &lt;code&gt;nbf&lt;/code&gt; (Not Before)
    &lt;/dt&gt;
    &lt;dd&gt;
        The token should not be considered valid before this specified date
        and time.
    &lt;/dd&gt;
    &lt;dt&gt;
        &lt;code&gt;iat&lt;/code&gt; (Issued At)
    &lt;/dt&gt;
    &lt;dd&gt;
        Specifies the date and time which the Authorization server
        generated this token.
    &lt;/dd&gt;
    &lt;dt&gt;
        &lt;code&gt;jti&lt;/code&gt; (JWT ID)
    &lt;/dt&gt;
    &lt;dd&gt;
        A unique identifier for this token. Can be used by the intended
        audience to prevent replays of the token.
    &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;The Claim Set will also contain a private claim name unique to this
authorization server specification:&lt;/p&gt;

&lt;dl&gt;
    &lt;dt&gt;
        &lt;code&gt;access&lt;/code&gt;
    &lt;/dt&gt;
    &lt;dd&gt;
        An array of access entry objects with the following fields:


        &lt;dl&gt;
            &lt;dt&gt;
                &lt;code&gt;type&lt;/code&gt;
            &lt;/dt&gt;
            &lt;dd&gt;
                The type of resource hosted by the service.
            &lt;/dd&gt;
            &lt;dt&gt;
                &lt;code&gt;name&lt;/code&gt;
            &lt;/dt&gt;
            &lt;dd&gt;
                The name of the recource of the given type hosted by the
                service.
            &lt;/dd&gt;
            &lt;dt&gt;
                &lt;code&gt;actions&lt;/code&gt;
            &lt;/dt&gt;
            &lt;dd&gt;
                An array of strings which give the actions authorized on
                this resource.
            &lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Here is an example of such a JWT Claim Set (formatted with whitespace for
readability):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;iss&amp;quot;: &amp;quot;auth.docker.com&amp;quot;,
    &amp;quot;sub&amp;quot;: &amp;quot;jlhawn&amp;quot;,
    &amp;quot;aud&amp;quot;: &amp;quot;registry.docker.com&amp;quot;,
    &amp;quot;exp&amp;quot;: 1415387315,
    &amp;quot;nbf&amp;quot;: 1415387015,
    &amp;quot;iat&amp;quot;: 1415387015,
    &amp;quot;jti&amp;quot;: &amp;quot;tYJCO1c6cnyy7kAn0c7rKPgbV1H1bFws&amp;quot;,
    &amp;quot;access&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;repository&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;samalba/my-app&amp;quot;,
            &amp;quot;actions&amp;quot;: [
                &amp;quot;push&amp;quot;
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Signature&lt;/p&gt;

&lt;p&gt;The authorization server will produce a JOSE header and Claim Set with no
extraneous whitespace, i.e., the JOSE Header from above would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;typ&amp;quot;:&amp;quot;JWT&amp;quot;,&amp;quot;alg&amp;quot;:&amp;quot;ES256&amp;quot;,&amp;quot;kid&amp;quot;:&amp;quot;PYYO:TEWU:V7JH:26JV:AQTZ:LJC3:SXVJ:XGHA:34F2:2LAQ:ZRMK:Z7Q6&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the Claim Set from above would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;iss&amp;quot;:&amp;quot;auth.docker.com&amp;quot;,&amp;quot;sub&amp;quot;:&amp;quot;jlhawn&amp;quot;,&amp;quot;aud&amp;quot;:&amp;quot;registry.docker.com&amp;quot;,&amp;quot;exp&amp;quot;:1415387315,&amp;quot;nbf&amp;quot;:1415387015,&amp;quot;iat&amp;quot;:1415387015,&amp;quot;jti&amp;quot;:&amp;quot;tYJCO1c6cnyy7kAn0c7rKPgbV1H1bFws&amp;quot;,&amp;quot;access&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;repository&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;samalba/my-app&amp;quot;,&amp;quot;actions&amp;quot;:[&amp;quot;push&amp;quot;]}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The utf-8 representation of this JOSE header and Claim Set are then
url-safe base64 encoded (sans trailing &amp;lsquo;=&amp;rsquo; buffer), producing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IlBZWU86VEVXVTpWN0pIOjI2SlY6QVFUWjpMSkMzOlNYVko6WEdIQTozNEYyOjJMQVE6WlJNSzpaN1E2In0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for the JOSE Header and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJqbGhhd24iLCJhdWQiOiJyZWdpc3RyeS5kb2NrZXIuY29tIiwiZXhwIjoxNDE1Mzg3MzE1LCJuYmYiOjE0MTUzODcwMTUsImlhdCI6MTQxNTM4NzAxNSwianRpIjoidFlKQ08xYzZjbnl5N2tBbjBjN3JLUGdiVjFIMWJGd3MiLCJhY2Nlc3MiOlt7InR5cGUiOiJyZXBvc2l0b3J5IiwibmFtZSI6InNhbWFsYmEvbXktYXBwIiwiYWN0aW9ucyI6WyJwdXNoIl19XX0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for the Claim Set. These two are concatenated using a &amp;lsquo;.&amp;rsquo; character,
yielding the string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IlBZWU86VEVXVTpWN0pIOjI2SlY6QVFUWjpMSkMzOlNYVko6WEdIQTozNEYyOjJMQVE6WlJNSzpaN1E2In0.eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJqbGhhd24iLCJhdWQiOiJyZWdpc3RyeS5kb2NrZXIuY29tIiwiZXhwIjoxNDE1Mzg3MzE1LCJuYmYiOjE0MTUzODcwMTUsImlhdCI6MTQxNTM4NzAxNSwianRpIjoidFlKQ08xYzZjbnl5N2tBbjBjN3JLUGdiVjFIMWJGd3MiLCJhY2Nlc3MiOlt7InR5cGUiOiJyZXBvc2l0b3J5IiwibmFtZSI6InNhbWFsYmEvbXktYXBwIiwiYWN0aW9ucyI6WyJwdXNoIl19XX0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is then used as the payload to a the &lt;code&gt;ES256&lt;/code&gt; signature algorithm
specified in the JOSE header and specified fully in &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-38#section-3.4&#34;&gt;Section 3.4 of the JSON Web Algorithms (JWA)
draft specification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example signature will use the following ECDSA key for the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;kty&amp;quot;: &amp;quot;EC&amp;quot;,
    &amp;quot;crv&amp;quot;: &amp;quot;P-256&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;PYYO:TEWU:V7JH:26JV:AQTZ:LJC3:SXVJ:XGHA:34F2:2LAQ:ZRMK:Z7Q6&amp;quot;,
    &amp;quot;d&amp;quot;: &amp;quot;R7OnbfMaD5J2jl7GeE8ESo7CnHSBm_1N2k9IXYFrKJA&amp;quot;,
    &amp;quot;x&amp;quot;: &amp;quot;m7zUpx3b-zmVE5cymSs64POG9QcyEpJaYCD82-549_Q&amp;quot;,
    &amp;quot;y&amp;quot;: &amp;quot;dU3biz8sZ_8GPB-odm8Wxz3lNDr1xcAQQPQaOcr1fmc&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A resulting signature of the above payload using this key is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QhflHPfbd6eVF4lM9bwYpFZIV0PfikbyXuLx959ykRTBpe3CYnzs6YBK8FToVb5R47920PVLrh8zuLzdCr9t3w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Concatenating all of these together with a &lt;code&gt;.&lt;/code&gt; character gives the
resulting JWT:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IlBZWU86VEVXVTpWN0pIOjI2SlY6QVFUWjpMSkMzOlNYVko6WEdIQTozNEYyOjJMQVE6WlJNSzpaN1E2In0.eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJqbGhhd24iLCJhdWQiOiJyZWdpc3RyeS5kb2NrZXIuY29tIiwiZXhwIjoxNDE1Mzg3MzE1LCJuYmYiOjE0MTUzODcwMTUsImlhdCI6MTQxNTM4NzAxNSwianRpIjoidFlKQ08xYzZjbnl5N2tBbjBjN3JLUGdiVjFIMWJGd3MiLCJhY2Nlc3MiOlt7InR5cGUiOiJyZXBvc2l0b3J5IiwibmFtZSI6InNhbWFsYmEvbXktYXBwIiwiYWN0aW9ucyI6WyJwdXNoIl19XX0.QhflHPfbd6eVF4lM9bwYpFZIV0PfikbyXuLx959ykRTBpe3CYnzs6YBK8FToVb5R47920PVLrh8zuLzdCr9t3w
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This can now be placed in an HTTP response and returned to the client to use to
authenticate to the audience service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json

{&amp;quot;token&amp;quot;: &amp;quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IlBZWU86VEVXVTpWN0pIOjI2SlY6QVFUWjpMSkMzOlNYVko6WEdIQTozNEYyOjJMQVE6WlJNSzpaN1E2In0.eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJqbGhhd24iLCJhdWQiOiJyZWdpc3RyeS5kb2NrZXIuY29tIiwiZXhwIjoxNDE1Mzg3MzE1LCJuYmYiOjE0MTUzODcwMTUsImlhdCI6MTQxNTM4NzAxNSwianRpIjoidFlKQ08xYzZjbnl5N2tBbjBjN3JLUGdiVjFIMWJGd3MiLCJhY2Nlc3MiOlt7InR5cGUiOiJyZXBvc2l0b3J5IiwibmFtZSI6InNhbWFsYmEvbXktYXBwIiwiYWN0aW9ucyI6WyJwdXNoIl19XX0.QhflHPfbd6eVF4lM9bwYpFZIV0PfikbyXuLx959ykRTBpe3CYnzs6YBK8FToVb5R47920PVLrh8zuLzdCr9t3w&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-the-signed-token&#34;&gt;Using the signed token&lt;/h2&gt;

&lt;p&gt;Once the client has a token, it will try the registry request again with the
token placed in the HTTP &lt;code&gt;Authorization&lt;/code&gt; header like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IkJWM0Q6MkFWWjpVQjVaOktJQVA6SU5QTDo1RU42Ok40SjQ6Nk1XTzpEUktFOkJWUUs6M0ZKTDpQT1RMIn0.eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJCQ0NZOk9VNlo6UUVKNTpXTjJDOjJBVkM6WTdZRDpBM0xZOjQ1VVc6NE9HRDpLQUxMOkNOSjU6NUlVTCIsImF1ZCI6InJlZ2lzdHJ5LmRvY2tlci5jb20iLCJleHAiOjE0MTUzODczMTUsIm5iZiI6MTQxNTM4NzAxNSwiaWF0IjoxNDE1Mzg3MDE1LCJqdGkiOiJ0WUpDTzFjNmNueXk3a0FuMGM3cktQZ2JWMUgxYkZ3cyIsInNjb3BlIjoiamxoYXduOnJlcG9zaXRvcnk6c2FtYWxiYS9teS1hcHA6cHVzaCxwdWxsIGpsaGF3bjpuYW1lc3BhY2U6c2FtYWxiYTpwdWxsIn0.Y3zZSwaZPqy4y9oRBVRImZyv3m_S9XDHF1tWwN7mL52C_IiA73SJkWVNsvNqpJIn5h7A2F8biv_S2ppQ1lgkbw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also described in &lt;a href=&#34;https://tools.ietf.org/html/rfc6750#section-2.1&#34;&gt;Section 2.1 of RFC 6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;verifying-the-token&#34;&gt;Verifying the token&lt;/h2&gt;

&lt;p&gt;The registry must now verify the token presented by the user by inspecting the
claim set within. The registry will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that the issuer (&lt;code&gt;iss&lt;/code&gt; claim) is an authority it trusts.&lt;/li&gt;
&lt;li&gt;Ensure that the registry identifies as the audience (&lt;code&gt;aud&lt;/code&gt; claim).&lt;/li&gt;
&lt;li&gt;Check that the current time is between the &lt;code&gt;nbf&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; claim times.&lt;/li&gt;
&lt;li&gt;If enforcing single-use tokens, check that the JWT ID (&lt;code&gt;jti&lt;/code&gt; claim) value has
not been seen before.

&lt;ul&gt;
&lt;li&gt;To enforce this, the registry may keep a record of &lt;code&gt;jti&lt;/code&gt;s it has seen for
up to the &lt;code&gt;exp&lt;/code&gt; time of the token to prevent token replays.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;access&lt;/code&gt; claim value and use the identified resources and the list
of actions authorized to determine whether the token grants the required
level of access for the operation the client is attempting to perform.&lt;/li&gt;
&lt;li&gt;Verify that the signature of the token is valid.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At no point in this process should the registry need to &lt;em&gt;call back&lt;/em&gt; to
the authorization server. If anything, it would only need to update a list of
trusted public keys for verifying token signatures or use a separate API
(still to be spec&amp;rsquo;d) to add/update resource records on the authorization
server.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Filesystem storage driver</title>
      <link>http://localhost/registry/storage-drivers/filesystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/storage-drivers/filesystem/</guid>
      <description>

&lt;h1 id=&#34;filesystem-storage-driver&#34;&gt;Filesystem storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses the local filesystem.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rootdirectory&lt;/code&gt;: (optional) The root directory tree in which all registry files will be stored. Defaults to &lt;code&gt;/var/lib/registry&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting help</title>
      <link>http://localhost/registry/help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/help/</guid>
      <description>

&lt;h1 id=&#34;getting-help&#34;&gt;Getting help&lt;/h1&gt;

&lt;p&gt;If you need help, or just want to chat, you can reach us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on irc: &lt;code&gt;#docker-distribution&lt;/code&gt; on freenode&lt;/li&gt;
&lt;li&gt;on the &lt;a href=&#34;https://groups.google.com/a/dockerproject.org/forum/#!forum/distribution&#34;&gt;mailing list&lt;/a&gt; (mail at &lt;a href=&#34;mailto:distribution@dockerproject.org&#34;&gt;distribution@dockerproject.org&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to report a bug:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be sure to first read about &lt;a href=&#34;http://localhost/registry/https://github.com/docker/distribution/blob/master/CONTRIBUTING&#34;&gt;how to contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you can then do so on the &lt;a href=&#34;https://github.com/docker/distribution/issues&#34;&gt;GitHub project bugtracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also find out more about the Docker&amp;rsquo;s project &lt;a href=&#34;https://docs.docker.com/project/get-help&#34;&gt;Getting Help resources&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In-memory storage driver</title>
      <link>http://localhost/registry/storage-drivers/inmemory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/storage-drivers/inmemory/</guid>
      <description>

&lt;h1 id=&#34;in-memory-storage-driver&#34;&gt;In-memory storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses local memory for object storage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: This storage driver &lt;em&gt;does not&lt;/em&gt; persist data across runs, and primarily exists for testing.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;None&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microsoft Azure storage driver</title>
      <link>http://localhost/registry/storage-drivers/azure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/storage-drivers/azure/</guid>
      <description>

&lt;h1 id=&#34;microsoft-azure-storage-driver&#34;&gt;Microsoft Azure storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses &lt;a href=&#34;http://azure.microsoft.com/en-us/services/storage/&#34;&gt;Microsoft Azure Blob Storage&lt;/a&gt; for object storage.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;The following parameters must be used to authenticate and configure the storage driver (case-sensitive):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accountname&lt;/code&gt;: Name of the Azure Storage Account.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accountkey&lt;/code&gt;: Primary or Secondary Key for the Storage Account.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt;: Name of the root storage container in which all registry data will be stored. Must comply the storage container name &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/azure/dd179468.aspx&#34;&gt;requirements&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;realm&lt;/code&gt;: (optional) Domain name suffix for the Storage Service API endpoint. Defaults to &lt;code&gt;core.windows.net&lt;/code&gt;. For example realm for &amp;ldquo;Azure in China&amp;rdquo; would be &lt;code&gt;core.chinacloudapi.cn&lt;/code&gt; and realm for &amp;ldquo;Azure Government&amp;rdquo; would be &lt;code&gt;core.usgovcloudapi.net&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>S3 storage driver</title>
      <link>http://localhost/registry/storage-drivers/s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/registry/storage-drivers/s3/</guid>
      <description>

&lt;h1 id=&#34;s3-storage-driver&#34;&gt;S3 storage driver&lt;/h1&gt;

&lt;p&gt;An implementation of the &lt;code&gt;storagedriver.StorageDriver&lt;/code&gt; interface which uses Amazon S3 for object storage.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;accesskey&lt;/code&gt;: Your aws access key.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;secretkey&lt;/code&gt;: Your aws secret key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You can provide empty strings for your access and secret keys if you plan on running the driver on an ec2 instance and will handle authentication with the instance&amp;rsquo;s credentials.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;region&lt;/code&gt;: The name of the aws region in which you would like to store objects (for example &lt;code&gt;us-east-1&lt;/code&gt;). For a list of regions, you can look at &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html&#34;&gt;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bucket&lt;/code&gt;: The name of your s3 bucket where you wish to store objects (needs to already be created prior to driver initialization).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;encrypt&lt;/code&gt;: (optional) Whether you would like your data encrypted on the server side (defaults to false if not specified).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;secure&lt;/code&gt;: (optional) Whether you would like to transfer data to the bucket over ssl or not. Defaults to true (meaning transfering over ssl) if not specified. Note that while setting this to false will improve performance, it is not recommended due to security concerns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v4auth&lt;/code&gt;: (optional) Whether you would like to use aws signature version 4 with your requests. This defaults to true if not specified (note that the eu-central-1 region does not work with version 2 signatures, so the driver will error out if initialized with this region and v4auth set to false)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chunksize&lt;/code&gt;: (optional) The default part size for multipart uploads (performed by WriteStream) to s3. The default is 10 MB. Keep in mind that the minimum part size for s3 is 5MB. You might experience better performance for larger chunk sizes depending on the speed of your connection to s3.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rootdirectory&lt;/code&gt;: (optional) The root directory tree in which all registry files will be stored. Defaults to the empty string (bucket root).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>