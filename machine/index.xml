<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machines on Docker Docs</title>
    <link>https://docs.docker.com/v1.10/machine/</link>
    <description>Recent content in Machines on Docker Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://docs.docker.com/v1.10/machine/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Amazon Web Services</title>
      <link>https://docs.docker.com/v1.10/machine/drivers/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/drivers/aws/</guid>
      <description>

&lt;h1 id=&#34;amazon-web-services&#34;&gt;Amazon Web Services&lt;/h1&gt;

&lt;p&gt;Create machines on &lt;a href=&#34;http://aws.amazon.com&#34;&gt;Amazon Web Services&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create machines on &lt;a href=&#34;http://aws.amazon.com&#34;&gt;Amazon Web Services&lt;/a&gt;, you must supply two parameters: the AWS Access Key ID and the AWS Secret Access Key.&lt;/p&gt;

&lt;h2 id=&#34;configuring-credentials&#34;&gt;Configuring credentials&lt;/h2&gt;

&lt;p&gt;Before using the amazonec2 driver, ensure that you&amp;rsquo;ve configured credentials.&lt;/p&gt;

&lt;h3 id=&#34;aws-credential-file&#34;&gt;AWS credential file&lt;/h3&gt;

&lt;p&gt;One way to configure credentials is to use the standard credential file for Amazon AWS &lt;code&gt;~/.aws/credentials&lt;/code&gt; file, which might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
aws_access_key_id = AKID1234567890
aws_secret_access_key = MY-SECRET-KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Mac OS or various flavors of Linux you can install the &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration&#34;&gt;AWS Command Line Interface&lt;/a&gt; (&lt;code&gt;aws cli&lt;/code&gt;) in the terminal and use the &lt;code&gt;aws configure&lt;/code&gt; command which guides you through the creation of the credentials file.&lt;/p&gt;

&lt;p&gt;This is the simplest method, you can then create a new machine with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create --driver amazonec2 aws01
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;command-line-flags&#34;&gt;Command line flags&lt;/h3&gt;

&lt;p&gt;Alternatively, you can use the flags &lt;code&gt;--amazonec2-access-key&lt;/code&gt; and &lt;code&gt;--amazonec2-secret-key&lt;/code&gt; on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create --driver amazonec2 --amazonec2-access-key AKI******* --amazonec2-secret-key 8T93C*******  aws01
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;environment-variables&#34;&gt;Environment variables&lt;/h3&gt;

&lt;p&gt;You can use environment variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export AWS_ACCESS_KEY_ID=AKID1234567890
$ export AWS_SECRET_ACCESS_KEY=MY-SECRET-KEY
$ docker-machine create --driver amazonec2 aws01
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-access-key&lt;/code&gt;: Your access key id for the Amazon Web Services API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-secret-key&lt;/code&gt;: Your secret access key for the Amazon Web Services API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-session-token&lt;/code&gt;: Your session token for the Amazon Web Services API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-ami&lt;/code&gt;: The AMI ID of the instance to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-region&lt;/code&gt;: The region to use when launching the instance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-vpc-id&lt;/code&gt;: Your VPC ID to launch the instance in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-zone&lt;/code&gt;: The AWS zone to launch the instance in (i.e. one of a,b,c,d,e).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-subnet-id&lt;/code&gt;: AWS VPC subnet id.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-security-group&lt;/code&gt;: AWS VPC security group name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-tags&lt;/code&gt;: AWS extra tag key-value pairs (comma-separated, e.g. key1,value1,key2,value2).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-instance-type&lt;/code&gt;: The instance type to run.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-device-name&lt;/code&gt;: The root device name of the instance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-root-size&lt;/code&gt;: The root disk size of the instance (in GB).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-volume-type&lt;/code&gt;: The Amazon EBS volume type to be attached to the instance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-iam-instance-profile&lt;/code&gt;: The AWS IAM role name to be used as the instance profile.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-ssh-user&lt;/code&gt;: The SSH Login username, which must match the default SSH user set in the ami used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-request-spot-instance&lt;/code&gt;: Use spot instances.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-spot-price&lt;/code&gt;: Spot instance bid price (in dollars). Require the &lt;code&gt;--amazonec2-request-spot-instance&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-use-private-address&lt;/code&gt;: Use the private IP address for docker-machine, but still create a public IP address.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-private-address-only&lt;/code&gt;: Use the private IP address only.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-monitoring&lt;/code&gt;: Enable CloudWatch Monitoring.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-use-ebs-optimized-instance&lt;/code&gt;: Create an EBS Optimized Instance, instance type must support it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-ssh-keypath&lt;/code&gt;: Path to Private Key file to use for instance. Matching public key with .pub extension should exist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--amazonec2-retries&lt;/code&gt;:  Set retry count for recoverable failures (use -1 to disable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Environment variables and default values:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CLI option&lt;/th&gt;
&lt;th&gt;Environment variable&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-access-key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-secret-key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-session-token&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_SESSION_TOKEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-ami&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_AMI&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ami-5f709f34&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-region&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_DEFAULT_REGION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;us-east-1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-vpc-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_VPC_ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-zone&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_ZONE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-subnet-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_SUBNET_ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-security-group&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_SECURITY_GROUP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker-machine&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_TAGS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-instance-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_INSTANCE_TYPE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;t2.micro&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-device-name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_DEVICE_NAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/dev/sda1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-root-size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_ROOT_SIZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;16&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-volume-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_VOLUME_TYPE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gp2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-iam-instance-profile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_INSTANCE_PROFILE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-ssh-user&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_SSH_USER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ubuntu&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-request-spot-instance&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-spot-price&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0.50&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-use-private-address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-private-address-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-monitoring&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-use-ebs-optimized-instance&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-ssh-keypath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AWS_SSH_KEYPATH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--amazonec2-retries&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;default-amis&#34;&gt;Default AMIs&lt;/h2&gt;

&lt;p&gt;By default, the Amazon EC2 driver will use a daily image of Ubuntu 15.10 LTS.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Region&lt;/th&gt;
&lt;th&gt;AMI ID&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ap-northeast-1&lt;/td&gt;
&lt;td&gt;ami-b36d4edd&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ap-southeast-1&lt;/td&gt;
&lt;td&gt;ami-1069af73&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ap-southeast-2&lt;/td&gt;
&lt;td&gt;ami-1d336a7e&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cn-north-1&lt;/td&gt;
&lt;td&gt;ami-79eb2214&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;eu-west-1&lt;/td&gt;
&lt;td&gt;ami-8aa67cf9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;eu-central-1&lt;/td&gt;
&lt;td&gt;ami-ab0210c7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sa-east-1&lt;/td&gt;
&lt;td&gt;ami-185de774&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;us-east-1&lt;/td&gt;
&lt;td&gt;ami-26d5af4c&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;us-west-1&lt;/td&gt;
&lt;td&gt;ami-9cbcd2fc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;us-west-2&lt;/td&gt;
&lt;td&gt;ami-16b1a077&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;us-gov-west-1&lt;/td&gt;
&lt;td&gt;ami-b0bad893&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;security-group&#34;&gt;Security Group&lt;/h2&gt;

&lt;p&gt;Note that a security group will be created and associated to the host. This security group will have the following ports opened inbound:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ssh (22/tcp)&lt;/li&gt;
&lt;li&gt;docker (2376/tcp)&lt;/li&gt;
&lt;li&gt;swarm (3376/tcp), only if the node is a swarm master&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you specify a security group yourself using the &lt;code&gt;--amazonec2-security-group&lt;/code&gt; flag, the above ports will be checked and opened and the security group modified.
If you want more ports to be opened, like application specific ports, use the aws console and modify the configuration manually.&lt;/p&gt;

&lt;h2 id=&#34;vpc-id&#34;&gt;VPC ID&lt;/h2&gt;

&lt;p&gt;We determine your default vpc id at the start of a command.
In some cases, either because your account does not have a default vpc, or you don&amp;rsquo;t want to use the default one, you can specify a vpc with the &lt;code&gt;--amazonec2-vpc-id&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;To find the VPC ID:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login to the AWS console&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;Services -&amp;gt; VPC -&amp;gt; Your VPCs&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Locate the VPC ID you want from the &lt;em&gt;VPC&lt;/em&gt; column.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to &lt;strong&gt;Services -&amp;gt; VPC -&amp;gt; Subnets&lt;/strong&gt;. Examine the &lt;em&gt;Availability Zone&lt;/em&gt; column to verify that zone &lt;code&gt;a&lt;/code&gt; exists and matches your VPC ID.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;us-east1-a&lt;/code&gt; is in the &lt;code&gt;a&lt;/code&gt; availability zone. If the &lt;code&gt;a&lt;/code&gt; zone is not present, you can create a new subnet in that zone or specify a different zone when you create the machine.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create a machine with a non-default vpc-id:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create --driver amazonec2 --amazonec2-access-key AKI******* --amazonec2-secret-key 8T93C********* --amazonec2-vpc-id vpc-****** aws02
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example assumes the VPC ID was found in the &lt;code&gt;a&lt;/code&gt; availability zone. Use the&lt;code&gt;--amazonec2-zone&lt;/code&gt; flag to specify a zone other than the &lt;code&gt;a&lt;/code&gt; zone. For example, &lt;code&gt;--amazonec2-zone c&lt;/code&gt; signifies &lt;code&gt;us-east1-c&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;vpc-connectivity&#34;&gt;VPC Connectivity&lt;/h2&gt;

&lt;p&gt;Machine uses SSH to complete the set up of instances in EC2 and requires the ability to access the instance directly.&lt;/p&gt;

&lt;p&gt;If you use the flag &lt;code&gt;--amazonec2-private-address-only&lt;/code&gt;, you will need to ensure that you have some method of accessing the new instance from within the internal network of the VPC (e.g. a corporate VPN to the VPC, a VPN instance inside the VPC or using Docker-machine from an instance within your VPC).&lt;/p&gt;

&lt;p&gt;Configuration of VPCs is beyond the scope of this guide, however the first step in troubleshooting is ensuring if you are using private subnets that you follow the design guidance in the &lt;a href=&#34;http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html&#34;&gt;AWS VPC User Guide&lt;/a&gt; and have some form of NAT available so that the set up process can access the internet to complete set up.&lt;/p&gt;

&lt;h2 id=&#34;custom-ami-and-ssh-username&#34;&gt;Custom AMI and SSH username&lt;/h2&gt;

&lt;p&gt;The default SSH username for the default AMIs is &lt;code&gt;ubuntu&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You need to change the SSH username only if the custom AMI you use has a different SSH username.&lt;/p&gt;

&lt;p&gt;You can change the SSH username with the &lt;code&gt;--amazonec2-ssh-user&lt;/code&gt; according to the AMI you selected with the &lt;code&gt;--amazonec2-ami&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Command line reference</title>
      <link>https://docs.docker.com/v1.10/machine/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/reference/</guid>
      <description>

&lt;h1 id=&#34;docker-machine-command-line-reference&#34;&gt;Docker Machine command line reference&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/active/&#34;&gt;active&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/config/&#34;&gt;config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/create/&#34;&gt;create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/env/&#34;&gt;env&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/help/&#34;&gt;help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/inspect/&#34;&gt;inspect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/ip/&#34;&gt;ip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/kill/&#34;&gt;kill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/ls/&#34;&gt;ls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/regenerate-certs/&#34;&gt;regenerate-certs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/restart/&#34;&gt;restart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/rm/&#34;&gt;rm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/scp/&#34;&gt;scp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/ssh/&#34;&gt;ssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/start/&#34;&gt;start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/status/&#34;&gt;status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/stop/&#34;&gt;stop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/upgrade/&#34;&gt;upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/url/&#34;&gt;url&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Command-line Completion</title>
      <link>https://docs.docker.com/v1.10/machine/completion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/completion/</guid>
      <description>

&lt;h1 id=&#34;command-line-completion&#34;&gt;Command-line Completion&lt;/h1&gt;

&lt;p&gt;Docker Machine comes with &lt;a href=&#34;http://en.wikipedia.org/wiki/Command-line_completion&#34;&gt;command completion&lt;/a&gt;
for the bash shell.&lt;/p&gt;

&lt;h2 id=&#34;installing-command-completion&#34;&gt;Installing Command Completion&lt;/h2&gt;

&lt;h3 id=&#34;bash&#34;&gt;Bash&lt;/h3&gt;

&lt;p&gt;Make sure bash completion is installed. If you use a current Linux in a non-minimal installation, bash completion should be available.
On a Mac, install with &lt;code&gt;brew install bash-completion&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Place the completion scripts in &lt;code&gt;/etc/bash_completion.d/&lt;/code&gt; (&lt;code&gt;`brew --prefix`/etc/bash_completion.d/&lt;/code&gt; on a Mac), using e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;files=(docker-machine docker-machine-wrapper docker-machine-prompt)
for f in &amp;quot;${files[@]}&amp;quot;; do
  curl -L https://raw.githubusercontent.com/docker/machine/v$(docker-machine --version | tr -ds &#39;,&#39; &#39; &#39; | awk &#39;NR==1{print $(3)}&#39;)/contrib/completion/bash/$f.bash &amp;gt; `brew --prefix`/etc/bash_completion.d/$f
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Completion will be available upon next login.&lt;/p&gt;

&lt;!--
### Zsh

**Note: there does not seem to be any Zsh completion file yet, but when there is, documentation could look like this.**

Place the completion scripts in your `/path/to/zsh/completion`, using e.g. `~/.zsh/completion/`

    mkdir -p ~/.zsh/completion
    files=(docker-machine docker-machine-wrapper docker-machine-prompt)
    for f in &#34;${files[@]}&#34;; do
      curl -L https://raw.githubusercontent.com/docker/machine/v$(docker-machine --version | tr -ds &#39;,&#39; &#39; &#39; | awk &#39;NR==1{print $(3)}&#39;)/contrib/completion/zsh/$f &gt; ~/.zsh/completion/_$f
    done

Include the directory in your `$fpath`, e.g. by adding in `~/.zshrc`

    fpath=(~/.zsh/completion $fpath)

Make sure `compinit` is loaded or do it by adding in `~/.zshrc`

    autoload -Uz compinit &amp;&amp; compinit -i

Then reload your shell

    exec $SHELL -l

--&gt;

&lt;!--[metadata]&gt;
## Available completions

**TODO**
&lt;![end-metadata]--&gt;
</description>
    </item>
    
    <item>
      <title>Digital Ocean</title>
      <link>https://docs.docker.com/v1.10/machine/drivers/digital-ocean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/drivers/digital-ocean/</guid>
      <description>

&lt;h1 id=&#34;digital-ocean&#34;&gt;Digital Ocean&lt;/h1&gt;

&lt;p&gt;Create Docker machines on &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You need to create a personal access token under &amp;ldquo;Apps &amp;amp; API&amp;rdquo; in the Digital Ocean
Control Panel and pass that to &lt;code&gt;docker-machine create&lt;/code&gt; with the &lt;code&gt;--digitalocean-access-token&lt;/code&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create --driver digitalocean --digitalocean-access-token=aa9399a2175a93b17b1c86c807e08d3fc4b79876545432a629602f61cf6ccd6b test-this
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-access-token&lt;/code&gt;: &lt;strong&gt;required&lt;/strong&gt; Your personal access token for the Digital Ocean API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-image&lt;/code&gt;: The name of the Digital Ocean image to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-region&lt;/code&gt;: The region to create the droplet in, see &lt;a href=&#34;https://developers.digitalocean.com/documentation/v2/#regions&#34;&gt;Regions API&lt;/a&gt; for how to get a list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-size&lt;/code&gt;: The size of the Digital Ocean droplet (larger than default options are of the form &lt;code&gt;2gb&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-ipv6&lt;/code&gt;: Enable IPv6 support for the droplet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-private-networking&lt;/code&gt;: Enable private networking support for the droplet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-backups&lt;/code&gt;: Enable Digital Oceans backups for the droplet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-userdata&lt;/code&gt;: Path to file containing User Data for the droplet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-ssh-user&lt;/code&gt;: SSH username.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-ssh-port&lt;/code&gt;: SSH port.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--digitalocean-ssh-key-fingerprint&lt;/code&gt;: Use an existing SSH key instead of creating a new one, see &lt;a href=&#34;https://developers.digitalocean.com/documentation/v2/#ssh-keys&#34;&gt;SSH keys&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The DigitalOcean driver will use &lt;code&gt;ubuntu-15-10-x64&lt;/code&gt; as the default image.&lt;/p&gt;

&lt;p&gt;Environment variables and default values:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CLI option&lt;/th&gt;
&lt;th&gt;Environment variable&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;--digitalocean-access-token&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_ACCESS_TOKEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-image&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_IMAGE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ubuntu-15-10-x64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-region&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_REGION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nyc3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_SIZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;512mb&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-ipv6&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_IPV6&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-private-networking&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_PRIVATE_NETWORKING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-backups&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_BACKUPS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-userdata&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_USERDATA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-ssh-user&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_SSH_USER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;root&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-ssh-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_SSH_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--digitalocean-ssh-key-fingerprint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DIGITALOCEAN_SSH_KEY_FINGERPRINT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Docker Machine</title>
      <link>https://docs.docker.com/v1.10/machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/</guid>
      <description>

&lt;h1 id=&#34;docker-machine&#34;&gt;Docker Machine&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/overview/&#34;&gt;Docker Machine overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/install-machine/&#34;&gt;Install Docker Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install a machine on your &lt;a href=&#34;../v1.10/machine/get-started/&#34;&gt;local system using VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install multiple machines &lt;a href=&#34;../v1.10/machine/get-started-cloud/&#34;&gt;on your cloud provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/examples/ocean/&#34;&gt;Digital Ocean Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/examples/aws/&#34;&gt;AWS Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/concepts/&#34;&gt;Machine concepts and help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/migrate-to-machine/&#34;&gt;Migrate from Boot2Docker to Docker Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/&#34;&gt;Docker Machine driver reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/&#34;&gt;Docker Machine subcommand reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Driver options and operating system defaults</title>
      <link>https://docs.docker.com/v1.10/machine/drivers/os-base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/drivers/os-base/</guid>
      <description>

&lt;h1 id=&#34;driver-options-and-operating-system-defaults&#34;&gt;Driver options and operating system defaults&lt;/h1&gt;

&lt;p&gt;When Docker Machine provisions containers on local network provider or with a
remote, cloud provider such as Amazon Web Services, you must define both the
driver for your provider and a base operating system. There are over 10
supported drivers and a generic driver for adding machines for other providers.&lt;/p&gt;

&lt;p&gt;Each driver has a set of options specific to that provider.  These options
provide information to machine such as connection credentials, ports, and so
forth.  For example, to create an Azure machine:&lt;/p&gt;

&lt;p&gt;Grab your subscription ID from the portal, then run &lt;code&gt;docker-machine create&lt;/code&gt; with
these details:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine create -d azure --azure-subscription-id=&amp;quot;SUB_ID&amp;quot; --azure-subscription-cert=&amp;quot;mycert.pem&amp;quot; A-VERY-UNIQUE-NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see a list of providers and review the options available to a provider, see
the &lt;a href=&#34;../v1.10/machine/&#34;&gt;Docker Machine driver reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition to the provider, you have the option of identifying a base operating
system. It is an option because Docker Machine has defaults for both local and
remote providers. For local providers such as VirtualBox, Fusion, Hyper-V, and
so forth, the default base operating system is Boot2Docker. For cloud providers,
the base operating system is the latest Ubuntu LTS the provider supports.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operating System&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Boot2Docker&lt;/td&gt;
&lt;td&gt;1.5+&lt;/td&gt;
&lt;td&gt;default for local&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ubuntu&lt;/td&gt;
&lt;td&gt;12.04+&lt;/td&gt;
&lt;td&gt;default for remote&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RancherOS&lt;/td&gt;
&lt;td&gt;0.3+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Debian&lt;/td&gt;
&lt;td&gt;8.0+&lt;/td&gt;
&lt;td&gt;experimental&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RedHat Enterprise Linux&lt;/td&gt;
&lt;td&gt;7.0+&lt;/td&gt;
&lt;td&gt;experimental&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CentOS&lt;/td&gt;
&lt;td&gt;7+&lt;/td&gt;
&lt;td&gt;experimental&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Fedora&lt;/td&gt;
&lt;td&gt;21+&lt;/td&gt;
&lt;td&gt;experimental&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To use a different base operating system on a remote provider, specify the
provider&amp;rsquo;s image flag and one of its available images. For example, to select a
&lt;code&gt;debian-8-x64&lt;/code&gt; image on DigitalOcean you would supply the
&lt;code&gt;--digitalocean-image=debian-8-x64&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;If you change the base image for a provider, you may also need to change
the SSH user. For example, the default Red Hat AMI on EC2 expects the
SSH user to be &lt;code&gt;ec2-user&lt;/code&gt;, so you would have to specify this with
&lt;code&gt;--amazonec2-ssh-user ec2-user&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drivers</title>
      <link>https://docs.docker.com/v1.10/machine/drivers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/drivers/</guid>
      <description>

&lt;h1 id=&#34;supported-drivers&#34;&gt;Supported Drivers&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/aws/&#34;&gt;Amazon Web Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/azure/&#34;&gt;Microsoft Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/digital-ocean/&#34;&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/exoscale/&#34;&gt;Exoscale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/gce/&#34;&gt;Google Compute Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/generic/&#34;&gt;Generic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/hyper-v/&#34;&gt;Microsoft Hyper-V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/openstack/&#34;&gt;OpenStack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/rackspace/&#34;&gt;Rackspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/soft-layer/&#34;&gt;IBM Softlayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/virtualbox/&#34;&gt;Oracle VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/vm-cloud/&#34;&gt;VMware vCloud Air&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/vm-fusion/&#34;&gt;VMware Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/vsphere/&#34;&gt;VMware vSphere&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Generic</title>
      <link>https://docs.docker.com/v1.10/machine/drivers/generic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/drivers/generic/</guid>
      <description>

&lt;h1 id=&#34;generic&#34;&gt;Generic&lt;/h1&gt;

&lt;p&gt;Create machines using an existing VM/Host with SSH.&lt;/p&gt;

&lt;p&gt;This is useful if you are using a provider that Machine does not support
directly or if you would like to import an existing host to allow Docker
Machine to manage.&lt;/p&gt;

&lt;p&gt;The driver will perform a list of tasks on create:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If docker is not running on the host, it will be installed automatically.&lt;/li&gt;
&lt;li&gt;It will update the host packages (&lt;code&gt;apt-get update&lt;/code&gt;, &lt;code&gt;yum update&lt;/code&gt;&amp;hellip;).&lt;/li&gt;
&lt;li&gt;It will generate certificates to secure the docker daemon.&lt;/li&gt;
&lt;li&gt;The docker daemon will be restarted, thus all running containers will be stopped.&lt;/li&gt;
&lt;li&gt;The hostname will be changed to fit the machine name.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;To create a machine instance, specify &lt;code&gt;--driver generic&lt;/code&gt;, the IP address or DNS
name of the host and the path to the SSH private key authorized to connect
to the host.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create \
  --driver generic \
  --generic-ip-address=203.0.113.81 \
  --generic-ssh-key=~/.ssh/id_rsa \
  vm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;password-protected-ssh-keys&#34;&gt;Password-protected SSH keys&lt;/h3&gt;

&lt;p&gt;When an SSH identity is not provided (with the &lt;code&gt;--generic-ssh-key&lt;/code&gt; flag),
the SSH agent (if running) will be consulted. This makes it possible to
easily use password-protected SSH keys.&lt;/p&gt;

&lt;p&gt;Note that this usage is &lt;em&gt;only&lt;/em&gt; supported if you&amp;rsquo;re using the external SSH client,
which is the default behaviour when the &lt;code&gt;ssh&lt;/code&gt; binary is available. If you&amp;rsquo;re
using the native client (with &lt;code&gt;--native-ssh&lt;/code&gt;), using the SSH agent is not yet
supported.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create \
  --driver generic \
  --generic-ip-address=203.0.113.81 \
  other
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sudo-privileges&#34;&gt;Sudo privileges&lt;/h3&gt;

&lt;p&gt;The user that is used to SSH into the host can be specified with
&lt;code&gt;--generic-ssh-user&lt;/code&gt; flag. This user has to be have password-less sudo
privileges.
If it&amp;rsquo;s not the case, you need to edit the &lt;code&gt;sudoers&lt;/code&gt; file and configure the user
as a sudoer with &lt;code&gt;NOPASSWD&lt;/code&gt;. See &lt;a href=&#34;https://help.ubuntu.com/community/Sudoers&#34;&gt;https://help.ubuntu.com/community/Sudoers&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--generic-engine-port&lt;/code&gt;: Port to use for Docker Daemon (Note: This flag will not work with boot2docker).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--generic-ip-address&lt;/code&gt;: &lt;strong&gt;required&lt;/strong&gt; IP Address of host.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--generic-ssh-key&lt;/code&gt;: Path to the SSH user private key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--generic-ssh-user&lt;/code&gt;: SSH username used to connect.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--generic-ssh-port&lt;/code&gt;: Port to use for SSH.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You must use a base operating system supported by Machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Environment variables and default values:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CLI option&lt;/th&gt;
&lt;th&gt;Environment variable&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--generic-engine-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GENERIC_ENGINE_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2376&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;--generic-ip-address&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GENERIC_IP_ADDRESS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--generic-ssh-key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GENERIC_SSH_KEY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(defers to &lt;code&gt;ssh-agent&lt;/code&gt;)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--generic-ssh-user&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GENERIC_SSH_USER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;root&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--generic-ssh-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GENERIC_SSH_PORT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;22&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Get started with a local VM</title>
      <link>https://docs.docker.com/v1.10/machine/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/get-started/</guid>
      <description>

&lt;h1 id=&#34;get-started-with-docker-machine-and-a-local-vm&#34;&gt;Get started with Docker Machine and a local VM&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at using &lt;code&gt;docker-machine&lt;/code&gt; for creating, using, and managing a
Docker host inside of &lt;a href=
&#34;https://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;VirtualBox&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure  you have &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34; target=&#34;_blank&#34;&gt;the latest VirtualBox&lt;/a&gt; correctly installed
on your system. If you used &lt;a href=&#34;https://www.docker.com/products/docker-toolbox&#34; target=&#34;_blank&#34;&gt;Toolbox&lt;/a&gt; for &lt;a href=&#34;https://docs.docker.com/engine/installation/mac/&#34; target=&#34;_blank&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;https://docs.docker.com/engine/installation/windows/&#34; target=&#34;_blank&#34;&gt;Windows&lt;/a&gt; to install Docker Machine, VirtualBox is automatically installed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you used the Quickstart Terminal to launch your first machine and set your terminal environment to point to it, a default machine was automatically created. If this is the case, you can still follow along with these steps, but create another machine and name it something other than &amp;ldquo;default&amp;rdquo; (e.g., staging or sandbox).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;use-machine-to-run-docker-containers&#34;&gt;Use Machine to run Docker containers&lt;/h2&gt;

&lt;p&gt;To run a Docker container, you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a new (or start an existing) Docker virtual machine&lt;/li&gt;
&lt;li&gt;switch your environment to your new VM&lt;/li&gt;
&lt;li&gt;use the docker client to create, load, and manage containers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you create a machine, you can reuse it as often as you like. Like any VirtualBox VM, it maintains its configuration between uses.&lt;/p&gt;

&lt;p&gt;The examples here show how to create and start a machine, run Docker commands, and work with containers.&lt;/p&gt;

&lt;h2 id=&#34;create-a-machine&#34;&gt;Create a machine&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a command shell or terminal window.&lt;/p&gt;

&lt;p&gt;These command examples shows a Bash shell. For a different shell, such as C Shell, the same commands are the same except where noted.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use &lt;code&gt;docker-machine ls&lt;/code&gt; to list available machines.&lt;/p&gt;

&lt;p&gt;In this example, no machines have been created yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ls
NAME   ACTIVE   DRIVER   STATE   URL   SWARM   DOCKER   ERRORS
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a machine.&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;docker-machine create&lt;/code&gt; command, passing the string &lt;code&gt;virtualbox&lt;/code&gt; to the &lt;code&gt;--driver&lt;/code&gt; flag. The final argument is the name of the machine. If this is your first machine, name it &lt;code&gt;default&lt;/code&gt;. If you already have a &amp;ldquo;default&amp;rdquo; machine, choose another name for this new machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create --driver virtualbox default
Running pre-create checks...
Creating machine...
(staging) Copying /Users/ripley/.docker/machine/cache/boot2docker.iso to /Users/ripley/.docker/machine/machines/default/boot2docker.iso...
(staging) Creating VirtualBox VM...
(staging) Creating SSH key...
(staging) Starting the VM...
(staging) Waiting for an IP...
Waiting for machine to be running, this may take a few minutes...
Machine is running, waiting for SSH to be available...
Detecting operating system of created instance...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect Docker to this machine, run: docker-machine env default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command downloads a lightweight Linux distribution
(&lt;a href=&#34;https://github.com/boot2docker/boot2docker&#34; target=&#34;_blank&#34;&gt;boot2docker&lt;/a&gt;) with the Docker daemon installed, and creates and starts a VirtualBox VM with Docker running.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List available machines again to see your newly minted machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ls
NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER   ERRORS
default   *        virtualbox   Running   tcp://192.168.99.187:2376           v1.9.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get the environment commands for your new VM.&lt;/p&gt;

&lt;p&gt;As noted in the output of the &lt;code&gt;docker-machine create&lt;/code&gt; command, you need to tell Docker to talk to the new machine. You can do this with the &lt;code&gt;docker-machine env&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine env default
export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
export DOCKER_HOST=&amp;quot;tcp://172.16.62.130:2376&amp;quot;
export DOCKER_CERT_PATH=&amp;quot;/Users/&amp;lt;yourusername&amp;gt;/.docker/machine/machines/default&amp;quot;
export DOCKER_MACHINE_NAME=&amp;quot;default&amp;quot;
# Run this command to configure your shell:
# eval &amp;quot;$(docker-machine env default)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect your shell to the new machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval &amp;quot;$(docker-machine env default)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are using &lt;code&gt;fish&lt;/code&gt;, or a Windows shell such as
  Powershell/&lt;code&gt;cmd.exe&lt;/code&gt; the above method will not work as described.
  Instead, see &lt;a href=&#34;https://docs.docker.com/machine/reference/env/&#34; target=&#34;_blank&#34;&gt;the &lt;code&gt;env&lt;/code&gt; command&amp;rsquo;s documentation&lt;/a&gt;
  to learn how to set the environment variables for your shell.&lt;/p&gt;

&lt;p&gt;This sets environment variables for the current shell that the Docker client will read which specify the TLS settings. You need to do this each time you open a new shell or restart your machine.&lt;/p&gt;

&lt;p&gt;You can now run Docker commands on this host.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;run-containers-and-experiment-with-machine-commands&#34;&gt;Run containers and experiment with Machine commands&lt;/h2&gt;

&lt;p&gt;Run a container with &lt;code&gt;docker run&lt;/code&gt; to verify your set up.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;docker run&lt;/code&gt; to download and run &lt;code&gt;busybox&lt;/code&gt; with a simple &amp;lsquo;echo&amp;rsquo; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run busybox echo hello world
Unable to find image &#39;busybox&#39; locally
Pulling repository busybox
e72ac664f4f0: Download complete
511136ea3c5a: Download complete
df7546f9f060: Download complete
e433a6c5b276: Download complete
hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get the host IP address.&lt;/p&gt;

&lt;p&gt;Any exposed ports are available on the Docker host’s IP address, which you can get using the &lt;code&gt;docker-machine ip&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ip default
192.168.99.100
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run a webserver (&lt;a href=&#34;https://www.nginx.com/&#34; target=&#34;_blank&#34;&gt;nginx&lt;/a&gt;) in a container with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d -p 8000:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the image is finished pulling, you can hit the server at port 8000 on the IP address given to you by &lt;code&gt;docker-machine ip&lt;/code&gt;. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl $(docker-machine ip default):8000
    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        body {
            width: 35em;
            margin: 0 auto;
            font-family: Tahoma, Verdana, Arial, sans-serif;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
    working. Further configuration is required.&amp;lt;/p&amp;gt;

    &amp;lt;p&amp;gt;For online documentation and support please refer to
    &amp;lt;a href=&amp;quot;http://nginx.org/&amp;quot;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
    Commercial support is available at
    &amp;lt;a href=&amp;quot;http://nginx.com/&amp;quot;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

    &amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you for using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can create and manage as many local VMs running Docker as you please; just run &lt;code&gt;docker-machine create&lt;/code&gt; again. All created machines will appear in the output of &lt;code&gt;docker-machine ls&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;start-and-stop-machines&#34;&gt;Start and stop machines&lt;/h2&gt;

&lt;p&gt;If you are finished using a host for the time being, you can stop it with &lt;code&gt;docker-machine stop&lt;/code&gt; and later start it again with &lt;code&gt;docker-machine start&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ docker-machine stop default
    $ docker-machine start default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;operate-on-machines-without-specifying-the-name&#34;&gt;Operate on machines without specifying the name&lt;/h2&gt;

&lt;p&gt;Some &lt;code&gt;docker-machine&lt;/code&gt; commands will assume that the given operation should be run on a machine named &lt;code&gt;default&lt;/code&gt; (if it exists) if no machine name is specified.  Because using a local VM named &lt;code&gt;default&lt;/code&gt; is such a common pattern, this allows you to save some typing on the most frequently used Machine commands.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      $ docker-machine stop
      Stopping &amp;quot;default&amp;quot;....
      Machine &amp;quot;default&amp;quot; was stopped.

      $ docker-machine start
      Starting &amp;quot;default&amp;quot;...
      (default) Waiting for an IP...
      Machine &amp;quot;default&amp;quot; was started.
      Started machines may have new IP addresses.  You may need to re-run the `docker-machine env` command.

      $ eval $(docker-machine env)

      $ docker-machine ip
        192.168.99.100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commands that follow this style are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - `docker-machine config`
    - `docker-machine env`
    - `docker-machine inspect`
    - `docker-machine ip`
    - `docker-machine kill`
    - `docker-machine provision`
    - `docker-machine regenerate-certs`
    - `docker-machine restart`
    - `docker-machine ssh`
    - `docker-machine start`
    - `docker-machine status`
    - `docker-machine stop`
    - `docker-machine upgrade`
    - `docker-machine url`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For machines other than &lt;code&gt;default&lt;/code&gt;, and commands other than those listed above, you must always specify the name explicitly as an argument.&lt;/p&gt;

&lt;h2 id=&#34;start-local-machines-on-startup&#34;&gt;Start local machines on startup&lt;/h2&gt;

&lt;p&gt;In order to ensure that the Docker client is automatically configured at the start of each shell session, some users like to embed &lt;code&gt;eval $(docker-machine env default)&lt;/code&gt; in their shell profiles (e.g., the &lt;code&gt;~/.bash_profile&lt;/code&gt; file). However, this fails if the &lt;code&gt;default&lt;/code&gt; machine is not running. If desired, you can configure your system to start the &lt;code&gt;default&lt;/code&gt; machine automatically.&lt;/p&gt;

&lt;p&gt;Here is an example of how to configure this on OS X.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;com.docker.machine.default.plist&lt;/code&gt; under &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;EnvironmentVariables&amp;lt;/key&amp;gt;
        &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;PATH&amp;lt;/key&amp;gt;
            &amp;lt;string&amp;gt;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&amp;lt;/string&amp;gt;
        &amp;lt;/dict&amp;gt;
        &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;com.docker.machine.default&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
            &amp;lt;string&amp;gt;/usr/local/bin/docker-machine&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;start&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;default&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change the &lt;code&gt;default&lt;/code&gt; string above to make this &lt;code&gt;LaunchAgent&lt;/code&gt; start any  machine(s) you desire.&lt;/p&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Provision multiple Docker hosts &lt;a href=&#34;../v1.10/machine/get-started-cloud/&#34;&gt;on your cloud provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/concepts/&#34;&gt;Understand Machine concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/machine/drivers/index.md&#34; target=&#34;_blank&#34;&gt;Docker Machine driver reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/machine/reference/&#34; target=&#34;_blank&#34;&gt;Docker Machine subcommand reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Google Compute Engine</title>
      <link>https://docs.docker.com/v1.10/machine/drivers/gce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/drivers/gce/</guid>
      <description>

&lt;h1 id=&#34;google-compute-engine&#34;&gt;Google Compute Engine&lt;/h1&gt;

&lt;p&gt;Create machines on &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;Google Compute Engine&lt;/a&gt;.
You will need a Google account and a project id.
See &lt;a href=&#34;https://cloud.google.com/compute/docs/projects&#34;&gt;https://cloud.google.com/compute/docs/projects&lt;/a&gt; for details on projects.&lt;/p&gt;

&lt;h3 id=&#34;credentials&#34;&gt;Credentials&lt;/h3&gt;

&lt;p&gt;The Google driver uses &lt;a href=&#34;https://developers.google.com/identity/protocols/application-default-credentials&#34;&gt;Application Default Credentials&lt;/a&gt;
to get authorization credentials for use in calling Google APIs.&lt;/p&gt;

&lt;p&gt;So if &lt;code&gt;docker-machine&lt;/code&gt; is used from a GCE host, authentication will happen automatically
via the built-in service account.
Otherwise, &lt;a href=&#34;https://cloud.google.com/sdk/&#34;&gt;install gcloud&lt;/a&gt; and get
through the oauth2 process with &lt;code&gt;gcloud auth login&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;To create a machine instance, specify &lt;code&gt;--driver google&lt;/code&gt;, the project id and the machine name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcloud auth login
$ docker-machine create --driver google --google-project PROJECT_ID vm01
$ docker-machine create --driver google \
  --google-project PROJECT_ID \
  --google-zone us-central1-a \
  --google-machine-type f1-micro \
  vm02
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-   `--google-project`: **required** The id of your project to use when launching the instance.
-   `--google-zone`: The zone to launch the instance.
-   `--google-machine-type`: The type of instance.
-   `--google-machine-image`: The absolute URL to a base VM image to instantiate.
-   `--google-username`: The username to use for the instance.
-   `--google-scopes`: The scopes for OAuth 2.0 to Access Google APIs. See [Google Compute Engine Doc](https://cloud.google.com/storage/docs/authentication).
-   `--google-disk-size`: The disk size of instance.
-   `--google-disk-type`: The disk type of instance.
-   `--google-address`: Instance&#39;s static external IP (name or IP).
-   `--google-preemptible`: Instance preemptibility.
-   `--google-tags`: Instance tags (comma-separated).
-   `--google-use-internal-ip`: When this option is used during create it will make docker-machine use internal rather than public NATed IPs. The flag is persistent in the sense that a machine created with it retains the IP. It&#39;s useful for managing docker machines from another machine on the same network e.g. while deploying swarm.
-   `--google-use-internal-ip-only`: When this option is used during create, the new VM will not be assigned a public IP address. This is useful only when the host running `docker-machine` is located inside the Google Cloud infrastructure; otherwise, `docker-machine` can&#39;t reach the VM to provision the Docker daemon. The presence of this flag implies `--google-use-internal-ip`.
-   `--google-use-existing`: Don&#39;t create a new VM, use an existing one. This is useful when you&#39;d like to provision Docker on a VM you created yourself, maybe because it uses create options not supported by this driver. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The GCE driver will use the &lt;code&gt;ubuntu-1510-wily-v20151114&lt;/code&gt; instance image unless otherwise specified. To obtain a
list of image URLs run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud compute images list --uri
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Environment variables and default values:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CLI option&lt;/th&gt;
&lt;th&gt;Environment variable&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;--google-project&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_PROJECT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-zone&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_ZONE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;us-central1-a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-machine-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_MACHINE_TYPE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;f1-standard-1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-machine-image&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_MACHINE_IMAGE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ubuntu-1510-wily-v20151114&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-username&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_USERNAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker-user&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-scopes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_SCOPES&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;devstorage.read_only,logging.write&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-disk-size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_DISK_SIZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-disk-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_DISK_TYPE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pd-standard&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_ADDRESS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-preemptible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_PREEMPTIBLE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_TAGS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-use-internal-ip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_USE_INTERNAL_IP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--google-use-existing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GOOGLE_USE_EXISTING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>IBM Softlayer</title>
      <link>https://docs.docker.com/v1.10/machine/drivers/soft-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/drivers/soft-layer/</guid>
      <description>

&lt;h1 id=&#34;ibm-softlayer&#34;&gt;IBM Softlayer&lt;/h1&gt;

&lt;p&gt;Create machines on &lt;a href=&#34;http://softlayer.com&#34;&gt;Softlayer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You need to generate an API key in the softlayer control panel.
&lt;a href=&#34;http://knowledgelayer.softlayer.com/procedure/retrieve-your-api-key&#34;&gt;Retrieve your API key&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create --driver softlayer --softlayer-user=user --softlayer-api-key=KEY --softlayer-domain=domain vm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--softlayer-memory&lt;/code&gt;: Memory for host in MB.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-disk-size&lt;/code&gt;: A value of &lt;code&gt;0&lt;/code&gt; will set the SoftLayer default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-user&lt;/code&gt;: &lt;strong&gt;required&lt;/strong&gt; Username for your SoftLayer account, api key needs to match this user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-api-key&lt;/code&gt;: &lt;strong&gt;required&lt;/strong&gt; API key for your user account.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-region&lt;/code&gt;: SoftLayer region.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-cpu&lt;/code&gt;: Number of CPUs for the machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-hostname&lt;/code&gt;: Hostname for the machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-domain&lt;/code&gt;: &lt;strong&gt;required&lt;/strong&gt; Domain name for the machine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-api-endpoint&lt;/code&gt;: Change SoftLayer API endpoint.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-hourly-billing&lt;/code&gt;: Specifies that hourly billing should be used, otherwise monthly billing is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-local-disk&lt;/code&gt;: Use local machine disk instead of SoftLayer SAN.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-private-net-only&lt;/code&gt;: Disable public networking.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-image&lt;/code&gt;: OS Image to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-public-vlan-id&lt;/code&gt;: Your public VLAN ID.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--softlayer-private-vlan-id&lt;/code&gt;: Your private VLAN ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The SoftLayer driver will use &lt;code&gt;UBUNTU_LATEST&lt;/code&gt; as the image type by default.&lt;/p&gt;

&lt;p&gt;Environment variables and default values:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CLI option&lt;/th&gt;
&lt;th&gt;Environment variable&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_MEMORY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1024&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-disk-size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_DISK_SIZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;--softlayer-user&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_USER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;--softlayer-api-key&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_API_KEY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-region&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_REGION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dal01&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-cpu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_CPU&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-hostname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_HOSTNAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;--softlayer-domain&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_DOMAIN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-api-endpoint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_API_ENDPOINT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;api.softlayer.com/rest/v3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-hourly-billing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_HOURLY_BILLING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-local-disk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_LOCAL_DISK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-private-net-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_PRIVATE_NET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-image&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_IMAGE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UBUNTU_LATEST&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-public-vlan-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_PUBLIC_VLAN_ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--softlayer-private-vlan-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SOFTLAYER_PRIVATE_VLAN_ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Install Machine</title>
      <link>https://docs.docker.com/v1.10/machine/install-machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/install-machine/</guid>
      <description>

&lt;h1 id=&#34;install-docker-machine&#34;&gt;Install Docker Machine&lt;/h1&gt;

&lt;p&gt;On OS X and Windows, Machine is installed along with other Docker products when
you install the Docker Toolbox. For details on installing Docker Toolbox, see
the &lt;a href=&#34;https://docs.docker.com/installation/mac/&#34; target=&#34;_blank&#34;&gt;Mac OS X
installation&lt;/a&gt; instructions or &lt;a
href=&#34;https://docs.docker.com/installation/windows&#34; target=&#34;_blank&#34;&gt;Windows
installation&lt;/a&gt; instructions.&lt;/p&gt;

&lt;p&gt;If you want only Docker Machine, you can install the Machine binaries directly by following the instructions in the next section. You can find the latest versions of the binaries are on the &lt;a href=&#34;https://github.com/docker/machine/releases/&#34; target=&#34;_blank&#34;&gt; docker/machine release page&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&#34;installing-machine-directly&#34;&gt;Installing Machine Directly&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href=&#34;https://docs.docker.com/installation/&#34;
target=&#34;_blank&#34;&gt;the Docker binary&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download the Docker Machine binary and extract it to your PATH.&lt;/p&gt;

&lt;p&gt;If you are running OS X or Linux:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L https://github.com/docker/machine/releases/download/v0.6.0/docker-machine-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-machine &amp;amp;&amp;amp; \
chmod +x /usr/local/bin/docker-machine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are running Windows with git bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ if [[ ! -d &amp;quot;$HOME/bin&amp;quot; ]]; then mkdir -p &amp;quot;$HOME/bin&amp;quot;; fi &amp;amp;&amp;amp; \
curl -L https://github.com/docker/machine/releases/download/v0.6.0/docker-machine-Windows-x86_64.exe &amp;gt; &amp;quot;$HOME/bin/docker-machine.exe&amp;quot; &amp;amp;&amp;amp; \
chmod +x &amp;quot;$HOME/bin/docker-machine.exe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, download one of the releases from the &lt;a href=&#34;https://github.com/docker/machine/releases/&#34; target=&#34;_blank&#34;&gt; docker/machine release page&lt;/a&gt; directly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the installation by displaying the Machine version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine version
docker-machine version 0.6.0, build 61388e9
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;installing-bash-completion-scripts&#34;&gt;Installing bash completion scripts&lt;/h2&gt;

&lt;p&gt;The Machine repository supplies several &lt;code&gt;bash&lt;/code&gt; scripts that add features such
as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;command completion&lt;/li&gt;
&lt;li&gt;a function that displays the active machine in your shell prompt&lt;/li&gt;
&lt;li&gt;a function wrapper that adds a &lt;code&gt;docker-machine use&lt;/code&gt; subcommand to switch the
active machine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install the scripts, copy or link them into your &lt;code&gt;/etc/bash_completion.d&lt;/code&gt; or
&lt;code&gt;/usr/local/etc/bash_completion.d&lt;/code&gt; directory. To enable the &lt;code&gt;docker-machine&lt;/code&gt; shell
prompt, add &lt;code&gt;$(__docker_machine_ps1)&lt;/code&gt; to your &lt;code&gt;PS1&lt;/code&gt; setting in &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS1=&#39;[\u@\h \W$(__docker_machine_ps1)]\$ &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find additional documentation in the comments at the &lt;a href=&#34;https://github.com/docker/machine/tree/master/contrib/completion/bash&#34; target=&#34;_blank&#34;&gt;top of each script&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/overview/&#34;&gt;Docker Machine overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create and run a Docker host on your &lt;a href=&#34;../v1.10/machine/get-started/&#34;&gt;local system using VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Provision multiple Docker hosts &lt;a href=&#34;../v1.10/machine/get-started-cloud/&#34;&gt;on your cloud provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/machine/drivers/&#34; target=&#34;_blank&#34;&gt;Docker Machine driver reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/machine/reference/&#34; target=&#34;_blank&#34;&gt;Docker Machine subcommand reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Learn by example</title>
      <link>https://docs.docker.com/v1.10/machine/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/examples/</guid>
      <description>

&lt;h1 id=&#34;learn-by-example&#34;&gt;Learn by example&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/examples/ocean/&#34;&gt;Digital Ocean Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/examples/aws/&#34;&gt;AWS Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Machine Overview</title>
      <link>https://docs.docker.com/v1.10/machine/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/overview/</guid>
      <description>

&lt;h1 id=&#34;docker-machine-overview&#34;&gt;Docker Machine Overview&lt;/h1&gt;

&lt;p&gt;You can use Docker Machine to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install and run Docker on Mac or Windows&lt;/li&gt;
&lt;li&gt;Provision and manage multiple remote Docker hosts&lt;/li&gt;
&lt;li&gt;Provision Swarm clusters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-docker-machine&#34;&gt;What is Docker Machine?&lt;/h2&gt;

&lt;p&gt;Docker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage the hosts with &lt;code&gt;docker-machine&lt;/code&gt; commands. You can use Machine to create Docker hosts on your local Mac or Windows box, on your company network, in your data center, or on cloud providers like AWS or Digital Ocean.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;docker-machine&lt;/code&gt; commands, you can start, inspect, stop, and restart a managed host, upgrade the Docker client and daemon, and configure a Docker client to talk to your host.&lt;/p&gt;

&lt;p&gt;Point the Machine CLI at a running, managed host, and you can run &lt;code&gt;docker&lt;/code&gt; commands directly on that host. For example, run &lt;code&gt;docker-machine env default&lt;/code&gt; to point to a host called &lt;code&gt;default&lt;/code&gt;, follow on-screen instructions to complete &lt;code&gt;env&lt;/code&gt; setup, and run &lt;code&gt;docker ps&lt;/code&gt;, &lt;code&gt;docker run hello-world&lt;/code&gt;, and so forth.&lt;/p&gt;

&lt;h2 id=&#34;why-should-i-use-it&#34;&gt;Why should I use it?&lt;/h2&gt;

&lt;p&gt;Machine is currently the only way to run Docker on Mac or Windows, and the best way to provision multiple remote Docker hosts on various flavors of Linux.&lt;/p&gt;

&lt;p&gt;Docker Machine has these two broad use cases.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I want to run Docker on Mac or Windows&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../machine/img/machine-mac-win.png&#34; alt=&#34;Docker Machine on Mac and Windows&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you work primarily on a Mac or Windows laptop or desktop, you need Docker Machine in order to &amp;ldquo;run Docker&amp;rdquo; (that is, Docker Engine) locally. Installing Docker Machine on a Mac or Windows box provisions a local virtual machine with Docker Engine, gives you the ability to connect it, and run &lt;code&gt;docker&lt;/code&gt; commands.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I want to provision Docker hosts on remote systems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../machine/img/provision-use-case.png&#34; alt=&#34;Docker Machine for provisioning multiple systems&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Docker Engine runs natively on Linux systems. If you have a Linux box as your primary system, and want to run &lt;code&gt;docker&lt;/code&gt; commands, all you need to do is download and install Docker Engine. However, if you want an efficient way to provision multiple Docker hosts on a network, in the cloud or even locally, you need Docker Machine.&lt;/p&gt;

&lt;p&gt;Whether your primary system is Mac, Windows, or Linux, you can install Docker Machine on it and use &lt;code&gt;docker-machine&lt;/code&gt; commands to provision and manage large numbers of Docker hosts. It automatically creates hosts, installs Docker Engine on them, then configures the &lt;code&gt;docker&lt;/code&gt; clients. Each managed host (&amp;rdquo;&lt;strong&gt;&lt;em&gt;machine&lt;/em&gt;&lt;/strong&gt;&amp;rdquo;) is the combination of a Docker host and a configured client.&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-difference-between-docker-engine-and-docker-machine&#34;&gt;What&amp;rsquo;s the difference between Docker Engine and Docker Machine?&lt;/h2&gt;

&lt;p&gt;When people say &amp;ldquo;Docker&amp;rdquo; they typically mean &lt;strong&gt;Docker Engine&lt;/strong&gt;, the client-server application made up of the Docker daemon, a REST API that specifies interfaces for interacting with the daemon, and a command line interface (CLI) client that talks to the daemon (through the REST API wrapper). Docker Engine accepts &lt;code&gt;docker&lt;/code&gt; commands from the CLI, such as &lt;code&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt;, &lt;code&gt;docker ps&lt;/code&gt; to list running containers, &lt;code&gt;docker images&lt;/code&gt; to list images, and so on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../machine/img/engine.png&#34; alt=&#34;Docker Engine&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Machine&lt;/strong&gt; is a tool for provisioning and managing your Dockerized hosts (hosts with Docker Engine on them). Typically, you install Docker Machine on your local system. Docker Machine has its own command line client &lt;code&gt;docker-machine&lt;/code&gt; and the Docker Engine client, &lt;code&gt;docker&lt;/code&gt;. You can use Machine to install Docker Engine on one or more virtual systems. These virtual systems can be local (as when you use Machine to install and run Docker Engine in VirtualBox on Mac or Windows) or remote (as when you use Machine to provision Dockerized hosts on cloud providers). The Dockerized hosts themselves can be thought of, and are sometimes referred to as, managed &amp;ldquo;&lt;strong&gt;&lt;em&gt;machines&lt;/em&gt;&lt;/strong&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../machine/img/machine.png&#34; alt=&#34;Docker Machine&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/install-machine/&#34;&gt;Install Docker Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create and run a Docker host on your &lt;a href=&#34;../v1.10/machine/get-started/&#34;&gt;local system using VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Provision multiple Docker hosts &lt;a href=&#34;../v1.10/machine/get-started-cloud/&#34;&gt;on your cloud provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/swarm/provision-with-machine/&#34;&gt;Provision a Docker Swarm cluster with Docker Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/concepts/&#34;&gt;Understand Machine concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/drivers/&#34;&gt;Docker Machine driver reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/reference/&#34;&gt;Docker Machine subcommand reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../v1.10/machine/migrate-to-machine/&#34;&gt;Migrate from Boot2Docker to Docker Machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Machine concepts and help</title>
      <link>https://docs.docker.com/v1.10/machine/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.docker.com/v1.10/machine/concepts/</guid>
      <description>

&lt;h1 id=&#34;understand-machine-concepts-and-get-help&#34;&gt;Understand Machine concepts and get help&lt;/h1&gt;

&lt;p&gt;Docker Machine allows you to provision Docker machines in a variety of environments, including virtual machines that reside on your local system, on cloud providers, or on bare metal servers (physical computers). Docker Machine creates a Docker host, and you use the Docker Engine client as needed to build images and create containers on the host.&lt;/p&gt;

&lt;h2 id=&#34;drivers-for-creating-machines&#34;&gt;Drivers for creating machines&lt;/h2&gt;

&lt;p&gt;To create a virtual machine, you supply Docker Machine with the name of the driver you want use. The driver determines where the virtual machine is created. For example, on a local Mac or Windows system, the driver is typically Oracle VirtualBox. For provisioning physical machines, a generic driver is provided. For cloud providers, Docker Machine supports drivers such as AWS, Microsoft Azure, Digital Ocean, and many more. The Docker Machine reference includes a complete &lt;a href=&#34;../v1.10/machine/drivers/&#34;&gt;list of supported drivers&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;default-base-operating-systems-for-local-and-cloud-hosts&#34;&gt;Default base operating systems for local and cloud hosts&lt;/h2&gt;

&lt;p&gt;Since Docker runs on Linux, each VM that Docker Machine provisions relies on a
base operating system. For convenience, there are default base operating
systems. For the Oracle Virtual Box driver, this base operating system is &lt;a href=&#34;https://github.com/boot2docker/boot2docker&#34; target=&#34;_blank&#34;&gt;boot2docker&lt;/a&gt;. For drivers used to connect to cloud providers, the base operating system is Ubuntu 12.04+. You can change this default when you create a machine. The Docker Machine reference includes a complete &lt;a href=&#34;../v1.10/machine/drivers/os-base/&#34;&gt;list of
supported operating systems&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ip-addresses-for-docker-hosts&#34;&gt;IP addresses for Docker hosts&lt;/h2&gt;

&lt;p&gt;For each machine you create, the Docker host address is the IP address of the
Linux VM. This address is assigned by the &lt;code&gt;docker-machine create&lt;/code&gt; subcommand.
You use the &lt;code&gt;docker-machine ls&lt;/code&gt; command to list the machines you have created.
The &lt;code&gt;docker-machine ip &amp;lt;machine-name&amp;gt;&lt;/code&gt; command returns a specific host&amp;rsquo;s IP
address.&lt;/p&gt;

&lt;h2 id=&#34;configuring-cli-environment-variables-for-a-docker-host&#34;&gt;Configuring CLI environment variables for a Docker host&lt;/h2&gt;

&lt;p&gt;Before you can run a &lt;code&gt;docker&lt;/code&gt; command on a machine, you need to configure your
command-line to point to that machine. The &lt;code&gt;docker-machine env &amp;lt;machine-name&amp;gt;&lt;/code&gt;
subcommand outputs the configuration command you should use.&lt;/p&gt;

&lt;p&gt;For a complete list of &lt;code&gt;docker-machine&lt;/code&gt; subcommands, see the &lt;a href=&#34;../v1.10/machine/reference/&#34;&gt;Docker Machine subcommand reference&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;crash-reporting&#34;&gt;Crash Reporting&lt;/h2&gt;

&lt;p&gt;Provisioning a host is a complex matter that can fail for a lot of reasons. Your
workstation may have a wide variety of shell, network configuration, VPN, proxy
or firewall issues.  There are also reasons from the other end of the chain:
your cloud provider or the network in between.&lt;/p&gt;

&lt;p&gt;To help &lt;code&gt;docker-machine&lt;/code&gt; be as stable as possible, we added a monitoring of
crashes whenever you try to &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt; a host. This will send, over
HTTPS, to Bugsnag some information about your &lt;code&gt;docker-machine&lt;/code&gt; version, build,
OS, ARCH, the path to your current shell and, the history of the last command as
you could see it with a &lt;code&gt;--debug&lt;/code&gt; option.  This data is sent to help us pinpoint
recurring issues with &lt;code&gt;docker-machine&lt;/code&gt; and will only be transmitted in the case
of a crash of &lt;code&gt;docker-machine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you wish to opt out of error reporting, you can create a &lt;code&gt;no-error-report&lt;/code&gt;
file in your &lt;code&gt;$HOME/.docker/machine&lt;/code&gt; directory, and Docker Machine will disable
this behavior.  e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p ~/.docker/machine &amp;amp;&amp;amp; touch ~/.docker/machine/no-error-report
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leaving the file empty is fine -- Docker Machine just checks for its presence.&lt;/p&gt;

&lt;h2 id=&#34;getting-help&#34;&gt;Getting help&lt;/h2&gt;

&lt;p&gt;Docker Machine is still in its infancy and under active development. If you need
help, would like to contribute, or simply want to talk about the project with
like-minded individuals, we have a number of open channels for communication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To report bugs or file feature requests: please use the &lt;a href=&#34;https://github.com/docker/machine/issues&#34;&gt;issue tracker on
Github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To talk about the project with people in real time: please join the
&lt;code&gt;#docker-machine&lt;/code&gt; channel on IRC.&lt;/li&gt;
&lt;li&gt;To contribute code or documentation changes: please &lt;a href=&#34;https://github.com/docker/machine/pulls&#34;&gt;submit a pull request on
Github&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information and resources, please visit
&lt;a href=&#34;https://docs.docker.com/project/get-help/&#34;&gt;our help page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create and run a Docker host on your &lt;a href=&#34;../v1.10/machine/get-started/&#34;&gt;local system using VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Provision multiple Docker hosts &lt;a href=&#34;../v1.10/machine/get-started-cloud/&#34;&gt;on your cloud provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../drivers/&#34; target=&#34;_blank&#34;&gt;Docker Machine driver reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../reference/&#34; target=&#34;_blank&#34;&gt;Docker Machine subcommand reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>